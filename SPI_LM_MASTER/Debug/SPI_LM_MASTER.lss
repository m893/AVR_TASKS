
SPI_LM_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003368  000033fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800180  00800180  0000351c  2**0
                  ALLOC
  3 .stab         00003894  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccc  00000000  00000000  00006db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00008c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00008e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b462  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000dc3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000de1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e123  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_1>
       8:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_2>
       c:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 18 	call	0x3174	; 0x3174 <main>
      8a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_VoidEnable>:
#include "WDT_interface.h"
#include "WDT_private.h"
#include "WDT_config.h"

void  WDT_VoidEnable(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
    //set WDTCR_WDE to enable
    SET_BIT(WDTCR,WDTCR_WDE);
     ef2:	a1 e4       	ldi	r26, 0x41	; 65
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e1 e4       	ldi	r30, 0x41	; 65
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <WDT_VoidSleep>:
 

 void WDT_VoidSleep(u8 Copy_U8sleeptime)
 {
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
    //mask to clear the first 3 bit
    WDTCR &= 0b11111000 ;
     f12:	a1 e4       	ldi	r26, 0x41	; 65
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e1 e4       	ldi	r30, 0x41	; 65
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 7f       	andi	r24, 0xF8	; 248
     f1e:	8c 93       	st	X, r24
    // or with time user select 
    WDTCR |=Copy_U8sleeptime ;
     f20:	a1 e4       	ldi	r26, 0x41	; 65
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e1 e4       	ldi	r30, 0x41	; 65
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	90 81       	ld	r25, Z
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	89 2b       	or	r24, r25
     f2e:	8c 93       	st	X, r24
 }
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <WDT_VoidDisable>:

 void WDT_VoidDisable(void)
 {
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
    // set bit in  in enable bit and turn off bit in same time and clear WDE 
   WDTCR = (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
     f40:	e1 e4       	ldi	r30, 0x41	; 65
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	88 e1       	ldi	r24, 0x18	; 24
     f46:	80 83       	st	Z, r24
   WDTCR = 0;
     f48:	e1 e4       	ldi	r30, 0x41	; 65
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	10 82       	st	Z, r1
 }
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <UART_VoidInit>:
#include "UART_private.h"
#include "UART_config.h"


void UART_VoidInit(void)
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
        u8 Local_u8UCSRCTemp=0 ;  
     f5e:	19 82       	std	Y+1, r1	; 0x01

        /* asynchrounous mode */
        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_URSEL);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	8f 77       	andi	r24, 0x7F	; 127
     f64:	89 83       	std	Y+1, r24	; 0x01

        /* enable tx and rx circuits*/
            SET_BIT(UCSRB , UCSRB_TXEN);
     f66:	aa e2       	ldi	r26, 0x2A	; 42
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ea e2       	ldi	r30, 0x2A	; 42
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	8c 93       	st	X, r24
            SET_BIT(UCSRB , UCSRB_RXEN);
     f74:	aa e2       	ldi	r26, 0x2A	; 42
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ea e2       	ldi	r30, 0x2A	; 42
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 61       	ori	r24, 0x10	; 16
     f80:	8c 93       	st	X, r24
        /*data size */
        SET_BIT(Local_u8UCSRCTemp,UCSRC_UCSZ0);
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	82 60       	ori	r24, 0x02	; 2
     f86:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp,UCSRC_UCSZ1);
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	84 60       	ori	r24, 0x04	; 4
     f8c:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRB , UCSRB_UCSZ2);
     f8e:	aa e2       	ldi	r26, 0x2A	; 42
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ea e2       	ldi	r30, 0x2A	; 42
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	84 60       	ori	r24, 0x04	; 4
     f9a:	8c 93       	st	X, r24
        /*parity disabled*/

        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_UPM0);
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	8f 7e       	andi	r24, 0xEF	; 239
     fa0:	89 83       	std	Y+1, r24	; 0x01
        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_UPM0);
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	8f 7e       	andi	r24, 0xEF	; 239
     fa6:	89 83       	std	Y+1, r24	; 0x01

        /* stop bit 1 bit*/
        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_USBS);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	87 7f       	andi	r24, 0xF7	; 247
     fac:	89 83       	std	Y+1, r24	; 0x01


        SET_BIT(Local_u8UCSRCTemp,UCSRC_URSEL);     //write in ucsrc register
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	89 83       	std	Y+1, r24	; 0x01
            /* assign variable value to register */
        UCSRC=Local_u8UCSRCTemp ;
     fb4:	e0 e4       	ldi	r30, 0x40	; 64
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	80 83       	st	Z, r24

        

        /* disable double speed mode*/
        CLEAR_BIT(UCSRA , UCSRA_U2X);
     fbc:	ab e2       	ldi	r26, 0x2B	; 43
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	eb e2       	ldi	r30, 0x2B	; 43
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8d 7f       	andi	r24, 0xFD	; 253
     fc8:	8c 93       	st	X, r24
        /* set baudrate to be 9600*/
        UBRRL=51 ;
     fca:	e9 e2       	ldi	r30, 0x29	; 41
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	83 e3       	ldi	r24, 0x33	; 51
     fd0:	80 83       	st	Z, r24
        /*write in UBRRH register*/
        SET_BIT(UBRRH,UBRRH_URSEL);
     fd2:	a0 e4       	ldi	r26, 0x40	; 64
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e0 e4       	ldi	r30, 0x40	; 64
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 68       	ori	r24, 0x80	; 128
     fde:	8c 93       	st	X, r24

        UBRRH = 0;
     fe0:	e0 e4       	ldi	r30, 0x40	; 64
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	10 82       	st	Z, r1

}
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <UART_VoidTransmitDataSynchronous>:

void UART_VoidTransmitDataSynchronous(u8 Copy_u8Data)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	89 83       	std	Y+1, r24	; 0x01
            /*polling untill UDR empty*/
        while(GET_BIT(UCSRA ,UCSRA_UDRE)==0);
     ffa:	eb e2       	ldi	r30, 0x2B	; 43
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	82 95       	swap	r24
    1002:	86 95       	lsr	r24
    1004:	87 70       	andi	r24, 0x07	; 7
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	81 70       	andi	r24, 0x01	; 1
    100c:	90 70       	andi	r25, 0x00	; 0
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	a1 f3       	breq	.-24     	; 0xffa <UART_VoidTransmitDataSynchronous+0xc>
            /*copy data to udr register*/
        UDR = Copy_u8Data ;
    1012:	ec e2       	ldi	r30, 0x2C	; 44
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 83       	st	Z, r24
            /*polling untill transmitting complete*/
        while(GET_BIT(UCSRA ,UCSRA_TXC)==0);
    101a:	eb e2       	ldi	r30, 0x2B	; 43
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	82 95       	swap	r24
    1022:	86 95       	lsr	r24
    1024:	86 95       	lsr	r24
    1026:	83 70       	andi	r24, 0x03	; 3
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	81 70       	andi	r24, 0x01	; 1
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	99 f3       	breq	.-26     	; 0x101a <UART_VoidTransmitDataSynchronous+0x2c>
            /* clear flag*/
        SET_BIT(UCSRA , UCSRA_TXC);
    1034:	ab e2       	ldi	r26, 0x2B	; 43
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e2       	ldi	r30, 0x2B	; 43
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	8c 93       	st	X, r24
}
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <UART_u8ReceiveDataSynchronous>:

void UART_u8ReceiveDataSynchronous(u8 * Copy_u8ReceivedData)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <UART_u8ReceiveDataSynchronous+0x6>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
        /*polling untill receiving complete*/
        while(GET_BIT(UCSRA , UCSRA_RXC)==0);
    1058:	eb e2       	ldi	r30, 0x2B	; 43
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	88 23       	and	r24, r24
    1060:	dc f7       	brge	.-10     	; 0x1058 <UART_u8ReceiveDataSynchronous+0xe>
            /* get the receive data */
            * Copy_u8ReceivedData = UDR ;
    1062:	ec e2       	ldi	r30, 0x2C	; 44
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	e9 81       	ldd	r30, Y+1	; 0x01
    106a:	fa 81       	ldd	r31, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
      
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <TIMER0_voidInit>:
static void (*Global_pvOCNotificationFunction)(void) = NULL;

static void (*ICU_NotificationFunction)(void)=NULL ;

void TIMER0_voidInit(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
	#if TIMER0_MODE == NORMAL_MODE
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
		CLEAR_BIT(TCCR0,TCCR0_WGM01);
		/* Set CTC Mode for timer0 */
	#elif TIMER0_MODE == CTC_MODE
			CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1080:	a3 e5       	ldi	r26, 0x53	; 83
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e3 e5       	ldi	r30, 0x53	; 83
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 7b       	andi	r24, 0xBF	; 191
    108c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM01);
    108e:	a3 e5       	ldi	r26, 0x53	; 83
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e3 e5       	ldi	r30, 0x53	; 83
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 60       	ori	r24, 0x08	; 8
    109a:	8c 93       	st	X, r24
	#else

	#endif

	/*Set The Prescaler to be 8*/
		TCCR0 &= PRESCALER_MASK ;
    109c:	a3 e5       	ldi	r26, 0x53	; 83
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e3 e5       	ldi	r30, 0x53	; 83
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	88 7f       	andi	r24, 0xF8	; 248
    10a8:	8c 93       	st	X, r24
		TCCR0 |= TIMER0_PRESCALER ;
    10aa:	a3 e5       	ldi	r26, 0x53	; 83
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e3 e5       	ldi	r30, 0x53	; 83
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	82 60       	ori	r24, 0x02	; 2
    10b6:	8c 93       	st	X, r24

}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
		/* Set Normal Mode for timer2*/ 
	#if TIMER2_MODE == NORMAL_MODE
		CLEAR_BIT(TCCR2,TCCR2_WGM20);
    10c6:	a5 e4       	ldi	r26, 0x45	; 69
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e4       	ldi	r30, 0x45	; 69
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8f 7b       	andi	r24, 0xBF	; 191
    10d2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21);
    10d4:	a5 e4       	ldi	r26, 0x45	; 69
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e4       	ldi	r30, 0x45	; 69
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	87 7f       	andi	r24, 0xF7	; 247
    10e0:	8c 93       	st	X, r24
	#else

	#endif

	/*Set The Prescaler to be 8*/
		TCCR2 &= PRESCALER_MASK ;
    10e2:	a5 e4       	ldi	r26, 0x45	; 69
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e4       	ldi	r30, 0x45	; 69
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 7f       	andi	r24, 0xF8	; 248
    10ee:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_PRESCALER ;
    10f0:	a5 e4       	ldi	r26, 0x45	; 69
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e4       	ldi	r30, 0x45	; 69
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	8c 93       	st	X, r24

}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <TIMER0_VoidSetModeForFastmode>:

void TIMER0_VoidSetModeForFastmode(u8 Copy_U8Mode)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <TIMER0_VoidSetModeForFastmode+0x6>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_U8Mode)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3b 83       	std	Y+3, r19	; 0x03
    111a:	2a 83       	std	Y+2, r18	; 0x02
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	c1 f0       	breq	.+48     	; 0x1156 <TIMER0_VoidSetModeForFastmode+0x52>
    1126:	2a 81       	ldd	r18, Y+2	; 0x02
    1128:	3b 81       	ldd	r19, Y+3	; 0x03
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	11 f1       	breq	.+68     	; 0x1174 <TIMER0_VoidSetModeForFastmode+0x70>
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	9b 81       	ldd	r25, Y+3	; 0x03
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 f5       	brne	.+88     	; 0x1190 <TIMER0_VoidSetModeForFastmode+0x8c>
	{
	case FAST_OC0_DISCONNECTED :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1138:	a3 e5       	ldi	r26, 0x53	; 83
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e5       	ldi	r30, 0x53	; 83
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8f 7e       	andi	r24, 0xEF	; 239
    1144:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e3 e5       	ldi	r30, 0x53	; 83
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7d       	andi	r24, 0xDF	; 223
    1152:	8c 93       	st	X, r24
    1154:	1d c0       	rjmp	.+58     	; 0x1190 <TIMER0_VoidSetModeForFastmode+0x8c>
		break;
	case FAST_SET_ON_TOP :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8f 7e       	andi	r24, 0xEF	; 239
    1162:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	8c 93       	st	X, r24
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <TIMER0_VoidSetModeForFastmode+0x8c>
		break;
	case FAST_CLEAR_ON_TOP :
		SET_BIT(TCCR0,TCCR0_COM00);
    1174:	a3 e5       	ldi	r26, 0x53	; 83
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e3 e5       	ldi	r30, 0x53	; 83
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 61       	ori	r24, 0x10	; 16
    1180:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    1182:	a3 e5       	ldi	r26, 0x53	; 83
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 62       	ori	r24, 0x20	; 32
    118e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <TIMER0_VoidSetModeForPhaseCorrectmode>:

void TIMER0_VoidSetModeForPhaseCorrectmode(u8 Copy_U8Mode)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <TIMER0_VoidSetModeForPhaseCorrectmode+0x6>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_U8Mode)
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3b 83       	std	Y+3, r19	; 0x03
    11b2:	2a 83       	std	Y+2, r18	; 0x02
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	91 05       	cpc	r25, r1
    11bc:	c1 f0       	breq	.+48     	; 0x11ee <TIMER0_VoidSetModeForPhaseCorrectmode+0x52>
    11be:	2a 81       	ldd	r18, Y+2	; 0x02
    11c0:	3b 81       	ldd	r19, Y+3	; 0x03
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	11 f1       	breq	.+68     	; 0x120c <TIMER0_VoidSetModeForPhaseCorrectmode+0x70>
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	61 f5       	brne	.+88     	; 0x1228 <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
	{
	case PHASE_OC0_DISCONNECTED :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    11d0:	a3 e5       	ldi	r26, 0x53	; 83
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e3 e5       	ldi	r30, 0x53	; 83
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	8f 7e       	andi	r24, 0xEF	; 239
    11dc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    11de:	a3 e5       	ldi	r26, 0x53	; 83
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e3 e5       	ldi	r30, 0x53	; 83
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8f 7d       	andi	r24, 0xDF	; 223
    11ea:	8c 93       	st	X, r24
    11ec:	1d c0       	rjmp	.+58     	; 0x1228 <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
		break;
	case PHASE_SET_OC0_ON_COMAPRE :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    11ee:	a3 e5       	ldi	r26, 0x53	; 83
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e3 e5       	ldi	r30, 0x53	; 83
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7e       	andi	r24, 0xEF	; 239
    11fa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    11fc:	a3 e5       	ldi	r26, 0x53	; 83
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e3 e5       	ldi	r30, 0x53	; 83
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 62       	ori	r24, 0x20	; 32
    1208:	8c 93       	st	X, r24
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
		break;
	case PHASE_CLEAR_OC0_ON_COMPARE :
		SET_BIT(TCCR0,TCCR0_COM00);
    120c:	a3 e5       	ldi	r26, 0x53	; 83
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e3 e5       	ldi	r30, 0x53	; 83
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 61       	ori	r24, 0x10	; 16
    1218:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    121a:	a3 e5       	ldi	r26, 0x53	; 83
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e3 e5       	ldi	r30, 0x53	; 83
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 62       	ori	r24, 0x20	; 32
    1226:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <TIMER2_voidSetPreloadValue>:
void TIMER2_voidSetPreloadValue(u8 Copy_u8Value)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Value ;
    1240:	e4 e4       	ldi	r30, 0x44	; 68
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	80 83       	st	Z, r24
}
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <TIMER2_voidSetOCMatchValue>:
void TIMER2_voidSetOCMatchValue(u8 Copy_u8Value)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Value;
    125c:	e3 e4       	ldi	r30, 0x43	; 67
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	80 83       	st	Z, r24
}
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8Value)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    1278:	e2 e5       	ldi	r30, 0x52	; 82
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	80 83       	st	Z, r24
}
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <TIMER0_voidSetOCMatchValue>:
void TIMER0_voidSetOCMatchValue(u8 Copy_u8Value)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    1294:	ec e5       	ldi	r30, 0x5C	; 92
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	80 83       	st	Z, r24
}
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <TIMER0_voidSetOVFCallBack>:

void TIMER0_voidSetOVFCallBack(void(*pvNotificationFunction)(void))
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <TIMER0_voidSetOVFCallBack+0x6>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
	Global_pvOVFNotificationFunction = pvNotificationFunction;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	90 93 81 01 	sts	0x0181, r25
    12ba:	80 93 80 01 	sts	0x0180, r24
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <TIMER0_voidSetOCCallBack>:
void TIMER0_voidSetOCCallBack(void(*pvNotificationFunction)(void))
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <TIMER0_voidSetOCCallBack+0x6>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	Global_pvOCNotificationFunction = pvNotificationFunction;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	90 93 83 01 	sts	0x0183, r25
    12de:	80 93 82 01 	sts	0x0182, r24
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <TIMER0_voidEnableInterrupt>:

void TIMER0_voidEnableInterrupt(u8 Copy_u8Mode)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Mode == NORMAL_MODE)
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	88 23       	and	r24, r24
    12fc:	41 f4       	brne	.+16     	; 0x130e <TIMER0_voidEnableInterrupt+0x22>
	{
		SET_BIT(TIMSK,TIMSK_TOIE0);
    12fe:	a9 e5       	ldi	r26, 0x59	; 89
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e9 e5       	ldi	r30, 0x59	; 89
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	8c 93       	st	X, r24
    130c:	0a c0       	rjmp	.+20     	; 0x1322 <TIMER0_voidEnableInterrupt+0x36>
	}
	else if(Copy_u8Mode == CTC_MODE)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	39 f4       	brne	.+14     	; 0x1322 <TIMER0_voidEnableInterrupt+0x36>
	{
		SET_BIT(TIMSK,TIMSK_OCIE0);
    1314:	a9 e5       	ldi	r26, 0x59	; 89
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e9 e5       	ldi	r30, 0x59	; 89
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	82 60       	ori	r24, 0x02	; 2
    1320:	8c 93       	st	X, r24
	}
}
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <TIMER0_voidDisableInterrupt>:
void TIMER0_voidDisableInterrupt(u8 Copy_u8Mode)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Mode == NORMAL_MODE)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	88 23       	and	r24, r24
    133a:	41 f4       	brne	.+16     	; 0x134c <TIMER0_voidDisableInterrupt+0x22>
	{
		CLEAR_BIT(TIMSK,TIMSK_TOIE0);
    133c:	a9 e5       	ldi	r26, 0x59	; 89
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e9 e5       	ldi	r30, 0x59	; 89
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8e 7f       	andi	r24, 0xFE	; 254
    1348:	8c 93       	st	X, r24
    134a:	0a c0       	rjmp	.+20     	; 0x1360 <TIMER0_voidDisableInterrupt+0x36>
	}
	else if(Copy_u8Mode == CTC_MODE)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	39 f4       	brne	.+14     	; 0x1360 <TIMER0_voidDisableInterrupt+0x36>
	{
		CLEAR_BIT(TIMSK,TIMSK_OCIE0);
    1352:	a9 e5       	ldi	r26, 0x59	; 89
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e9 e5       	ldi	r30, 0x59	; 89
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8d 7f       	andi	r24, 0xFD	; 253
    135e:	8c 93       	st	X, r24
	}
}
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <TIMER0_voidSetBusyWait_OVFMode>:

void TIMER0_voidSetBusyWait_OVFMode(u32 Copy_u32Time)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <TIMER0_voidSetBusyWait_OVFMode+0x6>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <TIMER0_voidSetBusyWait_OVFMode+0x8>
    1370:	00 d0       	rcall	.+0      	; 0x1372 <TIMER0_voidSetBusyWait_OVFMode+0xa>
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
    137a:	a3 e5       	ldi	r26, 0x53	; 83
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e3 e5       	ldi	r30, 0x53	; 83
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8e 7f       	andi	r24, 0xFE	; 254
    1386:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    1388:	a3 e5       	ldi	r26, 0x53	; 83
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e3 e5       	ldi	r30, 0x53	; 83
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	82 60       	ori	r24, 0x02	; 2
    1394:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02);
    1396:	a3 e5       	ldi	r26, 0x53	; 83
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e3 e5       	ldi	r30, 0x53	; 83
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8b 7f       	andi	r24, 0xFB	; 251
    13a2:	8c 93       	st	X, r24

	TIMER0_voidSetPreloadValue(6);
    13a4:	86 e0       	ldi	r24, 0x06	; 6
    13a6:	0e 94 36 09 	call	0x126c	; 0x126c <TIMER0_voidSetPreloadValue>
	u32 Number_of_OVF = ((u32)(Copy_u32Time*1000)) / 250;
    13aa:	2d 81       	ldd	r18, Y+5	; 0x05
    13ac:	3e 81       	ldd	r19, Y+6	; 0x06
    13ae:	88 ee       	ldi	r24, 0xE8	; 232
    13b0:	93 e0       	ldi	r25, 0x03	; 3
    13b2:	ac 01       	movw	r20, r24
    13b4:	24 9f       	mul	r18, r20
    13b6:	c0 01       	movw	r24, r0
    13b8:	25 9f       	mul	r18, r21
    13ba:	90 0d       	add	r25, r0
    13bc:	34 9f       	mul	r19, r20
    13be:	90 0d       	add	r25, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	2a ef       	ldi	r18, 0xFA	; 250
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	b9 01       	movw	r22, r18
    13c8:	0e 94 32 19 	call	0x3264	; 0x3264 <__udivmodhi4>
    13cc:	cb 01       	movw	r24, r22
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	8b 83       	std	Y+3, r24	; 0x03

	u32 Counter = 0;
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	19 82       	std	Y+1, r1	; 0x01
    13d6:	18 c0       	rjmp	.+48     	; 0x1408 <TIMER0_voidSetBusyWait_OVFMode+0xa0>

	while(Counter < Number_of_OVF)
	{
		while(GET_BIT(TIFR , TIFR_TOV0) == 0);
    13d8:	e8 e5       	ldi	r30, 0x58	; 88
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	90 70       	andi	r25, 0x00	; 0
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	b9 f3       	breq	.-18     	; 0x13d8 <TIMER0_voidSetBusyWait_OVFMode+0x70>
		SET_BIT(TIFR , TIFR_TOV0);
    13ea:	a8 e5       	ldi	r26, 0x58	; 88
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e5       	ldi	r30, 0x58	; 88
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	81 60       	ori	r24, 0x01	; 1
    13f6:	8c 93       	st	X, r24
		Counter++;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_voidSetPreloadValue(6);
    1402:	86 e0       	ldi	r24, 0x06	; 6
    1404:	0e 94 36 09 	call	0x126c	; 0x126c <TIMER0_voidSetPreloadValue>
	TIMER0_voidSetPreloadValue(6);
	u32 Number_of_OVF = ((u32)(Copy_u32Time*1000)) / 250;

	u32 Counter = 0;

	while(Counter < Number_of_OVF)
    1408:	29 81       	ldd	r18, Y+1	; 0x01
    140a:	3a 81       	ldd	r19, Y+2	; 0x02
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	28 17       	cp	r18, r24
    1412:	39 07       	cpc	r19, r25
    1414:	08 f3       	brcs	.-62     	; 0x13d8 <TIMER0_voidSetBusyWait_OVFMode+0x70>
		while(GET_BIT(TIFR , TIFR_TOV0) == 0);
		SET_BIT(TIFR , TIFR_TOV0);
		Counter++;
		TIMER0_voidSetPreloadValue(6);
	}
}
    1416:	26 96       	adiw	r28, 0x06	; 6
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <TIMER0_voidSetBusyWait_OCMode>:
void TIMER0_voidSetBusyWait_OCMode(u32 Copy_u32Time)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <TIMER0_voidSetBusyWait_OCMode+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <TIMER0_voidSetBusyWait_OCMode+0x8>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <TIMER0_voidSetBusyWait_OCMode+0xa>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	9e 83       	std	Y+6, r25	; 0x06
    1438:	8d 83       	std	Y+5, r24	; 0x05
	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
    143a:	a3 e5       	ldi	r26, 0x53	; 83
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e5       	ldi	r30, 0x53	; 83
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8e 7f       	andi	r24, 0xFE	; 254
    1446:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    1448:	a3 e5       	ldi	r26, 0x53	; 83
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e3 e5       	ldi	r30, 0x53	; 83
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02);
    1456:	a3 e5       	ldi	r26, 0x53	; 83
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e3 e5       	ldi	r30, 0x53	; 83
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8b 7f       	andi	r24, 0xFB	; 251
    1462:	8c 93       	st	X, r24

	TIMER0_voidSetOCMatchValue(250);
    1464:	8a ef       	ldi	r24, 0xFA	; 250
    1466:	0e 94 44 09 	call	0x1288	; 0x1288 <TIMER0_voidSetOCMatchValue>
	/*You should cast the constants, i.e., 1000 and 250 to unsigned long (u32) and compute the multiplication operation first before the division */
	//u32 Number_of_OCFlags = ((u32)(Copy_u32Time*1000)) / 250;
	u32 Number_Of_OCF = ((u32)Copy_u32Time * 1000UL) / 250UL;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	cc 01       	movw	r24, r24
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	28 ee       	ldi	r18, 0xE8	; 232
    1476:	33 e0       	ldi	r19, 0x03	; 3
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 13 19 	call	0x3226	; 0x3226 <__mulsi3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	2a ef       	ldi	r18, 0xFA	; 250
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__udivmodsi4>
    1498:	da 01       	movw	r26, r20
    149a:	c9 01       	movw	r24, r18
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03

	u32 Local_u32Counter = 0;
    14a0:	1a 82       	std	Y+2, r1	; 0x02
    14a2:	19 82       	std	Y+1, r1	; 0x01
    14a4:	16 c0       	rjmp	.+44     	; 0x14d2 <TIMER0_voidSetBusyWait_OCMode+0xaa>

	while(Local_u32Counter <= Number_Of_OCF)
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
    14a6:	e8 e5       	ldi	r30, 0x58	; 88
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	86 95       	lsr	r24
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	90 70       	andi	r25, 0x00	; 0
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	b1 f3       	breq	.-20     	; 0x14a6 <TIMER0_voidSetBusyWait_OCMode+0x7e>
		SET_BIT(TIFR , TIFR_OCF0);
    14ba:	a8 e5       	ldi	r26, 0x58	; 88
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e8 e5       	ldi	r30, 0x58	; 88
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	82 60       	ori	r24, 0x02	; 2
    14c6:	8c 93       	st	X, r24
		Local_u32Counter++;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	//u32 Number_of_OCFlags = ((u32)(Copy_u32Time*1000)) / 250;
	u32 Number_Of_OCF = ((u32)Copy_u32Time * 1000UL) / 250UL;

	u32 Local_u32Counter = 0;

	while(Local_u32Counter <= Number_Of_OCF)
    14d2:	29 81       	ldd	r18, Y+1	; 0x01
    14d4:	3a 81       	ldd	r19, Y+2	; 0x02
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	82 17       	cp	r24, r18
    14dc:	93 07       	cpc	r25, r19
    14de:	18 f7       	brcc	.-58     	; 0x14a6 <TIMER0_voidSetBusyWait_OCMode+0x7e>
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
		SET_BIT(TIFR , TIFR_OCF0);
		Local_u32Counter++;
	}
}
    14e0:	26 96       	adiw	r28, 0x06	; 6
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <ICU_U16GetICRRegister>:
u16 ICU_U16GetICRRegister(void)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    14fa:	e6 e4       	ldi	r30, 0x46	; 70
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
}
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <ICU_VoidSetTriggerSignal>:
void ICU_VoidSetTriggerSignal( u8 Copy_u8TriggerSignal)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <ICU_VoidSetTriggerSignal+0x6>
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8TriggerSignal)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3b 83       	std	Y+3, r19	; 0x03
    151e:	2a 83       	std	Y+2, r18	; 0x02
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	9b 81       	ldd	r25, Y+3	; 0x03
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f0       	breq	.+26     	; 0x1542 <ICU_VoidSetTriggerSignal+0x3a>
    1528:	2a 81       	ldd	r18, Y+2	; 0x02
    152a:	3b 81       	ldd	r19, Y+3	; 0x03
    152c:	21 30       	cpi	r18, 0x01	; 1
    152e:	31 05       	cpc	r19, r1
    1530:	79 f4       	brne	.+30     	; 0x1550 <ICU_VoidSetTriggerSignal+0x48>
	{
	case  ICU_FALLING_EDGE :
				//SET BIT TO MAKE SENSE OF ICU IS FALLING
				CLEAR_BIT(TCCR1B,TCCR1B_ICES1);
    1532:	ae e4       	ldi	r26, 0x4E	; 78
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ee e4       	ldi	r30, 0x4E	; 78
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8f 7b       	andi	r24, 0xBF	; 191
    153e:	8c 93       	st	X, r24
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <ICU_VoidSetTriggerSignal+0x48>
		break;
		case  ICU_RISING_EDGE :
				//SET BIT TO MAKE SENSE OF ICU IS RISING
				SET_BIT(TCCR1B,TCCR1B_ICES1);
    1542:	ae e4       	ldi	r26, 0x4E	; 78
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ee e4       	ldi	r30, 0x4E	; 78
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 64       	ori	r24, 0x40	; 64
    154e:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <ICU_VoidEnableIntrrupt>:
void ICU_VoidEnableIntrrupt(u8 Copu_U8InterruptStatus)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <ICU_VoidEnableIntrrupt+0x6>
    1562:	0f 92       	push	r0
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
	switch (Copu_U8InterruptStatus)
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3b 83       	std	Y+3, r19	; 0x03
    1572:	2a 83       	std	Y+2, r18	; 0x02
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f0       	breq	.+26     	; 0x1596 <ICU_VoidEnableIntrrupt+0x3a>
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	21 30       	cpi	r18, 0x01	; 1
    1582:	31 05       	cpc	r19, r1
    1584:	79 f4       	brne	.+30     	; 0x15a4 <ICU_VoidEnableIntrrupt+0x48>
	{
	case  ICU_INTERRUPT_ENABLE :
				SET_BIT(TIMSK,TIMSK_TICIE1);
    1586:	a9 e5       	ldi	r26, 0x59	; 89
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 e5       	ldi	r30, 0x59	; 89
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 62       	ori	r24, 0x20	; 32
    1592:	8c 93       	st	X, r24
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <ICU_VoidEnableIntrrupt+0x48>
		break;
		case  ICU_INTERRUPT_DISABLE :
				CLEAR_BIT(TIMSK,TIMSK_TICIE1);
    1596:	a9 e5       	ldi	r26, 0x59	; 89
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e9 e5       	ldi	r30, 0x59	; 89
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 7d       	andi	r24, 0xDF	; 223
    15a2:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <ICU_VoidSetCallBack>:
void ICU_VoidSetCallBack(void (*notification)(void))
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <ICU_VoidSetCallBack+0x6>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
	
	ICU_NotificationFunction=notification;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	90 93 85 01 	sts	0x0185, r25
    15c6:	80 93 84 01 	sts	0x0184, r24
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <__vector_6>:
//ISR FOR ICU INTERRUPT FLAG 

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	0f 92       	push	r0
    15dc:	11 24       	eor	r1, r1
    15de:	2f 93       	push	r18
    15e0:	3f 93       	push	r19
    15e2:	4f 93       	push	r20
    15e4:	5f 93       	push	r21
    15e6:	6f 93       	push	r22
    15e8:	7f 93       	push	r23
    15ea:	8f 93       	push	r24
    15ec:	9f 93       	push	r25
    15ee:	af 93       	push	r26
    15f0:	bf 93       	push	r27
    15f2:	ef 93       	push	r30
    15f4:	ff 93       	push	r31
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	if (ICU_NotificationFunction != NULL)
    15fe:	80 91 84 01 	lds	r24, 0x0184
    1602:	90 91 85 01 	lds	r25, 0x0185
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	29 f0       	breq	.+10     	; 0x1614 <__vector_6+0x40>
	{
		ICU_NotificationFunction();
    160a:	e0 91 84 01 	lds	r30, 0x0184
    160e:	f0 91 85 01 	lds	r31, 0x0185
    1612:	09 95       	icall
	else
	{
		//do nothing
	}
	
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	ff 91       	pop	r31
    161a:	ef 91       	pop	r30
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <SPI_VoidMAsterInit>:
#include "SPI_private.h"
#include "SPI_config.h"


void SPI_VoidMAsterInit(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
       /* set as master */
    SET_BIT(SPCR,SPCR_MSTR);
    1642:	ad e2       	ldi	r26, 0x2D	; 45
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ed e2       	ldi	r30, 0x2D	; 45
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 61       	ori	r24, 0x10	; 16
    164e:	8c 93       	st	X, r24
      /*chosse MSB*/
    CLEAR_BIT(SPCR , SPCR_DORD);
    1650:	ad e2       	ldi	r26, 0x2D	; 45
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ed e2       	ldi	r30, 0x2D	; 45
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7d       	andi	r24, 0xDF	; 223
    165c:	8c 93       	st	X, r24
        /*select leading edge  as rising  egde and trailing  as falling edge */
    CLEAR_BIT(SPCR ,SPCR_CPOL);
    165e:	ad e2       	ldi	r26, 0x2D	; 45
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ed e2       	ldi	r30, 0x2D	; 45
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	87 7f       	andi	r24, 0xF7	; 247
    166a:	8c 93       	st	X, r24
        /*select clock phase at leading as sample */
        CLEAR_BIT(SPCR ,SPCR_CPHA);
    166c:	ad e2       	ldi	r26, 0x2D	; 45
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ed e2       	ldi	r30, 0x2D	; 45
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8b 7f       	andi	r24, 0xFB	; 251
    1678:	8c 93       	st	X, r24
        /* select clock frequency clk /16*/
        SET_BIT(SPCR,SPCR_SPR0);
    167a:	ad e2       	ldi	r26, 0x2D	; 45
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ed e2       	ldi	r30, 0x2D	; 45
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	8c 93       	st	X, r24
        CLEAR_BIT(SPCR , SPCR_SPR1);
    1688:	ad e2       	ldi	r26, 0x2D	; 45
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ed e2       	ldi	r30, 0x2D	; 45
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8d 7f       	andi	r24, 0xFD	; 253
    1694:	8c 93       	st	X, r24
        CLEAR_BIT(SPSR , SPSR_SPI2X);
    1696:	ae e2       	ldi	r26, 0x2E	; 46
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ee e2       	ldi	r30, 0x2E	; 46
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8e 7f       	andi	r24, 0xFE	; 254
    16a2:	8c 93       	st	X, r24

        /* ENABLE SPI */
        SET_BIT(SPCR ,SPCR_SPE);
    16a4:	ad e2       	ldi	r26, 0x2D	; 45
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ed e2       	ldi	r30, 0x2D	; 45
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	80 64       	ori	r24, 0x40	; 64
    16b0:	8c 93       	st	X, r24


}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <SPI_VoidSlaveInit>:
void SPI_VoidSlaveInit(void)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62

            /* set as master */
         CLEAR_BIT(SPCR,SPCR_MSTR);
    16c0:	ad e2       	ldi	r26, 0x2D	; 45
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ed e2       	ldi	r30, 0x2D	; 45
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 7e       	andi	r24, 0xEF	; 239
    16cc:	8c 93       	st	X, r24
            /*chosse MSB*/
         CLEAR_BIT(SPCR , SPCR_DORD);
    16ce:	ad e2       	ldi	r26, 0x2D	; 45
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ed e2       	ldi	r30, 0x2D	; 45
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	8f 7d       	andi	r24, 0xDF	; 223
    16da:	8c 93       	st	X, r24
            /*select leading edge  as rising  egde and trailing  as falling edge */
        CLEAR_BIT(SPCR ,SPCR_CPOL);
    16dc:	ad e2       	ldi	r26, 0x2D	; 45
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ed e2       	ldi	r30, 0x2D	; 45
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	87 7f       	andi	r24, 0xF7	; 247
    16e8:	8c 93       	st	X, r24
            /*select clock phase at leading as sample */
        CLEAR_BIT(SPCR ,SPCR_CPHA);
    16ea:	ad e2       	ldi	r26, 0x2D	; 45
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	ed e2       	ldi	r30, 0x2D	; 45
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8b 7f       	andi	r24, 0xFB	; 251
    16f6:	8c 93       	st	X, r24
            /* ENABLE SPI */
        SET_BIT(SPCR ,SPCR_SPE);
    16f8:	ad e2       	ldi	r26, 0x2D	; 45
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	ed e2       	ldi	r30, 0x2D	; 45
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	80 64       	ori	r24, 0x40	; 64
    1704:	8c 93       	st	X, r24

}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <SPI_u8SendReceive>:
u8 SPI_u8SendReceive(u8 Copy_Data)
{   
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
    SPDR = Copy_Data ;
    1718:	ef e2       	ldi	r30, 0x2F	; 47
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	80 83       	st	Z, r24

    while(GET_BIT(SPSR , SPSR_SPIF)==0);
    1720:	ee e2       	ldi	r30, 0x2E	; 46
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	88 23       	and	r24, r24
    1728:	dc f7       	brge	.-10     	; 0x1720 <SPI_u8SendReceive+0x14>

    SET_BIT(SPSR ,SPSR_SPIF);
    172a:	ae e2       	ldi	r26, 0x2E	; 46
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ee e2       	ldi	r30, 0x2E	; 46
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	80 68       	ori	r24, 0x80	; 128
    1736:	8c 93       	st	X, r24

    return SPDR ;
    1738:	ef e2       	ldi	r30, 0x2F	; 47
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
}
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <GIE_VoidEnabledGlobalInterrupt>:

#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_VoidEnabledGlobalInterrupt(void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG , SREG_BIT7);
    174e:	af e5       	ldi	r26, 0x5F	; 95
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	ef e5       	ldi	r30, 0x5F	; 95
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	80 68       	ori	r24, 0x80	; 128
    175a:	8c 93       	st	X, r24


}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <GIE_VoidDisabledGlobalInterrupt>:
void GIE_VoidDisabledGlobalInterrupt(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG , SREG_BIT7);
    176a:	af e5       	ldi	r26, 0x5F	; 95
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	ef e5       	ldi	r30, 0x5F	; 95
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8f 77       	andi	r24, 0x7F	; 127
    1776:	8c 93       	st	X, r24


}
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <EXTI_VoidIntit>:
static void (*EXTI_PVoidINT1NotificationFunction) (void) = NULL ;
static void (*EXTI_PVoidINT2NotificationFunction) (void) = NULL ;


void EXTI_VoidIntit( u8 Copy_U8INTNum)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <EXTI_VoidIntit+0x6>
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_U8INTNum)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3b 83       	std	Y+3, r19	; 0x03
    1794:	2a 83       	std	Y+2, r18	; 0x02
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	9b 81       	ldd	r25, Y+3	; 0x03
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	a1 f0       	breq	.+40     	; 0x17c8 <EXTI_VoidIntit+0x4a>
    17a0:	2a 81       	ldd	r18, Y+2	; 0x02
    17a2:	3b 81       	ldd	r19, Y+3	; 0x03
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	d1 f0       	breq	.+52     	; 0x17de <EXTI_VoidIntit+0x60>
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	9b 81       	ldd	r25, Y+3	; 0x03
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	01 f5       	brne	.+64     	; 0x17f2 <EXTI_VoidIntit+0x74>
    {
    case EXTI_INT0:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	62 e0       	ldi	r22, 0x02	; 2
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI0_PORT,EXTI0_PIN,HIGH);
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	62 e0       	ldi	r22, 0x02	; 2
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    17c6:	15 c0       	rjmp	.+42     	; 0x17f2 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT1:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	63 e0       	ldi	r22, 0x03	; 3
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI1_PORT,EXTI1_PIN,HIGH);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	63 e0       	ldi	r22, 0x03	; 3
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    17dc:	0a c0       	rjmp	.+20     	; 0x17f2 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT2:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI2_PORT,EXTI2_PIN,INPUT);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI2_PORT,EXTI2_PIN,HIGH);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
        break;
    
    default:
        break;
    }
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <EXTI_VoidEnable>:

void EXTI_VoidEnable(u8 Copy_U8Intnum)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <EXTI_VoidEnable+0x6>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3b 83       	std	Y+3, r19	; 0x03
    1814:	2a 83       	std	Y+2, r18	; 0x02
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	91 05       	cpc	r25, r1
    181e:	89 f0       	breq	.+34     	; 0x1842 <EXTI_VoidEnable+0x44>
    1820:	2a 81       	ldd	r18, Y+2	; 0x02
    1822:	3b 81       	ldd	r19, Y+3	; 0x03
    1824:	22 30       	cpi	r18, 0x02	; 2
    1826:	31 05       	cpc	r19, r1
    1828:	a1 f0       	breq	.+40     	; 0x1852 <EXTI_VoidEnable+0x54>
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	9b 81       	ldd	r25, Y+3	; 0x03
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	b9 f4       	brne	.+46     	; 0x1860 <EXTI_VoidEnable+0x62>
    {
    case  EXTI_INT0  :
            SET_BIT(GICR,INT0);
    1832:	ab e5       	ldi	r26, 0x5B	; 91
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e5       	ldi	r30, 0x5B	; 91
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8c 93       	st	X, r24
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT1:
            SET_BIT(GICR,INT1);
    1842:	ab e5       	ldi	r26, 0x5B	; 91
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e5       	ldi	r30, 0x5B	; 91
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	8c 93       	st	X, r24
    1850:	07 c0       	rjmp	.+14     	; 0x1860 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT2 :
            SET_BIT(GICR,INT2);
    1852:	ab e5       	ldi	r26, 0x5B	; 91
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	eb e5       	ldi	r30, 0x5B	; 91
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 62       	ori	r24, 0x20	; 32
    185e:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <EXTI_VoidDisable>:
void EXTI_VoidDisable(u8 Copy_U8Intnum)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <EXTI_VoidDisable+0x6>
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	3b 83       	std	Y+3, r19	; 0x03
    1882:	2a 83       	std	Y+2, r18	; 0x02
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	91 05       	cpc	r25, r1
    188c:	89 f0       	breq	.+34     	; 0x18b0 <EXTI_VoidDisable+0x44>
    188e:	2a 81       	ldd	r18, Y+2	; 0x02
    1890:	3b 81       	ldd	r19, Y+3	; 0x03
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	a1 f0       	breq	.+40     	; 0x18c0 <EXTI_VoidDisable+0x54>
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	9b 81       	ldd	r25, Y+3	; 0x03
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	b9 f4       	brne	.+46     	; 0x18ce <EXTI_VoidDisable+0x62>
    {
    case  EXTI_INT0:
            CLEAR_BIT(GICR,INT0);
    18a0:	ab e5       	ldi	r26, 0x5B	; 91
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	eb e5       	ldi	r30, 0x5B	; 91
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 7b       	andi	r24, 0xBF	; 191
    18ac:	8c 93       	st	X, r24
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT1:
            CLEAR_BIT(GICR,INT1);
    18b0:	ab e5       	ldi	r26, 0x5B	; 91
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	eb e5       	ldi	r30, 0x5B	; 91
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 77       	andi	r24, 0x7F	; 127
    18bc:	8c 93       	st	X, r24
    18be:	07 c0       	rjmp	.+14     	; 0x18ce <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT2:
            CLEAR_BIT(GICR,INT2);
    18c0:	ab e5       	ldi	r26, 0x5B	; 91
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e5       	ldi	r30, 0x5B	; 91
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7d       	andi	r24, 0xDF	; 223
    18cc:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <EXTI_VoidTriggerEdge>:
void EXTI_VoidTriggerEdge(u8 Copy_U8Intnum , u8 Copy_U8Edge)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	2a 97       	sbiw	r28, 0x0a	; 10
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_U8Intnum)
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	3a 87       	std	Y+10, r19	; 0x0a
    18fa:	29 87       	std	Y+9, r18	; 0x09
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	91 05       	cpc	r25, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <EXTI_VoidTriggerEdge+0x2e>
    1906:	66 c0       	rjmp	.+204    	; 0x19d4 <EXTI_VoidTriggerEdge+0xfa>
    1908:	29 85       	ldd	r18, Y+9	; 0x09
    190a:	3a 85       	ldd	r19, Y+10	; 0x0a
    190c:	22 30       	cpi	r18, 0x02	; 2
    190e:	31 05       	cpc	r19, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <EXTI_VoidTriggerEdge+0x3a>
    1912:	bb c0       	rjmp	.+374    	; 0x1a8a <EXTI_VoidTriggerEdge+0x1b0>
    1914:	89 85       	ldd	r24, Y+9	; 0x09
    1916:	9a 85       	ldd	r25, Y+10	; 0x0a
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	09 f0       	breq	.+2      	; 0x191e <EXTI_VoidTriggerEdge+0x44>
    191c:	dd c0       	rjmp	.+442    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
    {
    case  EXTI_INT0:
                switch (Copy_U8Edge)
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	38 87       	std	Y+8, r19	; 0x08
    1926:	2f 83       	std	Y+7, r18	; 0x07
    1928:	8f 81       	ldd	r24, Y+7	; 0x07
    192a:	98 85       	ldd	r25, Y+8	; 0x08
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	91 05       	cpc	r25, r1
    1930:	21 f1       	breq	.+72     	; 0x197a <EXTI_VoidTriggerEdge+0xa0>
    1932:	2f 81       	ldd	r18, Y+7	; 0x07
    1934:	38 85       	ldd	r19, Y+8	; 0x08
    1936:	22 30       	cpi	r18, 0x02	; 2
    1938:	31 05       	cpc	r19, r1
    193a:	2c f4       	brge	.+10     	; 0x1946 <EXTI_VoidTriggerEdge+0x6c>
    193c:	8f 81       	ldd	r24, Y+7	; 0x07
    193e:	98 85       	ldd	r25, Y+8	; 0x08
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	61 f0       	breq	.+24     	; 0x195c <EXTI_VoidTriggerEdge+0x82>
    1944:	c9 c0       	rjmp	.+402    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
    1946:	2f 81       	ldd	r18, Y+7	; 0x07
    1948:	38 85       	ldd	r19, Y+8	; 0x08
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	21 f1       	breq	.+72     	; 0x1998 <EXTI_VoidTriggerEdge+0xbe>
    1950:	8f 81       	ldd	r24, Y+7	; 0x07
    1952:	98 85       	ldd	r25, Y+8	; 0x08
    1954:	83 30       	cpi	r24, 0x03	; 3
    1956:	91 05       	cpc	r25, r1
    1958:	71 f1       	breq	.+92     	; 0x19b6 <EXTI_VoidTriggerEdge+0xdc>
    195a:	be c0       	rjmp	.+380    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC00);
    195c:	a5 e5       	ldi	r26, 0x55	; 85
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e5       	ldi	r30, 0x55	; 85
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8e 7f       	andi	r24, 0xFE	; 254
    1968:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    196a:	a5 e5       	ldi	r26, 0x55	; 85
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e5       	ldi	r30, 0x55	; 85
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8d 7f       	andi	r24, 0xFD	; 253
    1976:	8c 93       	st	X, r24
    1978:	af c0       	rjmp	.+350    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC00);
    197a:	a5 e5       	ldi	r26, 0x55	; 85
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e5 e5       	ldi	r30, 0x55	; 85
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	81 60       	ori	r24, 0x01	; 1
    1986:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    1988:	a5 e5       	ldi	r26, 0x55	; 85
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e5       	ldi	r30, 0x55	; 85
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8d 7f       	andi	r24, 0xFD	; 253
    1994:	8c 93       	st	X, r24
    1996:	a0 c0       	rjmp	.+320    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC00);
    1998:	a5 e5       	ldi	r26, 0x55	; 85
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e5 e5       	ldi	r30, 0x55	; 85
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8e 7f       	andi	r24, 0xFE	; 254
    19a4:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    19a6:	a5 e5       	ldi	r26, 0x55	; 85
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e5 e5       	ldi	r30, 0x55	; 85
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	82 60       	ori	r24, 0x02	; 2
    19b2:	8c 93       	st	X, r24
    19b4:	91 c0       	rjmp	.+290    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC00);
    19b6:	a5 e5       	ldi	r26, 0x55	; 85
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e5       	ldi	r30, 0x55	; 85
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	81 60       	ori	r24, 0x01	; 1
    19c2:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    19c4:	a5 e5       	ldi	r26, 0x55	; 85
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e5 e5       	ldi	r30, 0x55	; 85
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	82 60       	ori	r24, 0x02	; 2
    19d0:	8c 93       	st	X, r24
    19d2:	82 c0       	rjmp	.+260    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT1:
                switch (Copy_U8Edge)
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	3e 83       	std	Y+6, r19	; 0x06
    19dc:	2d 83       	std	Y+5, r18	; 0x05
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	91 05       	cpc	r25, r1
    19e6:	21 f1       	breq	.+72     	; 0x1a30 <EXTI_VoidTriggerEdge+0x156>
    19e8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ea:	3e 81       	ldd	r19, Y+6	; 0x06
    19ec:	22 30       	cpi	r18, 0x02	; 2
    19ee:	31 05       	cpc	r19, r1
    19f0:	2c f4       	brge	.+10     	; 0x19fc <EXTI_VoidTriggerEdge+0x122>
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	61 f0       	breq	.+24     	; 0x1a12 <EXTI_VoidTriggerEdge+0x138>
    19fa:	6e c0       	rjmp	.+220    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
    19fc:	2d 81       	ldd	r18, Y+5	; 0x05
    19fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	21 f1       	breq	.+72     	; 0x1a4e <EXTI_VoidTriggerEdge+0x174>
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	71 f1       	breq	.+92     	; 0x1a6c <EXTI_VoidTriggerEdge+0x192>
    1a10:	63 c0       	rjmp	.+198    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC10);
    1a12:	a5 e5       	ldi	r26, 0x55	; 85
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e5       	ldi	r30, 0x55	; 85
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8b 7f       	andi	r24, 0xFB	; 251
    1a1e:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    1a20:	a5 e5       	ldi	r26, 0x55	; 85
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e5       	ldi	r30, 0x55	; 85
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	87 7f       	andi	r24, 0xF7	; 247
    1a2c:	8c 93       	st	X, r24
    1a2e:	54 c0       	rjmp	.+168    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC10);
    1a30:	a5 e5       	ldi	r26, 0x55	; 85
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e5       	ldi	r30, 0x55	; 85
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	84 60       	ori	r24, 0x04	; 4
    1a3c:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    1a3e:	a5 e5       	ldi	r26, 0x55	; 85
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e5 e5       	ldi	r30, 0x55	; 85
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	87 7f       	andi	r24, 0xF7	; 247
    1a4a:	8c 93       	st	X, r24
    1a4c:	45 c0       	rjmp	.+138    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC10);
    1a4e:	a5 e5       	ldi	r26, 0x55	; 85
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e5       	ldi	r30, 0x55	; 85
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	8b 7f       	andi	r24, 0xFB	; 251
    1a5a:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    1a5c:	a5 e5       	ldi	r26, 0x55	; 85
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e5       	ldi	r30, 0x55	; 85
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	88 60       	ori	r24, 0x08	; 8
    1a68:	8c 93       	st	X, r24
    1a6a:	36 c0       	rjmp	.+108    	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC10);
    1a6c:	a5 e5       	ldi	r26, 0x55	; 85
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e5       	ldi	r30, 0x55	; 85
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	84 60       	ori	r24, 0x04	; 4
    1a78:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    1a7a:	a5 e5       	ldi	r26, 0x55	; 85
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e5 e5       	ldi	r30, 0x55	; 85
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	88 60       	ori	r24, 0x08	; 8
    1a86:	8c 93       	st	X, r24
    1a88:	27 c0       	rjmp	.+78     	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT2:
                switch (Copy_U8Edge)
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	3c 83       	std	Y+4, r19	; 0x04
    1a92:	2b 83       	std	Y+3, r18	; 0x03
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	31 f0       	breq	.+12     	; 0x1aaa <EXTI_VoidTriggerEdge+0x1d0>
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	23 30       	cpi	r18, 0x03	; 3
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <EXTI_VoidTriggerEdge+0x1e0>
    1aa8:	10 c0       	rjmp	.+32     	; 0x1aca <EXTI_VoidTriggerEdge+0x1f0>
                {
            
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCSR,ISC2);
    1aaa:	a4 e5       	ldi	r26, 0x54	; 84
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e4 e5       	ldi	r30, 0x54	; 84
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8f 7b       	andi	r24, 0xBF	; 191
    1ab6:	8c 93       	st	X, r24
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                        
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCSR,ISC2);
    1aba:	a4 e5       	ldi	r26, 0x54	; 84
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e4 e5       	ldi	r30, 0x54	; 84
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 64       	ori	r24, 0x40	; 64
    1ac6:	8c 93       	st	X, r24
    1ac8:	07 c0       	rjmp	.+14     	; 0x1ad8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                
                     default:
                            CLEAR_BIT(MCUCSR,ISC2);
    1aca:	a4 e5       	ldi	r26, 0x54	; 84
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e4 e5       	ldi	r30, 0x54	; 84
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 7b       	andi	r24, 0xBF	; 191
    1ad6:	8c 93       	st	X, r24
            break;
    
        default:
        break;
    }
}
    1ad8:	2a 96       	adiw	r28, 0x0a	; 10
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <EXTI_VoidINT0SetCallBack>:

//function to take adress of user function  for EXTI0
void EXTI_VoidINT0SetCallBack(void (*NotificationFunction) (void))
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <EXTI_VoidINT0SetCallBack+0x6>
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user 
    EXTI_PVoidINT0NotificationFunction=NotificationFunction ;
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	90 93 87 01 	sts	0x0187, r25
    1b00:	80 93 86 01 	sts	0x0186, r24
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <__vector_1>:
//TELL LINKER OPTMIZER that function change within hardware donts delete it  
void __vector_1 (void)  __attribute__ ((signal)) ; 
//function implemention that takes global pointer to function and execute it  
// we can make macro to #define EXTI0_vector    __vector_1
void __vector_1 (void)
{   
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	6f 93       	push	r22
    1b22:	7f 93       	push	r23
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    //execute function 
    EXTI_PVoidINT0NotificationFunction();
    1b38:	e0 91 86 01 	lds	r30, 0x0186
    1b3c:	f0 91 87 01 	lds	r31, 0x0187
    1b40:	09 95       	icall
}
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	ff 91       	pop	r31
    1b48:	ef 91       	pop	r30
    1b4a:	bf 91       	pop	r27
    1b4c:	af 91       	pop	r26
    1b4e:	9f 91       	pop	r25
    1b50:	8f 91       	pop	r24
    1b52:	7f 91       	pop	r23
    1b54:	6f 91       	pop	r22
    1b56:	5f 91       	pop	r21
    1b58:	4f 91       	pop	r20
    1b5a:	3f 91       	pop	r19
    1b5c:	2f 91       	pop	r18
    1b5e:	0f 90       	pop	r0
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	0f 90       	pop	r0
    1b64:	1f 90       	pop	r1
    1b66:	18 95       	reti

00001b68 <EXTI_VoidINT1SetCallBack>:

//function to take adress of user function  for EXTI1
void EXTI_VoidINT1SetCallBack(void (*NotificationFunction) (void))
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <EXTI_VoidINT1SetCallBack+0x6>
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user
    EXTI_PVoidINT1NotificationFunction=NotificationFunction ;
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	90 93 89 01 	sts	0x0189, r25
    1b7e:	80 93 88 01 	sts	0x0188, r24
}
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <__vector_2>:
//ISR for INT1
//TELL LINKER OPTMIZER that function change within hardware donts delete it
void __vector_2(void) __attribute__((signal));
//function implemention that takes global pointer to function and execute it 
void __vector_2(void)
{
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    //execute function
    EXTI_PVoidINT1NotificationFunction();
    1bb6:	e0 91 88 01 	lds	r30, 0x0188
    1bba:	f0 91 89 01 	lds	r31, 0x0189
    1bbe:	09 95       	icall
}
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	ff 91       	pop	r31
    1bc6:	ef 91       	pop	r30
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	0f 90       	pop	r0
    1be2:	1f 90       	pop	r1
    1be4:	18 95       	reti

00001be6 <EXTI_VoidINT2SetCallBack>:

void EXTI_VoidINT2SetCallBack (void (*NotificationFunction) (void))
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <EXTI_VoidINT2SetCallBack+0x6>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    EXTI_PVoidINT2NotificationFunction=NotificationFunction;
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	90 93 8b 01 	sts	0x018B, r25
    1bfc:	80 93 8a 01 	sts	0x018A, r24
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <__vector_3>:

void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void)
{
    1c0a:	1f 92       	push	r1
    1c0c:	0f 92       	push	r0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	0f 92       	push	r0
    1c12:	11 24       	eor	r1, r1
    1c14:	2f 93       	push	r18
    1c16:	3f 93       	push	r19
    1c18:	4f 93       	push	r20
    1c1a:	5f 93       	push	r21
    1c1c:	6f 93       	push	r22
    1c1e:	7f 93       	push	r23
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	af 93       	push	r26
    1c26:	bf 93       	push	r27
    1c28:	ef 93       	push	r30
    1c2a:	ff 93       	push	r31
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    EXTI_PVoidINT2NotificationFunction();
    1c34:	e0 91 8a 01 	lds	r30, 0x018A
    1c38:	f0 91 8b 01 	lds	r31, 0x018B
    1c3c:	09 95       	icall
}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <DIO_voidSetPinDirection>:
/*Self files INclusions in the same sequence  */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void 	DIO_voidSetPinDirection(u8 Copy_U8PortNmame , u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <DIO_voidSetPinDirection+0x6>
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <DIO_voidSetPinDirection+0x8>
    1c6c:	0f 92       	push	r0
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	6a 83       	std	Y+2, r22	; 0x02
    1c76:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8PortNmame)
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3d 83       	std	Y+5, r19	; 0x05
    1c80:	2c 83       	std	Y+4, r18	; 0x04
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <DIO_voidSetPinDirection+0x2a>
    1c8c:	47 c0       	rjmp	.+142    	; 0x1d1c <DIO_voidSetPinDirection+0xb8>
    1c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c90:	3d 81       	ldd	r19, Y+5	; 0x05
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <DIO_voidSetPinDirection+0x3e>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <DIO_voidSetPinDirection+0x58>
    1ca0:	cb c0       	rjmp	.+406    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
    1ca2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca6:	22 30       	cpi	r18, 0x02	; 2
    1ca8:	31 05       	cpc	r19, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <DIO_voidSetPinDirection+0x4a>
    1cac:	67 c0       	rjmp	.+206    	; 0x1d7c <DIO_voidSetPinDirection+0x118>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	83 30       	cpi	r24, 0x03	; 3
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <DIO_voidSetPinDirection+0x56>
    1cb8:	91 c0       	rjmp	.+290    	; 0x1ddc <DIO_voidSetPinDirection+0x178>
    1cba:	be c0       	rjmp	.+380    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	a1 f4       	brne	.+40     	; 0x1cea <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA , Copy_u8PinNumber);
    1cc2:	aa e3       	ldi	r26, 0x3A	; 58
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ea e3       	ldi	r30, 0x3A	; 58
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_voidSetPinDirection+0x7c>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_voidSetPinDirection+0x78>
    1ce4:	84 2b       	or	r24, r20
    1ce6:	8c 93       	st	X, r24
    1ce8:	a7 c0       	rjmp	.+334    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 23       	and	r24, r24
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <DIO_voidSetPinDirection+0x8e>
    1cf0:	a3 c0       	rjmp	.+326    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRA , Copy_u8PinNumber);
    1cf2:	aa e3       	ldi	r26, 0x3A	; 58
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	ea e3       	ldi	r30, 0x3A	; 58
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <DIO_voidSetPinDirection+0xac>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <DIO_voidSetPinDirection+0xa8>
    1d14:	80 95       	com	r24
    1d16:	84 23       	and	r24, r20
    1d18:	8c 93       	st	X, r24
    1d1a:	8e c0       	rjmp	.+284    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	a1 f4       	brne	.+40     	; 0x1d4a <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB , Copy_u8PinNumber);
    1d22:	a7 e3       	ldi	r26, 0x37	; 55
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e3       	ldi	r30, 0x37	; 55
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <DIO_voidSetPinDirection+0xdc>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <DIO_voidSetPinDirection+0xd8>
    1d44:	84 2b       	or	r24, r20
    1d46:	8c 93       	st	X, r24
    1d48:	77 c0       	rjmp	.+238    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <DIO_voidSetPinDirection+0xee>
    1d50:	73 c0       	rjmp	.+230    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRB , Copy_u8PinNumber);
    1d52:	a7 e3       	ldi	r26, 0x37	; 55
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e7 e3       	ldi	r30, 0x37	; 55
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_voidSetPinDirection+0x10c>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_voidSetPinDirection+0x108>
    1d74:	80 95       	com	r24
    1d76:	84 23       	and	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	5e c0       	rjmp	.+188    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	a1 f4       	brne	.+40     	; 0x1daa <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC , Copy_u8PinNumber);
    1d82:	a4 e3       	ldi	r26, 0x34	; 52
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e4 e3       	ldi	r30, 0x34	; 52
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <DIO_voidSetPinDirection+0x13c>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <DIO_voidSetPinDirection+0x138>
    1da4:	84 2b       	or	r24, r20
    1da6:	8c 93       	st	X, r24
    1da8:	47 c0       	rjmp	.+142    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	88 23       	and	r24, r24
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <DIO_voidSetPinDirection+0x14e>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRC , Copy_u8PinNumber);
    1db2:	a4 e3       	ldi	r26, 0x34	; 52
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e4 e3       	ldi	r30, 0x34	; 52
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_voidSetPinDirection+0x16c>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_voidSetPinDirection+0x168>
    1dd4:	80 95       	com	r24
    1dd6:	84 23       	and	r24, r20
    1dd8:	8c 93       	st	X, r24
    1dda:	2e c0       	rjmp	.+92     	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	a1 f4       	brne	.+40     	; 0x1e0a <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD , Copy_u8PinNumber);
    1de2:	a1 e3       	ldi	r26, 0x31	; 49
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e1 e3       	ldi	r30, 0x31	; 49
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_voidSetPinDirection+0x19c>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_voidSetPinDirection+0x198>
    1e04:	84 2b       	or	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	17 c0       	rjmp	.+46     	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	88 23       	and	r24, r24
    1e0e:	a1 f4       	brne	.+40     	; 0x1e38 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRD , Copy_u8PinNumber);
    1e10:	a1 e3       	ldi	r26, 0x31	; 49
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e1 e3       	ldi	r30, 0x31	; 49
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_voidSetPinDirection+0x1ca>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <DIO_voidSetPinDirection+0x1c6>
    1e32:	80 95       	com	r24
    1e34:	84 23       	and	r24, r20
    1e36:	8c 93       	st	X, r24
	
	default:
			//do no thing 
		break;
	}
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_U8PinState)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	2d 97       	sbiw	r28, 0x0d	; 13
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	6a 83       	std	Y+2, r22	; 0x02
    1e60:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8PortNumber)
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	3d 87       	std	Y+13, r19	; 0x0d
    1e6a:	2c 87       	std	Y+12, r18	; 0x0c
    1e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	91 05       	cpc	r25, r1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <DIO_VoidSetPinValue+0x30>
    1e76:	4f c0       	rjmp	.+158    	; 0x1f16 <DIO_VoidSetPinValue+0xce>
    1e78:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e7a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <DIO_VoidSetPinValue+0x44>
    1e82:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e84:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	71 f0       	breq	.+28     	; 0x1ea6 <DIO_VoidSetPinValue+0x5e>
    1e8a:	ec c0       	rjmp	.+472    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
    1e8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e8e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e90:	22 30       	cpi	r18, 0x02	; 2
    1e92:	31 05       	cpc	r19, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <DIO_VoidSetPinValue+0x50>
    1e96:	77 c0       	rjmp	.+238    	; 0x1f86 <DIO_VoidSetPinValue+0x13e>
    1e98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <DIO_VoidSetPinValue+0x5c>
    1ea2:	a9 c0       	rjmp	.+338    	; 0x1ff6 <DIO_VoidSetPinValue+0x1ae>
    1ea4:	df c0       	rjmp	.+446    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
	{
		case DIO_PORTA :
			switch(Copy_U8PinState)
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	3b 87       	std	Y+11, r19	; 0x0b
    1eae:	2a 87       	std	Y+10, r18	; 0x0a
    1eb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	31 f0       	breq	.+12     	; 0x1ec4 <DIO_VoidSetPinValue+0x7c>
    1eb8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1eba:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ebc:	21 30       	cpi	r18, 0x01	; 1
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	b1 f0       	breq	.+44     	; 0x1eee <DIO_VoidSetPinValue+0xa6>
    1ec2:	d0 c0       	rjmp	.+416    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTA , Copy_u8PinNumber );
    1ec4:	ab e3       	ldi	r26, 0x3B	; 59
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	eb e3       	ldi	r30, 0x3B	; 59
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_VoidSetPinValue+0x9a>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_VoidSetPinValue+0x96>
    1ee6:	80 95       	com	r24
    1ee8:	84 23       	and	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	bb c0       	rjmp	.+374    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTA , Copy_u8PinNumber );
    1eee:	ab e3       	ldi	r26, 0x3B	; 59
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	eb e3       	ldi	r30, 0x3B	; 59
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <DIO_VoidSetPinValue+0xc4>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <DIO_VoidSetPinValue+0xc0>
    1f10:	84 2b       	or	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	a7 c0       	rjmp	.+334    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTB :
			switch(Copy_U8PinState)
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	39 87       	std	Y+9, r19	; 0x09
    1f1e:	28 87       	std	Y+8, r18	; 0x08
    1f20:	88 85       	ldd	r24, Y+8	; 0x08
    1f22:	99 85       	ldd	r25, Y+9	; 0x09
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	31 f0       	breq	.+12     	; 0x1f34 <DIO_VoidSetPinValue+0xec>
    1f28:	28 85       	ldd	r18, Y+8	; 0x08
    1f2a:	39 85       	ldd	r19, Y+9	; 0x09
    1f2c:	21 30       	cpi	r18, 0x01	; 1
    1f2e:	31 05       	cpc	r19, r1
    1f30:	b1 f0       	breq	.+44     	; 0x1f5e <DIO_VoidSetPinValue+0x116>
    1f32:	98 c0       	rjmp	.+304    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTB , Copy_u8PinNumber );
    1f34:	a8 e3       	ldi	r26, 0x38	; 56
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e8 e3       	ldi	r30, 0x38	; 56
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <DIO_VoidSetPinValue+0x10a>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <DIO_VoidSetPinValue+0x106>
    1f56:	80 95       	com	r24
    1f58:	84 23       	and	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	83 c0       	rjmp	.+262    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTB , Copy_u8PinNumber );
    1f5e:	a8 e3       	ldi	r26, 0x38	; 56
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e8 e3       	ldi	r30, 0x38	; 56
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_VoidSetPinValue+0x134>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_VoidSetPinValue+0x130>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	6f c0       	rjmp	.+222    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTC :
			switch(Copy_U8PinState)
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	3f 83       	std	Y+7, r19	; 0x07
    1f8e:	2e 83       	std	Y+6, r18	; 0x06
    1f90:	8e 81       	ldd	r24, Y+6	; 0x06
    1f92:	9f 81       	ldd	r25, Y+7	; 0x07
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	31 f0       	breq	.+12     	; 0x1fa4 <DIO_VoidSetPinValue+0x15c>
    1f98:	2e 81       	ldd	r18, Y+6	; 0x06
    1f9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f9c:	21 30       	cpi	r18, 0x01	; 1
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	b1 f0       	breq	.+44     	; 0x1fce <DIO_VoidSetPinValue+0x186>
    1fa2:	60 c0       	rjmp	.+192    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTC , Copy_u8PinNumber );
    1fa4:	a5 e3       	ldi	r26, 0x35	; 53
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e5 e3       	ldi	r30, 0x35	; 53
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <DIO_VoidSetPinValue+0x17a>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <DIO_VoidSetPinValue+0x176>
    1fc6:	80 95       	com	r24
    1fc8:	84 23       	and	r24, r20
    1fca:	8c 93       	st	X, r24
    1fcc:	4b c0       	rjmp	.+150    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTC , Copy_u8PinNumber );
    1fce:	a5 e3       	ldi	r26, 0x35	; 53
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e5 e3       	ldi	r30, 0x35	; 53
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	48 2f       	mov	r20, r24
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	02 2e       	mov	r0, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <DIO_VoidSetPinValue+0x1a4>
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	0a 94       	dec	r0
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <DIO_VoidSetPinValue+0x1a0>
    1ff0:	84 2b       	or	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	37 c0       	rjmp	.+110    	; 0x2064 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTD :
			switch(Copy_U8PinState)
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	3d 83       	std	Y+5, r19	; 0x05
    1ffe:	2c 83       	std	Y+4, r18	; 0x04
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	31 f0       	breq	.+12     	; 0x2014 <DIO_VoidSetPinValue+0x1cc>
    2008:	2c 81       	ldd	r18, Y+4	; 0x04
    200a:	3d 81       	ldd	r19, Y+5	; 0x05
    200c:	21 30       	cpi	r18, 0x01	; 1
    200e:	31 05       	cpc	r19, r1
    2010:	b1 f0       	breq	.+44     	; 0x203e <DIO_VoidSetPinValue+0x1f6>
    2012:	28 c0       	rjmp	.+80     	; 0x2064 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTD , Copy_u8PinNumber );
    2014:	a2 e3       	ldi	r26, 0x32	; 50
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e2 e3       	ldi	r30, 0x32	; 50
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <DIO_VoidSetPinValue+0x1ea>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <DIO_VoidSetPinValue+0x1e6>
    2036:	80 95       	com	r24
    2038:	84 23       	and	r24, r20
    203a:	8c 93       	st	X, r24
    203c:	13 c0       	rjmp	.+38     	; 0x2064 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTD , Copy_u8PinNumber );
    203e:	a2 e3       	ldi	r26, 0x32	; 50
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e2 e3       	ldi	r30, 0x32	; 50
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	48 2f       	mov	r20, r24
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	02 2e       	mov	r0, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <DIO_VoidSetPinValue+0x214>
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <DIO_VoidSetPinValue+0x210>
    2060:	84 2b       	or	r24, r20
    2062:	8c 93       	st	X, r24
	
	default:
			// Do nothing 
		break;
	}
}
    2064:	2d 96       	adiw	r28, 0x0d	; 13
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <DIO_VoidGetPinValue>:

u8  DIO_VoidGetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <DIO_VoidGetPinValue+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <DIO_VoidGetPinValue+0x8>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue =0 ;
    2088:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PortName)
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	3d 83       	std	Y+5, r19	; 0x05
    2092:	2c 83       	std	Y+4, r18	; 0x04
    2094:	4c 81       	ldd	r20, Y+4	; 0x04
    2096:	5d 81       	ldd	r21, Y+5	; 0x05
    2098:	41 30       	cpi	r20, 0x01	; 1
    209a:	51 05       	cpc	r21, r1
    209c:	41 f1       	breq	.+80     	; 0x20ee <DIO_VoidGetPinValue+0x78>
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	82 30       	cpi	r24, 0x02	; 2
    20a4:	91 05       	cpc	r25, r1
    20a6:	34 f4       	brge	.+12     	; 0x20b4 <DIO_VoidGetPinValue+0x3e>
    20a8:	2c 81       	ldd	r18, Y+4	; 0x04
    20aa:	3d 81       	ldd	r19, Y+5	; 0x05
    20ac:	21 15       	cp	r18, r1
    20ae:	31 05       	cpc	r19, r1
    20b0:	61 f0       	breq	.+24     	; 0x20ca <DIO_VoidGetPinValue+0x54>
    20b2:	52 c0       	rjmp	.+164    	; 0x2158 <DIO_VoidGetPinValue+0xe2>
    20b4:	4c 81       	ldd	r20, Y+4	; 0x04
    20b6:	5d 81       	ldd	r21, Y+5	; 0x05
    20b8:	42 30       	cpi	r20, 0x02	; 2
    20ba:	51 05       	cpc	r21, r1
    20bc:	51 f1       	breq	.+84     	; 0x2112 <DIO_VoidGetPinValue+0x9c>
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	91 05       	cpc	r25, r1
    20c6:	b9 f1       	breq	.+110    	; 0x2136 <DIO_VoidGetPinValue+0xc0>
    20c8:	47 c0       	rjmp	.+142    	; 0x2158 <DIO_VoidGetPinValue+0xe2>
	{
		case DIO_PORTA :
			Local_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    20ca:	eb e3       	ldi	r30, 0x3B	; 59
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a9 01       	movw	r20, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <DIO_VoidGetPinValue+0x6c>
    20de:	55 95       	asr	r21
    20e0:	47 95       	ror	r20
    20e2:	8a 95       	dec	r24
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <DIO_VoidGetPinValue+0x68>
    20e6:	ca 01       	movw	r24, r20
    20e8:	81 70       	andi	r24, 0x01	; 1
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	35 c0       	rjmp	.+106    	; 0x2158 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTB :
			Local_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    20ee:	e8 e3       	ldi	r30, 0x38	; 56
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a9 01       	movw	r20, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <DIO_VoidGetPinValue+0x90>
    2102:	55 95       	asr	r21
    2104:	47 95       	ror	r20
    2106:	8a 95       	dec	r24
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <DIO_VoidGetPinValue+0x8c>
    210a:	ca 01       	movw	r24, r20
    210c:	81 70       	andi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	23 c0       	rjmp	.+70     	; 0x2158 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTC :
			Local_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    2112:	e5 e3       	ldi	r30, 0x35	; 53
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a9 01       	movw	r20, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <DIO_VoidGetPinValue+0xb4>
    2126:	55 95       	asr	r21
    2128:	47 95       	ror	r20
    212a:	8a 95       	dec	r24
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <DIO_VoidGetPinValue+0xb0>
    212e:	ca 01       	movw	r24, r20
    2130:	81 70       	andi	r24, 0x01	; 1
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	11 c0       	rjmp	.+34     	; 0x2158 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTD :
			Local_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    2136:	e2 e3       	ldi	r30, 0x32	; 50
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a9 01       	movw	r20, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <DIO_VoidGetPinValue+0xd8>
    214a:	55 95       	asr	r21
    214c:	47 95       	ror	r20
    214e:	8a 95       	dec	r24
    2150:	e2 f7       	brpl	.-8      	; 0x214a <DIO_VoidGetPinValue+0xd4>
    2152:	ca 01       	movw	r24, r20
    2154:	81 70       	andi	r24, 0x01	; 1
    2156:	89 83       	std	Y+1, r24	; 0x01
	
		default:
				//Do nothing
			break;
	}
	return Local_u8PinValue;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_U8PortName , u8  Copy_U8PortState)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <DIO_VoidSetPortDirection+0x6>
    2170:	00 d0       	rcall	.+0      	; 0x2172 <DIO_VoidSetPortDirection+0x8>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	3c 83       	std	Y+4, r19	; 0x04
    2182:	2b 83       	std	Y+3, r18	; 0x03
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	9c 81       	ldd	r25, Y+4	; 0x04
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	91 05       	cpc	r25, r1
    218c:	21 f1       	breq	.+72     	; 0x21d6 <DIO_VoidSetPortDirection+0x6c>
    218e:	2b 81       	ldd	r18, Y+3	; 0x03
    2190:	3c 81       	ldd	r19, Y+4	; 0x04
    2192:	22 30       	cpi	r18, 0x02	; 2
    2194:	31 05       	cpc	r19, r1
    2196:	2c f4       	brge	.+10     	; 0x21a2 <DIO_VoidSetPortDirection+0x38>
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	61 f0       	breq	.+24     	; 0x21b8 <DIO_VoidSetPortDirection+0x4e>
    21a0:	46 c0       	rjmp	.+140    	; 0x222e <DIO_VoidSetPortDirection+0xc4>
    21a2:	2b 81       	ldd	r18, Y+3	; 0x03
    21a4:	3c 81       	ldd	r19, Y+4	; 0x04
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	31 05       	cpc	r19, r1
    21aa:	21 f1       	breq	.+72     	; 0x21f4 <DIO_VoidSetPortDirection+0x8a>
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	9c 81       	ldd	r25, Y+4	; 0x04
    21b0:	83 30       	cpi	r24, 0x03	; 3
    21b2:	91 05       	cpc	r25, r1
    21b4:	71 f1       	breq	.+92     	; 0x2212 <DIO_VoidSetPortDirection+0xa8>
    21b6:	3b c0       	rjmp	.+118    	; 0x222e <DIO_VoidSetPortDirection+0xc4>
	{
		case DIO_PORTA :
			if(Copy_U8PortState==OUTPUT)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	29 f4       	brne	.+10     	; 0x21c8 <DIO_VoidSetPortDirection+0x5e>
			{
				SET_REG(DDRA);
    21be:	ea e3       	ldi	r30, 0x3A	; 58
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	80 83       	st	Z, r24
    21c6:	33 c0       	rjmp	.+102    	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	88 23       	and	r24, r24
    21cc:	81 f5       	brne	.+96     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRA);
    21ce:	ea e3       	ldi	r30, 0x3A	; 58
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	10 82       	st	Z, r1
    21d4:	2c c0       	rjmp	.+88     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTB :
			if(Copy_U8PortState==OUTPUT)
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	29 f4       	brne	.+10     	; 0x21e6 <DIO_VoidSetPortDirection+0x7c>
			{
				SET_REG(DDRB);
    21dc:	e7 e3       	ldi	r30, 0x37	; 55
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	80 83       	st	Z, r24
    21e4:	24 c0       	rjmp	.+72     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	88 23       	and	r24, r24
    21ea:	09 f5       	brne	.+66     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRB);
    21ec:	e7 e3       	ldi	r30, 0x37	; 55
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	10 82       	st	Z, r1
    21f2:	1d c0       	rjmp	.+58     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTC :
			if(Copy_U8PortState==OUTPUT)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	81 30       	cpi	r24, 0x01	; 1
    21f8:	29 f4       	brne	.+10     	; 0x2204 <DIO_VoidSetPortDirection+0x9a>
			{
				SET_REG(DDRC);
    21fa:	e4 e3       	ldi	r30, 0x34	; 52
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	80 83       	st	Z, r24
    2202:	15 c0       	rjmp	.+42     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	88 23       	and	r24, r24
    2208:	91 f4       	brne	.+36     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRC);
    220a:	e4 e3       	ldi	r30, 0x34	; 52
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	10 82       	st	Z, r1
    2210:	0e c0       	rjmp	.+28     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTD :
			if(Copy_U8PortState==OUTPUT)
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	29 f4       	brne	.+10     	; 0x2222 <DIO_VoidSetPortDirection+0xb8>
			{
				SET_REG(DDRD);
    2218:	e1 e3       	ldi	r30, 0x31	; 49
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	80 83       	st	Z, r24
    2220:	06 c0       	rjmp	.+12     	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	88 23       	and	r24, r24
    2226:	19 f4       	brne	.+6      	; 0x222e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRD);
    2228:	e1 e3       	ldi	r30, 0x31	; 49
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	10 82       	st	Z, r1
		default:
			//do no thing
			break;

	}
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <DIO_VOidTogglePortValue>:
void DIO_VOidTogglePortValue(u8 Copy_U8PortName)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <DIO_VOidTogglePortValue+0x6>
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	3b 83       	std	Y+3, r19	; 0x03
    2252:	2a 83       	std	Y+2, r18	; 0x02
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	91 05       	cpc	r25, r1
    225c:	e9 f0       	breq	.+58     	; 0x2298 <DIO_VOidTogglePortValue+0x5c>
    225e:	2a 81       	ldd	r18, Y+2	; 0x02
    2260:	3b 81       	ldd	r19, Y+3	; 0x03
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 05       	cpc	r19, r1
    2266:	2c f4       	brge	.+10     	; 0x2272 <DIO_VOidTogglePortValue+0x36>
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	61 f0       	breq	.+24     	; 0x2288 <DIO_VOidTogglePortValue+0x4c>
    2270:	2a c0       	rjmp	.+84     	; 0x22c6 <DIO_VOidTogglePortValue+0x8a>
    2272:	2a 81       	ldd	r18, Y+2	; 0x02
    2274:	3b 81       	ldd	r19, Y+3	; 0x03
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	b1 f0       	breq	.+44     	; 0x22a8 <DIO_VOidTogglePortValue+0x6c>
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	83 30       	cpi	r24, 0x03	; 3
    2282:	91 05       	cpc	r25, r1
    2284:	c9 f0       	breq	.+50     	; 0x22b8 <DIO_VOidTogglePortValue+0x7c>
    2286:	1f c0       	rjmp	.+62     	; 0x22c6 <DIO_VOidTogglePortValue+0x8a>
	{
		case DIO_PORTA :
			TOGGLE_REG(PORTA);
    2288:	ab e3       	ldi	r26, 0x3B	; 59
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	eb e3       	ldi	r30, 0x3B	; 59
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	80 95       	com	r24
    2294:	8c 93       	st	X, r24
    2296:	17 c0       	rjmp	.+46     	; 0x22c6 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTB :
			TOGGLE_REG(PORTB);
    2298:	a8 e3       	ldi	r26, 0x38	; 56
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e8 e3       	ldi	r30, 0x38	; 56
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 95       	com	r24
    22a4:	8c 93       	st	X, r24
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTC :
			TOGGLE_REG(PORTC);
    22a8:	a5 e3       	ldi	r26, 0x35	; 53
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e5 e3       	ldi	r30, 0x35	; 53
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 95       	com	r24
    22b4:	8c 93       	st	X, r24
    22b6:	07 c0       	rjmp	.+14     	; 0x22c6 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTD :
			TOGGLE_REG(PORTD);
    22b8:	a2 e3       	ldi	r26, 0x32	; 50
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e2 e3       	ldi	r30, 0x32	; 50
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	80 95       	com	r24
    22c4:	8c 93       	st	X, r24
			//do no thing
			break;

	}

}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <DIO_VoidSetSpacificvalue>:
void DIO_VoidSetSpacificvalue(u8 Copy_U8PortName , u8 Copy_U8Value)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <DIO_VoidSetSpacificvalue+0x6>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <DIO_VoidSetSpacificvalue+0x8>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	3c 83       	std	Y+4, r19	; 0x04
    22ea:	2b 83       	std	Y+3, r18	; 0x03
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	91 05       	cpc	r25, r1
    22f4:	d1 f0       	breq	.+52     	; 0x232a <DIO_VoidSetSpacificvalue+0x58>
    22f6:	2b 81       	ldd	r18, Y+3	; 0x03
    22f8:	3c 81       	ldd	r19, Y+4	; 0x04
    22fa:	22 30       	cpi	r18, 0x02	; 2
    22fc:	31 05       	cpc	r19, r1
    22fe:	2c f4       	brge	.+10     	; 0x230a <DIO_VoidSetSpacificvalue+0x38>
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	61 f0       	breq	.+24     	; 0x2320 <DIO_VoidSetSpacificvalue+0x4e>
    2308:	1e c0       	rjmp	.+60     	; 0x2346 <DIO_VoidSetSpacificvalue+0x74>
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	22 30       	cpi	r18, 0x02	; 2
    2310:	31 05       	cpc	r19, r1
    2312:	81 f0       	breq	.+32     	; 0x2334 <DIO_VoidSetSpacificvalue+0x62>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	83 30       	cpi	r24, 0x03	; 3
    231a:	91 05       	cpc	r25, r1
    231c:	81 f0       	breq	.+32     	; 0x233e <DIO_VoidSetSpacificvalue+0x6c>
    231e:	13 c0       	rjmp	.+38     	; 0x2346 <DIO_VoidSetSpacificvalue+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(PORTA,Copy_U8Value);
    2320:	eb e3       	ldi	r30, 0x3B	; 59
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	80 83       	st	Z, r24
    2328:	0e c0       	rjmp	.+28     	; 0x2346 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(PORTB,Copy_U8Value);
    232a:	e8 e3       	ldi	r30, 0x38	; 56
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	80 83       	st	Z, r24
    2332:	09 c0       	rjmp	.+18     	; 0x2346 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(PORTC,Copy_U8Value);
    2334:	e5 e3       	ldi	r30, 0x35	; 53
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	80 83       	st	Z, r24
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(PORTD,Copy_U8Value);
    233e:	e2 e3       	ldi	r30, 0x32	; 50
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <DIO_U8GetPortValue>:
u8 DIO_U8GetPortValue(u8 Copy_U8PortName )
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <DIO_U8GetPortValue+0x6>
    235a:	00 d0       	rcall	.+0      	; 0x235c <DIO_U8GetPortValue+0x8>
    235c:	0f 92       	push	r0
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	3c 83       	std	Y+4, r19	; 0x04
    236c:	2b 83       	std	Y+3, r18	; 0x03
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	91 05       	cpc	r25, r1
    2376:	d1 f0       	breq	.+52     	; 0x23ac <DIO_U8GetPortValue+0x58>
    2378:	2b 81       	ldd	r18, Y+3	; 0x03
    237a:	3c 81       	ldd	r19, Y+4	; 0x04
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	2c f4       	brge	.+10     	; 0x238c <DIO_U8GetPortValue+0x38>
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	61 f0       	breq	.+24     	; 0x23a2 <DIO_U8GetPortValue+0x4e>
    238a:	1f c0       	rjmp	.+62     	; 0x23ca <DIO_U8GetPortValue+0x76>
    238c:	2b 81       	ldd	r18, Y+3	; 0x03
    238e:	3c 81       	ldd	r19, Y+4	; 0x04
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	81 f0       	breq	.+32     	; 0x23b6 <DIO_U8GetPortValue+0x62>
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	91 05       	cpc	r25, r1
    239e:	81 f0       	breq	.+32     	; 0x23c0 <DIO_U8GetPortValue+0x6c>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <DIO_U8GetPortValue+0x76>
	{
		case DIO_PORTA :
			return PINA;
    23a2:	e9 e3       	ldi	r30, 0x39	; 57
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	90 81       	ld	r25, Z
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	10 c0       	rjmp	.+32     	; 0x23cc <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTB :
			return PINB ;
    23ac:	e6 e3       	ldi	r30, 0x36	; 54
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	20 81       	ld	r18, Z
    23b2:	2a 83       	std	Y+2, r18	; 0x02
    23b4:	0b c0       	rjmp	.+22     	; 0x23cc <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTC :
			return PINC;
    23b6:	e3 e3       	ldi	r30, 0x33	; 51
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	30 81       	ld	r19, Z
    23bc:	3a 83       	std	Y+2, r19	; 0x02
    23be:	06 c0       	rjmp	.+12     	; 0x23cc <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTD :
			return PIND;
    23c0:	e0 e3       	ldi	r30, 0x30	; 48
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <DIO_U8GetPortValue+0x78>
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <DIO_U8GetPortValue+0x7c>
			//do no thing
			break;

	}

}
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	9d 83       	std	Y+5, r25	; 0x05
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <DIO_VoidSetPortSpecificDirection>:
void DIO_VoidSetPortSpecificDirection(u8 Copy_U8PortName, u8 Copy_U8SpectificDirection)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <DIO_VoidSetPortSpecificDirection+0x6>
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <DIO_VoidSetPortSpecificDirection+0x8>
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	3c 83       	std	Y+4, r19	; 0x04
    23fa:	2b 83       	std	Y+3, r18	; 0x03
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	91 05       	cpc	r25, r1
    2404:	d1 f0       	breq	.+52     	; 0x243a <DIO_VoidSetPortSpecificDirection+0x58>
    2406:	2b 81       	ldd	r18, Y+3	; 0x03
    2408:	3c 81       	ldd	r19, Y+4	; 0x04
    240a:	22 30       	cpi	r18, 0x02	; 2
    240c:	31 05       	cpc	r19, r1
    240e:	2c f4       	brge	.+10     	; 0x241a <DIO_VoidSetPortSpecificDirection+0x38>
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	61 f0       	breq	.+24     	; 0x2430 <DIO_VoidSetPortSpecificDirection+0x4e>
    2418:	1e c0       	rjmp	.+60     	; 0x2456 <DIO_VoidSetPortSpecificDirection+0x74>
    241a:	2b 81       	ldd	r18, Y+3	; 0x03
    241c:	3c 81       	ldd	r19, Y+4	; 0x04
    241e:	22 30       	cpi	r18, 0x02	; 2
    2420:	31 05       	cpc	r19, r1
    2422:	81 f0       	breq	.+32     	; 0x2444 <DIO_VoidSetPortSpecificDirection+0x62>
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	83 30       	cpi	r24, 0x03	; 3
    242a:	91 05       	cpc	r25, r1
    242c:	81 f0       	breq	.+32     	; 0x244e <DIO_VoidSetPortSpecificDirection+0x6c>
    242e:	13 c0       	rjmp	.+38     	; 0x2456 <DIO_VoidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(DDRA,Copy_U8SpectificDirection);
    2430:	ea e3       	ldi	r30, 0x3A	; 58
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	80 83       	st	Z, r24
    2438:	0e c0       	rjmp	.+28     	; 0x2456 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(DDRB,Copy_U8SpectificDirection);
    243a:	e7 e3       	ldi	r30, 0x37	; 55
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	80 83       	st	Z, r24
    2442:	09 c0       	rjmp	.+18     	; 0x2456 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(DDRC,Copy_U8SpectificDirection);
    2444:	e4 e3       	ldi	r30, 0x34	; 52
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	80 83       	st	Z, r24
    244c:	04 c0       	rjmp	.+8      	; 0x2456 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(DDRD,Copy_U8SpectificDirection);
    244e:	e1 e3       	ldi	r30, 0x31	; 49
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <DIO_VoidTogglePinValu>:
void DIO_VoidTogglePinValu(u8 Copy_U8PortName ,u8 Copy_u8PinNumber ) 
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <DIO_VoidTogglePinValu+0x6>
    246a:	00 d0       	rcall	.+0      	; 0x246c <DIO_VoidTogglePinValu+0x8>
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8PortName)
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	3c 83       	std	Y+4, r19	; 0x04
    247c:	2b 83       	std	Y+3, r18	; 0x03
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	91 05       	cpc	r25, r1
    2486:	49 f1       	breq	.+82     	; 0x24da <DIO_VoidTogglePinValu+0x76>
    2488:	2b 81       	ldd	r18, Y+3	; 0x03
    248a:	3c 81       	ldd	r19, Y+4	; 0x04
    248c:	22 30       	cpi	r18, 0x02	; 2
    248e:	31 05       	cpc	r19, r1
    2490:	2c f4       	brge	.+10     	; 0x249c <DIO_VoidTogglePinValu+0x38>
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	61 f0       	breq	.+24     	; 0x24b2 <DIO_VoidTogglePinValu+0x4e>
    249a:	5a c0       	rjmp	.+180    	; 0x2550 <DIO_VoidTogglePinValu+0xec>
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	22 30       	cpi	r18, 0x02	; 2
    24a2:	31 05       	cpc	r19, r1
    24a4:	71 f1       	breq	.+92     	; 0x2502 <DIO_VoidTogglePinValu+0x9e>
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	83 30       	cpi	r24, 0x03	; 3
    24ac:	91 05       	cpc	r25, r1
    24ae:	e9 f1       	breq	.+122    	; 0x252a <DIO_VoidTogglePinValu+0xc6>
    24b0:	4f c0       	rjmp	.+158    	; 0x2550 <DIO_VoidTogglePinValu+0xec>
	{
	case DIO_PORTA:
			TOGGLE_BIT(PORTA ,Copy_u8PinNumber);
    24b2:	ab e3       	ldi	r26, 0x3B	; 59
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	eb e3       	ldi	r30, 0x3B	; 59
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <DIO_VoidTogglePinValu+0x6c>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <DIO_VoidTogglePinValu+0x68>
    24d4:	84 27       	eor	r24, r20
    24d6:	8c 93       	st	X, r24
    24d8:	3b c0       	rjmp	.+118    	; 0x2550 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB ,Copy_u8PinNumber);
    24da:	a8 e3       	ldi	r26, 0x38	; 56
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e8 e3       	ldi	r30, 0x38	; 56
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <DIO_VoidTogglePinValu+0x94>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <DIO_VoidTogglePinValu+0x90>
    24fc:	84 27       	eor	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	27 c0       	rjmp	.+78     	; 0x2550 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC ,Copy_u8PinNumber);
    2502:	a5 e3       	ldi	r26, 0x35	; 53
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e5 e3       	ldi	r30, 0x35	; 53
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	48 2f       	mov	r20, r24
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <DIO_VoidTogglePinValu+0xbc>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <DIO_VoidTogglePinValu+0xb8>
    2524:	84 27       	eor	r24, r20
    2526:	8c 93       	st	X, r24
    2528:	13 c0       	rjmp	.+38     	; 0x2550 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD ,Copy_u8PinNumber);
    252a:	a2 e3       	ldi	r26, 0x32	; 50
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e2 e3       	ldi	r30, 0x32	; 50
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	48 2f       	mov	r20, r24
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	02 2e       	mov	r0, r18
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <DIO_VoidTogglePinValu+0xe4>
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	0a 94       	dec	r0
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <DIO_VoidTogglePinValu+0xe0>
    254c:	84 27       	eor	r24, r20
    254e:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <ADC_VoidInit>:

static void (*ADC_pvoidNotificationFunction)(void) = NULL;
volatile   u16  ADC_Digital_Value ;

void ADC_VoidInit(void)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    // ADC ENABLE BIT 
    #if ADC_ENABLE == ENABLE
        SET_BIT(ADCSRA,ADEN);
    2566:	a6 e2       	ldi	r26, 0x26	; 38
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e6 e2       	ldi	r30, 0x26	; 38
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	80 68       	ori	r24, 0x80	; 128
    2572:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ENABLE Configuration Error"
    #endif
    //ADC ENABLE FLAG 
    #if ADC_INTERRUPT_STATUS  ==  ENABLE
        SET_BIT(ADCSRA,ADIE);
    2574:	a6 e2       	ldi	r26, 0x26	; 38
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e6 e2       	ldi	r30, 0x26	; 38
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	88 60       	ori	r24, 0x08	; 8
    2580:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_INTERRUPT_ENABLE Configuration Error"
    #endif
    //
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        SET_BIT(ADMUX,ADLAR);
    2582:	a7 e2       	ldi	r26, 0x27	; 39
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e7 e2       	ldi	r30, 0x27	; 39
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	80 62       	ori	r24, 0x20	; 32
    258e:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ADJUST Configuration Error"
    #endif


    ADMUX &= REFERENCE_SELECTION_MASK ;
    2590:	a7 e2       	ldi	r26, 0x27	; 39
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e7 e2       	ldi	r30, 0x27	; 39
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8f 73       	andi	r24, 0x3F	; 63
    259c:	8c 93       	st	X, r24
    ADMUX |= Reference_Selection ;
    259e:	a7 e2       	ldi	r26, 0x27	; 39
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e7 e2       	ldi	r30, 0x27	; 39
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	8c 93       	st	X, r24

    ADCSRA &= PRESCALER_SELECTION_MASK ;
    25aa:	a6 e2       	ldi	r26, 0x26	; 38
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e6 e2       	ldi	r30, 0x26	; 38
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	88 7f       	andi	r24, 0xF8	; 248
    25b6:	8c 93       	st	X, r24
    ADCSRA |=  PRESCALER_SELECTION ;
    25b8:	a6 e2       	ldi	r26, 0x26	; 38
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e6 e2       	ldi	r30, 0x26	; 38
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	82 60       	ori	r24, 0x02	; 2
    25c4:	8c 93       	st	X, r24

}
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <ADC_VoidInterruptControl>:
 void ADC_VoidInterruptControl(u8 Copy_InterruptStatus)
 {
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <ADC_VoidInterruptControl+0x6>
    25d2:	0f 92       	push	r0
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_InterruptStatus)
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	3b 83       	std	Y+3, r19	; 0x03
    25e2:	2a 83       	std	Y+2, r18	; 0x02
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	9b 81       	ldd	r25, Y+3	; 0x03
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	31 f0       	breq	.+12     	; 0x25f8 <ADC_VoidInterruptControl+0x2c>
    25ec:	2a 81       	ldd	r18, Y+2	; 0x02
    25ee:	3b 81       	ldd	r19, Y+3	; 0x03
    25f0:	21 30       	cpi	r18, 0x01	; 1
    25f2:	31 05       	cpc	r19, r1
    25f4:	49 f0       	breq	.+18     	; 0x2608 <ADC_VoidInterruptControl+0x3c>
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <ADC_VoidInterruptControl+0x4a>
    {
    case DISABLE :
            CLEAR_BIT(ADCSRA,ADIE);
    25f8:	a6 e2       	ldi	r26, 0x26	; 38
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e6 e2       	ldi	r30, 0x26	; 38
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	87 7f       	andi	r24, 0xF7	; 247
    2604:	8c 93       	st	X, r24
    2606:	07 c0       	rjmp	.+14     	; 0x2616 <ADC_VoidInterruptControl+0x4a>
        break;
    case ENABLE :
        CLEAR_BIT(ADCSRA,ADIE);
    2608:	a6 e2       	ldi	r26, 0x26	; 38
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e6 e2       	ldi	r30, 0x26	; 38
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	87 7f       	andi	r24, 0xF7	; 247
    2614:	8c 93       	st	X, r24
        break ;
    default:
        break;
    }
 }
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <ADC_U8StartConversionSynchronous>:

 u8 ADC_U8StartConversionSynchronous(u8 Copy_U8ChannelNumber)
 {
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <ADC_U8StartConversionSynchronous+0x6>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	8a 83       	std	Y+2, r24	; 0x02
    // VARIABLE TO STORE THE DIGITAL DATA FROM ADC
    u8 Local_U8DigitalValue ;
    //SELECT THE CHANNEL FOR DOING CONVERSION 
    ADMUX &= CHANEL_SELECTION_MASK ;
    262e:	a7 e2       	ldi	r26, 0x27	; 39
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e7 e2       	ldi	r30, 0x27	; 39
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	80 7e       	andi	r24, 0xE0	; 224
    263a:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    263c:	a7 e2       	ldi	r26, 0x27	; 39
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e7 e2       	ldi	r30, 0x27	; 39
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	90 81       	ld	r25, Z
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	89 2b       	or	r24, r25
    264a:	8c 93       	st	X, r24
    //START THE CONVERSION
    SET_BIT(ADCSRA , ADSC);
    264c:	a6 e2       	ldi	r26, 0x26	; 38
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e6 e2       	ldi	r30, 0x26	; 38
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	80 64       	ori	r24, 0x40	; 64
    2658:	8c 93       	st	X, r24
    //POLLING UNTILL CONVERSION END , PROCESSOR STOP UNTILL CONVERSION END 
    while(GET_BIT(ADCSRA,ADIF) == FALSE);
    265a:	e6 e2       	ldi	r30, 0x26	; 38
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	82 95       	swap	r24
    2662:	8f 70       	andi	r24, 0x0F	; 15
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	81 70       	andi	r24, 0x01	; 1
    266a:	90 70       	andi	r25, 0x00	; 0
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	a9 f3       	breq	.-22     	; 0x265a <ADC_U8StartConversionSynchronous+0x38>
    //RESET THE ADC FLAG AFTER CONVERSION DONE
    SET_BIT(ADCSRA,ADIF);
    2670:	a6 e2       	ldi	r26, 0x26	; 38
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e6 e2       	ldi	r30, 0x26	; 38
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	80 61       	ori	r24, 0x10	; 16
    267c:	8c 93       	st	X, r24
    //TO READ VALUE FORM HIG REGISTER OR LOW
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        Local_U8DigitalValue = ADCH ;
    267e:	e5 e2       	ldi	r30, 0x25	; 37
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	89 83       	std	Y+1, r24	; 0x01
    #elif ADC_AJUST_RESULT  ==    RIGHT_ADJUST  
        Local_U8DigitalValue = ADCL;
    #endif
    //RETURN THE DIGITAL VALUE FROM ADC 
    return Local_U8DigitalValue ;
    2686:	89 81       	ldd	r24, Y+1	; 0x01

 }
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <ADC_U16StartConversionSynchronous>:
 u16 ADC_U16StartConversionSynchronous(u8 Copy_U8ChannelNumber)
  {
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <ADC_U16StartConversionSynchronous+0x6>
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	8b 83       	std	Y+3, r24	; 0x03

    /// VARIABLE TO STORE THE DIGITAL DATA FROM ADC
     u16 Local_U8DigitalValue ;
     //SELECT THE CHANNEL FOR DOING CONVERSION
     ADMUX &= CHANEL_SELECTION_MASK ;
    26a0:	a7 e2       	ldi	r26, 0x27	; 39
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e7 e2       	ldi	r30, 0x27	; 39
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	80 7e       	andi	r24, 0xE0	; 224
    26ac:	8c 93       	st	X, r24
     ADMUX |= Copy_U8ChannelNumber ;
    26ae:	a7 e2       	ldi	r26, 0x27	; 39
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e7 e2       	ldi	r30, 0x27	; 39
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	90 81       	ld	r25, Z
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	89 2b       	or	r24, r25
    26bc:	8c 93       	st	X, r24
     //START THE CONVERSION
     SET_BIT(ADCSRA , ADSC);
    26be:	a6 e2       	ldi	r26, 0x26	; 38
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e6 e2       	ldi	r30, 0x26	; 38
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	80 64       	ori	r24, 0x40	; 64
    26ca:	8c 93       	st	X, r24
     //POLLING UNTILL CONVERSION END , PROCESSOR STOP UNTILL CONVERSION END
     while(GET_BIT(ADCSRA,ADIF) == FALSE);
    26cc:	e6 e2       	ldi	r30, 0x26	; 38
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	82 95       	swap	r24
    26d4:	8f 70       	andi	r24, 0x0F	; 15
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	81 70       	andi	r24, 0x01	; 1
    26dc:	90 70       	andi	r25, 0x00	; 0
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	a9 f3       	breq	.-22     	; 0x26cc <ADC_U16StartConversionSynchronous+0x3a>
     //RESET THE ADC FLAG AFTER CONVERSION DONE
     SET_BIT(ADCSRA,ADIF);
    26e2:	a6 e2       	ldi	r26, 0x26	; 38
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e6 e2       	ldi	r30, 0x26	; 38
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	80 61       	ori	r24, 0x10	; 16
    26ee:	8c 93       	st	X, r24
     //TO READ VALUE FORM 16 bit adc register
     Local_U8DigitalValue=ADC ;
    26f0:	e4 e2       	ldi	r30, 0x24	; 36
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
     //RETURN THE DIGITAL VALUE FROM ADC
     return Local_U8DigitalValue ;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02

  }
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <ADC_U8StartConversionAsynchronous>:
 void ADC_U8StartConversionAsynchronous(u8 Copy_U8ChannelNumber  ,  void (* Notification ) (void))
 {
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <ADC_U8StartConversionAsynchronous+0x6>
    2712:	0f 92       	push	r0
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	7b 83       	std	Y+3, r23	; 0x03
    271c:	6a 83       	std	Y+2, r22	; 0x02
    //set channel 
    ADMUX &= CHANEL_SELECTION_MASK ;
    271e:	a7 e2       	ldi	r26, 0x27	; 39
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e7 e2       	ldi	r30, 0x27	; 39
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	80 7e       	andi	r24, 0xE0	; 224
    272a:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    272c:	a7 e2       	ldi	r26, 0x27	; 39
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e7 e2       	ldi	r30, 0x27	; 39
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	90 81       	ld	r25, Z
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	89 2b       	or	r24, r25
    273a:	8c 93       	st	X, r24

    ADC_pvoidNotificationFunction = Notification;
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	9b 81       	ldd	r25, Y+3	; 0x03
    2740:	90 93 8d 01 	sts	0x018D, r25
    2744:	80 93 8c 01 	sts	0x018C, r24

    SET_BIT(ADCSRA , ADSC);
    2748:	a6 e2       	ldi	r26, 0x26	; 38
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e6 e2       	ldi	r30, 0x26	; 38
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	80 64       	ori	r24, 0x40	; 64
    2754:	8c 93       	st	X, r24

 }
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <__vector_16>:
 void __vector_16 (void)  __attribute__ ((signal));
 void __vector_16 (void)
{
    2762:	1f 92       	push	r1
    2764:	0f 92       	push	r0
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	0f 92       	push	r0
    276a:	11 24       	eor	r1, r1
    276c:	2f 93       	push	r18
    276e:	3f 93       	push	r19
    2770:	4f 93       	push	r20
    2772:	5f 93       	push	r21
    2774:	6f 93       	push	r22
    2776:	7f 93       	push	r23
    2778:	8f 93       	push	r24
    277a:	9f 93       	push	r25
    277c:	af 93       	push	r26
    277e:	bf 93       	push	r27
    2780:	ef 93       	push	r30
    2782:	ff 93       	push	r31
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
     ADC_VoidInterruptControl(DISABLE);
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <ADC_VoidInterruptControl>
    ADC_Digital_Value = ADCH;
    2792:	e5 e2       	ldi	r30, 0x25	; 37
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	90 93 8f 01 	sts	0x018F, r25
    27a0:	80 93 8e 01 	sts	0x018E, r24
    if(ADC_pvoidNotificationFunction != NULL)
    27a4:	80 91 8c 01 	lds	r24, 0x018C
    27a8:	90 91 8d 01 	lds	r25, 0x018D
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	29 f0       	breq	.+10     	; 0x27ba <__vector_16+0x58>
    {
        ADC_pvoidNotificationFunction();
    27b0:	e0 91 8c 01 	lds	r30, 0x018C
    27b4:	f0 91 8d 01 	lds	r31, 0x018D
    27b8:	09 95       	icall
    }
    else
    {
        /* Do Nothing*/
    }
    ADC_VoidInterruptControl(ENABLE);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	0e 94 e6 12 	call	0x25cc	; 0x25cc <ADC_VoidInterruptControl>
                    
                    #endif

    #endif
    */
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	ff 91       	pop	r31
    27c6:	ef 91       	pop	r30
    27c8:	bf 91       	pop	r27
    27ca:	af 91       	pop	r26
    27cc:	9f 91       	pop	r25
    27ce:	8f 91       	pop	r24
    27d0:	7f 91       	pop	r23
    27d2:	6f 91       	pop	r22
    27d4:	5f 91       	pop	r21
    27d6:	4f 91       	pop	r20
    27d8:	3f 91       	pop	r19
    27da:	2f 91       	pop	r18
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	0f 90       	pop	r0
    27e2:	1f 90       	pop	r1
    27e4:	18 95       	reti

000027e6 <LM_VoidInit>:
#include "LM_config.h"



void LM_VoidInit(Lm_t * lm_obj)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <LM_VoidInit+0x6>
    27ec:	0f 92       	push	r0
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	9b 83       	std	Y+3, r25	; 0x03
    27f4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_U8Flag =0 ;
    27f6:	19 82       	std	Y+1, r1	; 0x01
    DIO_voidSetPinDirection(lm_obj->Lm_Port,lm_obj->Lm_pin,INPUT);    
    27f8:	ea 81       	ldd	r30, Y+2	; 0x02
    27fa:	fb 81       	ldd	r31, Y+3	; 0x03
    27fc:	80 81       	ld	r24, Z
    27fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2800:	fb 81       	ldd	r31, Y+3	; 0x03
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	69 2f       	mov	r22, r25
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    if(Local_U8Flag == 0)
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	88 23       	and	r24, r24
    2810:	21 f4       	brne	.+8      	; 0x281a <LM_VoidInit+0x34>
    {
        ADC_VoidInit();
    2812:	0e 94 af 12 	call	0x255e	; 0x255e <ADC_VoidInit>
        Local_U8Flag =  1 ;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	89 83       	std	Y+1, r24	; 0x01
    }
    else{}

}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <Lm_U8ReturnTemperture>:

u8 Lm_U8ReturnTemperture(Lm_t * lm_obj)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	2d 97       	sbiw	r28, 0x0d	; 13
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	9d 87       	std	Y+13, r25	; 0x0d
    283c:	8c 87       	std	Y+12, r24	; 0x0c
    f32 LocalF32temp ;
    u8 LocalU8Temp ;
    u16 ADC_Value = ADC_U16StartConversionSynchronous(lm_obj->Lm_pin);
    283e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2840:	fd 85       	ldd	r31, Y+13	; 0x0d
    2842:	81 81       	ldd	r24, Z+1	; 0x01
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 49 13 	call	0x2692	; 0x2692 <ADC_U16StartConversionSynchronous>
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05

    f32 volt_value= ((f32)ADC_Value * Reference_volt)/Reslution ;
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	cc 01       	movw	r24, r24
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e4       	ldi	r19, 0x40	; 64
    286e:	4c e9       	ldi	r20, 0x9C	; 156
    2870:	55 e4       	ldi	r21, 0x45	; 69
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	54 e4       	ldi	r21, 0x44	; 68
    2886:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	ab 83       	std	Y+3, r26	; 0x03
    2894:	bc 83       	std	Y+4, r27	; 0x04


     LocalF32temp = (f32)volt_value/lm_volt_for_1_temp ;
    2896:	69 81       	ldd	r22, Y+1	; 0x01
    2898:	7a 81       	ldd	r23, Y+2	; 0x02
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	88 87       	std	Y+8, r24	; 0x08
    28b0:	99 87       	std	Y+9, r25	; 0x09
    28b2:	aa 87       	std	Y+10, r26	; 0x0a
    28b4:	bb 87       	std	Y+11, r27	; 0x0b
     if(LocalF32temp - (s32)LocalF32temp >= .5)
    28b6:	68 85       	ldd	r22, Y+8	; 0x08
    28b8:	79 85       	ldd	r23, Y+9	; 0x09
    28ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    28bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    28be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	aa 27       	eor	r26, r26
    28c8:	97 fd       	sbrc	r25, 7
    28ca:	a0 95       	com	r26
    28cc:	ba 2f       	mov	r27, r26
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	68 85       	ldd	r22, Y+8	; 0x08
    28dc:	79 85       	ldd	r23, Y+9	; 0x09
    28de:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	5f e3       	ldi	r21, 0x3F	; 63
    28f6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    28fa:	88 23       	and	r24, r24
    28fc:	84 f0       	brlt	.+32     	; 0x291e <Lm_U8ReturnTemperture+0xf8>
     {
        LocalF32temp++;
    28fe:	68 85       	ldd	r22, Y+8	; 0x08
    2900:	79 85       	ldd	r23, Y+9	; 0x09
    2902:	8a 85       	ldd	r24, Y+10	; 0x0a
    2904:	9b 85       	ldd	r25, Y+11	; 0x0b
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	88 87       	std	Y+8, r24	; 0x08
    2918:	99 87       	std	Y+9, r25	; 0x09
    291a:	aa 87       	std	Y+10, r26	; 0x0a
    291c:	bb 87       	std	Y+11, r27	; 0x0b
     }else{}
     
     LocalU8Temp=(u8)LocalF32temp ;
    291e:	68 85       	ldd	r22, Y+8	; 0x08
    2920:	79 85       	ldd	r23, Y+9	; 0x09
    2922:	8a 85       	ldd	r24, Y+10	; 0x0a
    2924:	9b 85       	ldd	r25, Y+11	; 0x0b
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	8f 83       	std	Y+7, r24	; 0x07

    return LocalU8Temp ;
    2930:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2932:	2d 96       	adiw	r28, 0x0d	; 13
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <LED_VoidInit>:
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

void LED_VoidInit(led_t * ledobj)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <LED_VoidInit+0x6>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	9a 83       	std	Y+2, r25	; 0x02
    2950:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidSetPinDirection(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,OUTPUT);
    2952:	e9 81       	ldd	r30, Y+1	; 0x01
    2954:	fa 81       	ldd	r31, Y+2	; 0x02
    2956:	80 81       	ld	r24, Z
    2958:	e9 81       	ldd	r30, Y+1	; 0x01
    295a:	fa 81       	ldd	r31, Y+2	; 0x02
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	69 2f       	mov	r22, r25
    2960:	41 e0       	ldi	r20, 0x01	; 1
    2962:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <LED_VoidTurnOn>:
void LED_VoidTurnOn(led_t * ledobj)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	00 d0       	rcall	.+0      	; 0x2976 <LED_VoidTurnOn+0x6>
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,HIGH);
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	80 81       	ld	r24, Z
    2984:	e9 81       	ldd	r30, Y+1	; 0x01
    2986:	fa 81       	ldd	r31, Y+2	; 0x02
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	69 2f       	mov	r22, r25
    298c:	41 e0       	ldi	r20, 0x01	; 1
    298e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <LED_VoidTurnOff>:
void LED_VoidTurnOff(led_t * ledobj)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <LED_VoidTurnOff+0x6>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,LOW);
    29aa:	e9 81       	ldd	r30, Y+1	; 0x01
    29ac:	fa 81       	ldd	r31, Y+2	; 0x02
    29ae:	80 81       	ld	r24, Z
    29b0:	e9 81       	ldd	r30, Y+1	; 0x01
    29b2:	fa 81       	ldd	r31, Y+2	; 0x02
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	69 2f       	mov	r22, r25
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
}
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <LED_VoidToggleLed>:
void LED_VoidToggleLed(led_t * ledobj)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <LED_VoidToggleLed+0x6>
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidTogglePinValu(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin);
    29d6:	e9 81       	ldd	r30, Y+1	; 0x01
    29d8:	fa 81       	ldd	r31, Y+2	; 0x02
    29da:	80 81       	ld	r24, Z
    29dc:	e9 81       	ldd	r30, Y+1	; 0x01
    29de:	fa 81       	ldd	r31, Y+2	; 0x02
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	69 2f       	mov	r22, r25
    29e4:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_VoidTogglePinValu>
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidInit(void)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	2e 97       	sbiw	r28, 0x0e	; 14
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61

#if(LCD_MODE == EIGHT_BIT_MODE)
    //Initialize Data Port
    DIO_VoidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	0e 94 b5 10 	call	0x216a	; 0x216a <DIO_VoidSetPortDirection>
    //Initialize Control Pins
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, OUTPUT);
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, OUTPUT);
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, OUTPUT);
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	62 e0       	ldi	r22, 0x02	; 2
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a8 e4       	ldi	r26, 0x48	; 72
    2a32:	b2 e4       	ldi	r27, 0x42	; 66
    2a34:	8b 87       	std	Y+11, r24	; 0x0b
    2a36:	9c 87       	std	Y+12, r25	; 0x0c
    2a38:	ad 87       	std	Y+13, r26	; 0x0d
    2a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4a ef       	ldi	r20, 0xFA	; 250
    2a4a:	54 e4       	ldi	r21, 0x44	; 68
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	8f 83       	std	Y+7, r24	; 0x07
    2a56:	98 87       	std	Y+8, r25	; 0x08
    2a58:	a9 87       	std	Y+9, r26	; 0x09
    2a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e8       	ldi	r20, 0x80	; 128
    2a6a:	5f e3       	ldi	r21, 0x3F	; 63
    2a6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a70:	88 23       	and	r24, r24
    2a72:	2c f4       	brge	.+10     	; 0x2a7e <LCD_voidInit+0x8c>
		__ticks = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	3f c0       	rjmp	.+126    	; 0x2afc <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    2a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a80:	78 85       	ldd	r23, Y+8	; 0x08
    2a82:	89 85       	ldd	r24, Y+9	; 0x09
    2a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	4f e7       	ldi	r20, 0x7F	; 127
    2a8c:	57 e4       	ldi	r21, 0x47	; 71
    2a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	4c f5       	brge	.+82     	; 0x2ae8 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e2       	ldi	r20, 0x20	; 32
    2aa4:	51 e4       	ldi	r21, 0x41	; 65
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <LCD_voidInit+0xec>
    2ac0:	88 ec       	ldi	r24, 0xC8	; 200
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9c 83       	std	Y+4, r25	; 0x04
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9c 81       	ldd	r25, Y+4	; 0x04
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_voidInit+0xda>
    2ad0:	9c 83       	std	Y+4, r25	; 0x04
    2ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	9e 83       	std	Y+6, r25	; 0x06
    2adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	69 f7       	brne	.-38     	; 0x2ac0 <LCD_voidInit+0xce>
    2ae6:	14 c0       	rjmp	.+40     	; 0x2b10 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aea:	78 85       	ldd	r23, Y+8	; 0x08
    2aec:	89 85       	ldd	r24, Y+9	; 0x09
    2aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
    2afc:	8d 81       	ldd	r24, Y+5	; 0x05
    2afe:	9e 81       	ldd	r25, Y+6	; 0x06
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <LCD_voidInit+0x116>
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01

    //wait for more than 30ms
    _delay_ms(50);

    //Send Function Set Command
    LCD_voidSendCommand(FUNCTION_SET_CMD);
    2b10:	8c e3       	ldi	r24, 0x3C	; 60
    2b12:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidSendCommand>
    //wait for 1ms
    //Send Display ON/ OFF Control Command
    LCD_voidSendCommand(FUNCTION_ON_OFF_CMD);
    2b16:	8c e0       	ldi	r24, 0x0C	; 12
    2b18:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidSendCommand>

    //Send Clear Command
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidSendCommand>




#endif
}
    2b22:	2e 96       	adiw	r28, 0x0e	; 14
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	2f 97       	sbiw	r28, 0x0f	; 15
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	8f 87       	std	Y+15, r24	; 0x0f
    //SET RS Pin To Send Command (RS -> 0: Command, 1: Data)
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, RS, HIGH);
    2b4a:	83 e0       	ldi	r24, 0x03	; 3
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	41 e0       	ldi	r20, 0x01	; 1
    2b50:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    //Clear RW Pin To Write The Command (RW -> 0: Write, 1: Read)
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, RW, LOW);
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>

    //Set The Command On The Data/Command Port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT, Copy_u8Data);
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b62:	0e 94 69 11 	call	0x22d2	; 0x22d2 <DIO_VoidSetSpacificvalue>

    //Send Enable Pulse
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    2b66:	83 e0       	ldi	r24, 0x03	; 3
    2b68:	62 e0       	ldi	r22, 0x02	; 2
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    //HIGH
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	62 e0       	ldi	r22, 0x02	; 2
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e4       	ldi	r27, 0x40	; 64
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8f 83       	std	Y+7, r24	; 0x07
    2ba4:	98 87       	std	Y+8, r25	; 0x08
    2ba6:	a9 87       	std	Y+9, r26	; 0x09
    2ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <LCD_voidSendData+0x98>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <LCD_voidSendData+0xf8>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_voidSendData+0xe6>
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <LCD_voidSendData+0xda>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_voidSendData+0x122>
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    2c5e:	83 e0       	ldi	r24, 0x03	; 3
    2c60:	62 e0       	ldi	r22, 0x02	; 2
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>

}
    2c68:	2f 96       	adiw	r28, 0x0f	; 15
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <LCD_voidSendCommand>:


static void LCD_voidSendCommand(u8 Copy_u8Command)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	2f 97       	sbiw	r28, 0x0f	; 15
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	8f 87       	std	Y+15, r24	; 0x0f
    //Clear RS Pin To Send Command (RS -> 0: Command, 1: Data)
	DIO_VoidSetPinValue(LCD_CONTROL_PORT, RS, LOW);
    2c90:	83 e0       	ldi	r24, 0x03	; 3
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    //Clear RW Pin To Write The Command (RW -> 0: Write, 1: Read)
	DIO_VoidSetPinValue(LCD_CONTROL_PORT, RW, LOW);
    2c9a:	83 e0       	ldi	r24, 0x03	; 3
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>

    //Set The Command On The Data/Command Port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT, Copy_u8Command);
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ca8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <DIO_VoidSetSpacificvalue>

    //Send Enable Pulse
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	62 e0       	ldi	r22, 0x02	; 2
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    //HIGH
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
    2cb6:	83 e0       	ldi	r24, 0x03	; 3
    2cb8:	62 e0       	ldi	r22, 0x02	; 2
    2cba:	41 e0       	ldi	r20, 0x01	; 1
    2cbc:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	b0 e4       	ldi	r27, 0x40	; 64
    2cc8:	8b 87       	std	Y+11, r24	; 0x0b
    2cca:	9c 87       	std	Y+12, r25	; 0x0c
    2ccc:	ad 87       	std	Y+13, r26	; 0x0d
    2cce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a ef       	ldi	r20, 0xFA	; 250
    2cde:	54 e4       	ldi	r21, 0x44	; 68
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	8f 83       	std	Y+7, r24	; 0x07
    2cea:	98 87       	std	Y+8, r25	; 0x08
    2cec:	a9 87       	std	Y+9, r26	; 0x09
    2cee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	3f c0       	rjmp	.+126    	; 0x2d90 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    2d12:	6f 81       	ldd	r22, Y+7	; 0x07
    2d14:	78 85       	ldd	r23, Y+8	; 0x08
    2d16:	89 85       	ldd	r24, Y+9	; 0x09
    2d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	4c f5       	brge	.+82     	; 0x2d7c <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <LCD_voidSendCommand+0xf8>
    2d54:	88 ec       	ldi	r24, 0xC8	; 200
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <LCD_voidSendCommand+0xe6>
    2d64:	9c 83       	std	Y+4, r25	; 0x04
    2d66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	9e 83       	std	Y+6, r25	; 0x06
    2d70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	9e 81       	ldd	r25, Y+6	; 0x06
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <LCD_voidSendCommand+0xda>
    2d7a:	14 c0       	rjmp	.+40     	; 0x2da4 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7e:	78 85       	ldd	r23, Y+8	; 0x08
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_voidSendCommand+0x122>
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    2da4:	83 e0       	ldi	r24, 0x03	; 3
    2da6:	62 e0       	ldi	r22, 0x02	; 2
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
}
    2dae:	2f 96       	adiw	r28, 0x0f	; 15
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <LCD_voidClearDisplay>:


void LCD_voidClearDisplay(void)
{
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidSendCommand>
}
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <LCD_voidGoToXY+0x6>
    2dda:	0f 92       	push	r0
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	8a 83       	std	Y+2, r24	; 0x02
    2de2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CharAddress = 0;
    2de4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos == 0)
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	88 23       	and	r24, r24
    2dea:	31 f4       	brne	.+12     	; 0x2df8 <LCD_voidGoToXY+0x24>
	{
		if(Copy_u8YPos < 16)
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	80 31       	cpi	r24, 0x10	; 16
    2df0:	60 f4       	brcc	.+24     	; 0x2e0a <LCD_voidGoToXY+0x36>
		{
			//Address = Y-Position
			Local_u8CharAddress = Copy_u8YPos;
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	09 c0       	rjmp	.+18     	; 0x2e0a <LCD_voidGoToXY+0x36>
		}else{}
	}
	else if(Copy_u8XPos == 1)
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	81 30       	cpi	r24, 0x01	; 1
    2dfc:	31 f4       	brne	.+12     	; 0x2e0a <LCD_voidGoToXY+0x36>
	{
		if(Copy_u8YPos < 16)
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	80 31       	cpi	r24, 0x10	; 16
    2e02:	18 f4       	brcc	.+6      	; 0x2e0a <LCD_voidGoToXY+0x36>
		{
			Local_u8CharAddress = Copy_u8YPos + ROW1_OFFSET;
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	80 5c       	subi	r24, 0xC0	; 192
    2e08:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Raise Error
	}

	Local_u8CharAddress += ROW1_CMD;
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	80 58       	subi	r24, 0x80	; 128
    2e0e:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8CharAddress);
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidSendCommand>

}
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <LCD_voidSendString+0x6>
    2e28:	0f 92       	push	r0
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	9b 83       	std	Y+3, r25	; 0x03
    2e30:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    2e32:	19 82       	std	Y+1, r1	; 0x01
    2e34:	0e c0       	rjmp	.+28     	; 0x2e52 <LCD_voidSendString+0x30>

	while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
	{
		LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e40:	fc 01       	movw	r30, r24
    2e42:	e2 0f       	add	r30, r18
    2e44:	f3 1f       	adc	r31, r19
    2e46:	80 81       	ld	r24, Z
    2e48:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_voidSendData>
		Local_u8LoopCounter++;
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	8f 5f       	subi	r24, 0xFF	; 255
    2e50:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
	u8 Local_u8LoopCounter = 0;

	while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	e2 0f       	add	r30, r18
    2e60:	f3 1f       	adc	r31, r19
    2e62:	80 81       	ld	r24, Z
    2e64:	88 23       	and	r24, r24
    2e66:	39 f7       	brne	.-50     	; 0x2e36 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <LCD_voidSendNumber>:


void LCD_voidSendNumber(s32 Copy_s8Number)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	9e 87       	std	Y+14, r25	; 0x0e
    2e8a:	8d 87       	std	Y+13, r24	; 0x0d
	s8 Local_u8DigitsDataArray[10] = {0};
    2e8c:	8a e0       	ldi	r24, 0x0A	; 10
    2e8e:	fe 01       	movw	r30, r28
    2e90:	33 96       	adiw	r30, 0x03	; 3
    2e92:	df 01       	movw	r26, r30
    2e94:	98 2f       	mov	r25, r24
    2e96:	1d 92       	st	X+, r1
    2e98:	9a 95       	dec	r25
    2e9a:	e9 f7       	brne	.-6      	; 0x2e96 <LCD_voidSendNumber+0x22>
	s8 Local_u8LoopCounter = 0;
    2e9c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8NumberSign = 0; //0 -> Positive Number, 1 for Negative Number
    2e9e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s8Number >= 0)
    2ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea4:	99 23       	and	r25, r25
    2ea6:	14 f0       	brlt	.+4      	; 0x2eac <LCD_voidSendNumber+0x38>
	{
		Local_u8NumberSign = POSITIVE;
    2ea8:	19 82       	std	Y+1, r1	; 0x01
    2eaa:	2e c0       	rjmp	.+92     	; 0x2f08 <LCD_voidSendNumber+0x94>
	}
	else
	{	//Convert The Number To Positive, and take the sign
		Local_u8NumberSign = NEGATIVE;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
		Copy_s8Number--;
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	9e 87       	std	Y+14, r25	; 0x0e
    2eb8:	8d 87       	std	Y+13, r24	; 0x0d
		Copy_s8Number = ~Copy_s8Number;
    2eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ebe:	80 95       	com	r24
    2ec0:	90 95       	com	r25
    2ec2:	9e 87       	std	Y+14, r25	; 0x0e
    2ec4:	8d 87       	std	Y+13, r24	; 0x0d
    2ec6:	20 c0       	rjmp	.+64     	; 0x2f08 <LCD_voidSendNumber+0x94>
	}

	while(Copy_s8Number != 0)
	{	//Split the Number to digits, Get there ASCII, and store them in array.
		Local_u8DigitsDataArray[Local_u8LoopCounter] = (Copy_s8Number % 10) + '0';
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	e8 2f       	mov	r30, r24
    2ecc:	ff 27       	eor	r31, r31
    2ece:	e7 fd       	sbrc	r30, 7
    2ed0:	f0 95       	com	r31
    2ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed6:	2a e0       	ldi	r18, 0x0A	; 10
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	b9 01       	movw	r22, r18
    2edc:	0e 94 46 19 	call	0x328c	; 0x328c <__divmodhi4>
    2ee0:	80 5d       	subi	r24, 0xD0	; 208
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	03 96       	adiw	r24, 0x03	; 3
    2ee8:	e8 0f       	add	r30, r24
    2eea:	f9 1f       	adc	r31, r25
    2eec:	20 83       	st	Z, r18
		Copy_s8Number /= 10;
    2eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef2:	2a e0       	ldi	r18, 0x0A	; 10
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	b9 01       	movw	r22, r18
    2ef8:	0e 94 46 19 	call	0x328c	; 0x328c <__divmodhi4>
    2efc:	cb 01       	movw	r24, r22
    2efe:	9e 87       	std	Y+14, r25	; 0x0e
    2f00:	8d 87       	std	Y+13, r24	; 0x0d
		Local_u8LoopCounter++;
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8NumberSign = NEGATIVE;
		Copy_s8Number--;
		Copy_s8Number = ~Copy_s8Number;
	}

	while(Copy_s8Number != 0)
    2f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	e1 f6       	brne	.-72     	; 0x2ec8 <LCD_voidSendNumber+0x54>
		Local_u8DigitsDataArray[Local_u8LoopCounter] = (Copy_s8Number % 10) + '0';
		Copy_s8Number /= 10;
		Local_u8LoopCounter++;
	}

	Local_u8LoopCounter--;
    2f10:	8a 81       	ldd	r24, Y+2	; 0x02
    2f12:	81 50       	subi	r24, 0x01	; 1
    2f14:	8a 83       	std	Y+2, r24	; 0x02

	if(Local_u8NumberSign == NEGATIVE)
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	81 30       	cpi	r24, 0x01	; 1
    2f1a:	a1 f4       	brne	.+40     	; 0x2f44 <LCD_voidSendNumber+0xd0>
	{
		LCD_voidSendData('-');
    2f1c:	8d e2       	ldi	r24, 0x2D	; 45
    2f1e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_voidSendData>
    2f22:	10 c0       	rjmp	.+32     	; 0x2f44 <LCD_voidSendNumber+0xd0>
	}else{}

	while(Local_u8LoopCounter >= 0)
	{
		LCD_voidSendData(Local_u8DigitsDataArray[Local_u8LoopCounter]);
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	28 2f       	mov	r18, r24
    2f28:	33 27       	eor	r19, r19
    2f2a:	27 fd       	sbrc	r18, 7
    2f2c:	30 95       	com	r19
    2f2e:	ce 01       	movw	r24, r28
    2f30:	03 96       	adiw	r24, 0x03	; 3
    2f32:	fc 01       	movw	r30, r24
    2f34:	e2 0f       	add	r30, r18
    2f36:	f3 1f       	adc	r31, r19
    2f38:	80 81       	ld	r24, Z
    2f3a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_voidSendData>
		Local_u8LoopCounter--;
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	81 50       	subi	r24, 0x01	; 1
    2f42:	8a 83       	std	Y+2, r24	; 0x02
	if(Local_u8NumberSign == NEGATIVE)
	{
		LCD_voidSendData('-');
	}else{}

	while(Local_u8LoopCounter >= 0)
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	88 23       	and	r24, r24
    2f48:	6c f7       	brge	.-38     	; 0x2f24 <LCD_voidSendNumber+0xb0>
	{
		LCD_voidSendData(Local_u8DigitsDataArray[Local_u8LoopCounter]);
		Local_u8LoopCounter--;
	}
}
    2f4a:	2e 96       	adiw	r28, 0x0e	; 14
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <LCD_voidSendCustomCharachter>:

void LCD_voidSendCustomCharachter(u8 * Copy_pu8CharArray,
								  u8 Copy_u8PatternNumber,
								  u8 Copy_u8XPos,
								  u8 Copy_u8YPos)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	27 97       	sbiw	r28, 0x07	; 7
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
    2f74:	6d 83       	std	Y+5, r22	; 0x05
    2f76:	4e 83       	std	Y+6, r20	; 0x06
    2f78:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8LoopCounter = 0;
    2f7a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8CGRAMAddress = 0;
    2f7c:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    2f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f80:	88 2f       	mov	r24, r24
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CGRAMAddress, 6);
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	80 64       	ori	r24, 0x40	; 64
    2f96:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_voidSendCommand>

	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8; Local_u8LoopCounter++)
    2f9e:	1a 82       	std	Y+2, r1	; 0x02
    2fa0:	0e c0       	rjmp	.+28     	; 0x2fbe <LCD_voidSendCustomCharachter+0x62>
	{
		LCD_voidSendData(Copy_pu8CharArray[Local_u8LoopCounter]);
    2fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	9c 81       	ldd	r25, Y+4	; 0x04
    2fac:	fc 01       	movw	r30, r24
    2fae:	e2 0f       	add	r30, r18
    2fb0:	f3 1f       	adc	r31, r19
    2fb2:	80 81       	ld	r24, Z
    2fb4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_voidSendData>
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
	SET_BIT(Local_u8CGRAMAddress, 6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8; Local_u8LoopCounter++)
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	8a 83       	std	Y+2, r24	; 0x02
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	88 30       	cpi	r24, 0x08	; 8
    2fc2:	78 f3       	brcs	.-34     	; 0x2fa2 <LCD_voidSendCustomCharachter+0x46>
	{
		LCD_voidSendData(Copy_pu8CharArray[Local_u8LoopCounter]);
	}

	LCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    2fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc8:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <LCD_voidGoToXY>

	LCD_voidSendData(Copy_u8PatternNumber);
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_voidSendData>

}
    2fd2:	27 96       	adiw	r28, 0x07	; 7
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <KPD_VoidIntit>:
#include "KPD_private.h"



void KPD_VoidIntit(void)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    //set Rows pins to input pulled up
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,INPUT);
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,INPUT);
    2ff6:	83 e0       	ldi	r24, 0x03	; 3
    2ff8:	61 e0       	ldi	r22, 0x01	; 1
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,INPUT);
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	62 e0       	ldi	r22, 0x02	; 2
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,INPUT);
    300a:	83 e0       	ldi	r24, 0x03	; 3
    300c:	63 e0       	ldi	r22, 0x03	; 3
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    // PuLLED UP 
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW0_PIN,PULLUP);
    3014:	83 e0       	ldi	r24, 0x03	; 3
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW1_PIN,PULLUP);
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	61 e0       	ldi	r22, 0x01	; 1
    3022:	41 e0       	ldi	r20, 0x01	; 1
    3024:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW2_PIN,PULLUP);
    3028:	83 e0       	ldi	r24, 0x03	; 3
    302a:	62 e0       	ldi	r22, 0x02	; 2
    302c:	41 e0       	ldi	r20, 0x01	; 1
    302e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW3_PIN,PULLUP);
    3032:	83 e0       	ldi	r24, 0x03	; 3
    3034:	63 e0       	ldi	r22, 0x03	; 3
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    //set cols pins to output high
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,OUTPUT);
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	64 e0       	ldi	r22, 0x04	; 4
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,OUTPUT);
    3046:	83 e0       	ldi	r24, 0x03	; 3
    3048:	65 e0       	ldi	r22, 0x05	; 5
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,OUTPUT);
    3050:	83 e0       	ldi	r24, 0x03	; 3
    3052:	66 e0       	ldi	r22, 0x06	; 6
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,OUTPUT);
    305a:	83 e0       	ldi	r24, 0x03	; 3
    305c:	67 e0       	ldi	r22, 0x07	; 7
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
    //SET COLUMNS HIGH
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,HIGH);
    3064:	83 e0       	ldi	r24, 0x03	; 3
    3066:	64 e0       	ldi	r22, 0x04	; 4
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,HIGH);
    306e:	83 e0       	ldi	r24, 0x03	; 3
    3070:	65 e0       	ldi	r22, 0x05	; 5
    3072:	41 e0       	ldi	r20, 0x01	; 1
    3074:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,HIGH);
    3078:	83 e0       	ldi	r24, 0x03	; 3
    307a:	66 e0       	ldi	r22, 0x06	; 6
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,HIGH);
    3082:	83 e0       	ldi	r24, 0x03	; 3
    3084:	67 e0       	ldi	r22, 0x07	; 7
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>


}
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <KPD_U8GetPressedKey>:
                                                 

u8 KPD_U8GetPressedKey(void)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <KPD_U8GetPressedKey+0x6>
    3098:	00 d0       	rcall	.+0      	; 0x309a <KPD_U8GetPressedKey+0x8>
    309a:	0f 92       	push	r0
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
   //array of colums pins
   static u8 Local_u8Array_of_columns[KPD_COLUMNS_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
   //array of rows pins
   static  u8 Local_U8Array_Of_Rows[KPD_ROWS_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    30a0:	8f ef       	ldi	r24, 0xFF	; 255
    30a2:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    30a4:	1b 82       	std	Y+3, r1	; 0x03
    30a6:	57 c0       	rjmp	.+174    	; 0x3156 <KPD_U8GetPressedKey+0xc4>
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	88 2f       	mov	r24, r24
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	fc 01       	movw	r30, r24
    30b0:	e4 59       	subi	r30, 0x94	; 148
    30b2:	fe 4f       	sbci	r31, 0xFE	; 254
    30b4:	90 81       	ld	r25, Z
    30b6:	83 e0       	ldi	r24, 0x03	; 3
    30b8:	69 2f       	mov	r22, r25
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    30c0:	1a 82       	std	Y+2, r1	; 0x02
    30c2:	37 c0       	rjmp	.+110    	; 0x3132 <KPD_U8GetPressedKey+0xa0>
        {
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	88 2f       	mov	r24, r24
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	fc 01       	movw	r30, r24
    30cc:	e8 59       	subi	r30, 0x98	; 152
    30ce:	fe 4f       	sbci	r31, 0xFE	; 254
    30d0:	90 81       	ld	r25, Z
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	69 2f       	mov	r22, r25
    30d6:	0e 94 3b 10 	call	0x2076	; 0x2076 <DIO_VoidGetPinValue>
    30da:	89 83       	std	Y+1, r24	; 0x01
           if(local_u8RowValue== LOW)
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	88 23       	and	r24, r24
    30e0:	29 f5       	brne	.+74     	; 0x312c <KPD_U8GetPressedKey+0x9a>
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	48 2f       	mov	r20, r24
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	ca 01       	movw	r24, r20
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	88 0f       	add	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	82 0f       	add	r24, r18
    30fa:	93 1f       	adc	r25, r19
    30fc:	fc 01       	movw	r30, r24
    30fe:	e0 59       	subi	r30, 0x90	; 144
    3100:	fe 4f       	sbci	r31, 0xFE	; 254
    3102:	80 81       	ld	r24, Z
    3104:	8c 83       	std	Y+4, r24	; 0x04
    3106:	0c c0       	rjmp	.+24     	; 0x3120 <KPD_U8GetPressedKey+0x8e>
                while(local_u8RowValue==LOW)
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	fc 01       	movw	r30, r24
    3110:	e8 59       	subi	r30, 0x98	; 152
    3112:	fe 4f       	sbci	r31, 0xFE	; 254
    3114:	90 81       	ld	r25, Z
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	69 2f       	mov	r22, r25
    311a:	0e 94 3b 10 	call	0x2076	; 0x2076 <DIO_VoidGetPinValue>
    311e:	89 83       	std	Y+1, r24	; 0x01
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
           if(local_u8RowValue== LOW)
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
                while(local_u8RowValue==LOW)
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	88 23       	and	r24, r24
    3124:	89 f3       	breq	.-30     	; 0x3108 <KPD_U8GetPressedKey+0x76>
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
                }

                return  local_u8Key_pressed ;
    3126:	8c 81       	ldd	r24, Y+4	; 0x04
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	1b c0       	rjmp	.+54     	; 0x3162 <KPD_U8GetPressedKey+0xd0>
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	8f 5f       	subi	r24, 0xFF	; 255
    3130:	8a 83       	std	Y+2, r24	; 0x02
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	84 30       	cpi	r24, 0x04	; 4
    3136:	30 f2       	brcs	.-116    	; 0x30c4 <KPD_U8GetPressedKey+0x32>

           }

        }
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	88 2f       	mov	r24, r24
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	fc 01       	movw	r30, r24
    3140:	e4 59       	subi	r30, 0x94	; 148
    3142:	fe 4f       	sbci	r31, 0xFE	; 254
    3144:	90 81       	ld	r25, Z
    3146:	83 e0       	ldi	r24, 0x03	; 3
    3148:	69 2f       	mov	r22, r25
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	8f 5f       	subi	r24, 0xFF	; 255
    3154:	8b 83       	std	Y+3, r24	; 0x03
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	84 30       	cpi	r24, 0x04	; 4
    315a:	08 f4       	brcc	.+2      	; 0x315e <KPD_U8GetPressedKey+0xcc>
    315c:	a5 cf       	rjmp	.-182    	; 0x30a8 <KPD_U8GetPressedKey+0x16>
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);

    }

    return local_u8Key_pressed ;
    315e:	8c 81       	ldd	r24, Y+4	; 0x04
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <main>:

#define  F_CPU 8000000UL


u32 main (void)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	0f 92       	push	r0
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
	GIE_VoidEnabledGlobalInterrupt();
    317e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <GIE_VoidEnabledGlobalInterrupt>
	LCD_voidInit();
    3182:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,PIN2,INPUT);
    3186:	83 e0       	ldi	r24, 0x03	; 3
    3188:	62 e0       	ldi	r22, 0x02	; 2
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
	DIO_VoidSetPinValue(DIO_PORTD,PIN2,PULLUP);
    3190:	83 e0       	ldi	r24, 0x03	; 3
    3192:	62 e0       	ldi	r22, 0x02	; 2
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <DIO_VoidSetPinValue>

	EXTI_VoidIntit(EXTI_INT0);
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	0e 94 bf 0b 	call	0x177e	; 0x177e <EXTI_VoidIntit>
	EXTI_VoidTriggerEdge(EXTI_INT0,FALLING_EDGE);
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	62 e0       	ldi	r22, 0x02	; 2
    31a4:	0e 94 6d 0c 	call	0x18da	; 0x18da <EXTI_VoidTriggerEdge>
	EXTI_VoidEnable(EXTI_INT0);
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <EXTI_VoidEnable>
	EXTI_VoidINT0SetCallBack(&readvalue);
    31ae:	89 e0       	ldi	r24, 0x09	; 9
    31b0:	99 e1       	ldi	r25, 0x19	; 25
    31b2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <EXTI_VoidINT0SetCallBack>

	DIO_voidSetPinDirection(DIO_PORTB,PIN5,OUTPUT);
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	65 e0       	ldi	r22, 0x05	; 5
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,PIN6,INPUT);
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	66 e0       	ldi	r22, 0x06	; 6
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,PIN7,OUTPUT);
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	67 e0       	ldi	r22, 0x07	; 7
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,PIN6,INPUT);
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	66 e0       	ldi	r22, 0x06	; 6
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,PIN6,PULLUP);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	66 e0       	ldi	r22, 0x06	; 6
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_voidSetPinDirection>

	SPI_VoidMAsterInit();
    31e8:	0e 94 1d 0b 	call	0x163a	; 0x163a <SPI_VoidMAsterInit>
	//SPI_u8SendReceive(20);


	while(1)
	{
			u8 temp = 0 ;
    31ec:	19 82       	std	Y+1, r1	; 0x01

			if(flag ==1 )
    31ee:	80 91 90 01 	lds	r24, 0x0190
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	d9 f7       	brne	.-10     	; 0x31ec <main+0x78>
			{
					LCD_voidClearDisplay();
    31f6:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <LCD_voidClearDisplay>
					flag =0 ;
    31fa:	10 92 90 01 	sts	0x0190, r1
					temp = SPI_u8SendReceive(255);
    31fe:	8f ef       	ldi	r24, 0xFF	; 255
    3200:	0e 94 86 0b 	call	0x170c	; 0x170c <SPI_u8SendReceive>
    3204:	89 83       	std	Y+1, r24	; 0x01
					LCD_voidSendNumber(temp);
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	88 2f       	mov	r24, r24
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_voidSendNumber>
    3210:	ed cf       	rjmp	.-38     	; 0x31ec <main+0x78>

00003212 <readvalue>:
	return 0 ;

}

void  readvalue(void)
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62


		flag = 1 ;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	80 93 90 01 	sts	0x0190, r24

}
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <__mulsi3>:
    3226:	62 9f       	mul	r22, r18
    3228:	d0 01       	movw	r26, r0
    322a:	73 9f       	mul	r23, r19
    322c:	f0 01       	movw	r30, r0
    322e:	82 9f       	mul	r24, r18
    3230:	e0 0d       	add	r30, r0
    3232:	f1 1d       	adc	r31, r1
    3234:	64 9f       	mul	r22, r20
    3236:	e0 0d       	add	r30, r0
    3238:	f1 1d       	adc	r31, r1
    323a:	92 9f       	mul	r25, r18
    323c:	f0 0d       	add	r31, r0
    323e:	83 9f       	mul	r24, r19
    3240:	f0 0d       	add	r31, r0
    3242:	74 9f       	mul	r23, r20
    3244:	f0 0d       	add	r31, r0
    3246:	65 9f       	mul	r22, r21
    3248:	f0 0d       	add	r31, r0
    324a:	99 27       	eor	r25, r25
    324c:	72 9f       	mul	r23, r18
    324e:	b0 0d       	add	r27, r0
    3250:	e1 1d       	adc	r30, r1
    3252:	f9 1f       	adc	r31, r25
    3254:	63 9f       	mul	r22, r19
    3256:	b0 0d       	add	r27, r0
    3258:	e1 1d       	adc	r30, r1
    325a:	f9 1f       	adc	r31, r25
    325c:	bd 01       	movw	r22, r26
    325e:	cf 01       	movw	r24, r30
    3260:	11 24       	eor	r1, r1
    3262:	08 95       	ret

00003264 <__udivmodhi4>:
    3264:	aa 1b       	sub	r26, r26
    3266:	bb 1b       	sub	r27, r27
    3268:	51 e1       	ldi	r21, 0x11	; 17
    326a:	07 c0       	rjmp	.+14     	; 0x327a <__udivmodhi4_ep>

0000326c <__udivmodhi4_loop>:
    326c:	aa 1f       	adc	r26, r26
    326e:	bb 1f       	adc	r27, r27
    3270:	a6 17       	cp	r26, r22
    3272:	b7 07       	cpc	r27, r23
    3274:	10 f0       	brcs	.+4      	; 0x327a <__udivmodhi4_ep>
    3276:	a6 1b       	sub	r26, r22
    3278:	b7 0b       	sbc	r27, r23

0000327a <__udivmodhi4_ep>:
    327a:	88 1f       	adc	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	5a 95       	dec	r21
    3280:	a9 f7       	brne	.-22     	; 0x326c <__udivmodhi4_loop>
    3282:	80 95       	com	r24
    3284:	90 95       	com	r25
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	08 95       	ret

0000328c <__divmodhi4>:
    328c:	97 fb       	bst	r25, 7
    328e:	09 2e       	mov	r0, r25
    3290:	07 26       	eor	r0, r23
    3292:	0a d0       	rcall	.+20     	; 0x32a8 <__divmodhi4_neg1>
    3294:	77 fd       	sbrc	r23, 7
    3296:	04 d0       	rcall	.+8      	; 0x32a0 <__divmodhi4_neg2>
    3298:	e5 df       	rcall	.-54     	; 0x3264 <__udivmodhi4>
    329a:	06 d0       	rcall	.+12     	; 0x32a8 <__divmodhi4_neg1>
    329c:	00 20       	and	r0, r0
    329e:	1a f4       	brpl	.+6      	; 0x32a6 <__divmodhi4_exit>

000032a0 <__divmodhi4_neg2>:
    32a0:	70 95       	com	r23
    32a2:	61 95       	neg	r22
    32a4:	7f 4f       	sbci	r23, 0xFF	; 255

000032a6 <__divmodhi4_exit>:
    32a6:	08 95       	ret

000032a8 <__divmodhi4_neg1>:
    32a8:	f6 f7       	brtc	.-4      	; 0x32a6 <__divmodhi4_exit>
    32aa:	90 95       	com	r25
    32ac:	81 95       	neg	r24
    32ae:	9f 4f       	sbci	r25, 0xFF	; 255
    32b0:	08 95       	ret

000032b2 <__udivmodsi4>:
    32b2:	a1 e2       	ldi	r26, 0x21	; 33
    32b4:	1a 2e       	mov	r1, r26
    32b6:	aa 1b       	sub	r26, r26
    32b8:	bb 1b       	sub	r27, r27
    32ba:	fd 01       	movw	r30, r26
    32bc:	0d c0       	rjmp	.+26     	; 0x32d8 <__udivmodsi4_ep>

000032be <__udivmodsi4_loop>:
    32be:	aa 1f       	adc	r26, r26
    32c0:	bb 1f       	adc	r27, r27
    32c2:	ee 1f       	adc	r30, r30
    32c4:	ff 1f       	adc	r31, r31
    32c6:	a2 17       	cp	r26, r18
    32c8:	b3 07       	cpc	r27, r19
    32ca:	e4 07       	cpc	r30, r20
    32cc:	f5 07       	cpc	r31, r21
    32ce:	20 f0       	brcs	.+8      	; 0x32d8 <__udivmodsi4_ep>
    32d0:	a2 1b       	sub	r26, r18
    32d2:	b3 0b       	sbc	r27, r19
    32d4:	e4 0b       	sbc	r30, r20
    32d6:	f5 0b       	sbc	r31, r21

000032d8 <__udivmodsi4_ep>:
    32d8:	66 1f       	adc	r22, r22
    32da:	77 1f       	adc	r23, r23
    32dc:	88 1f       	adc	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	1a 94       	dec	r1
    32e2:	69 f7       	brne	.-38     	; 0x32be <__udivmodsi4_loop>
    32e4:	60 95       	com	r22
    32e6:	70 95       	com	r23
    32e8:	80 95       	com	r24
    32ea:	90 95       	com	r25
    32ec:	9b 01       	movw	r18, r22
    32ee:	ac 01       	movw	r20, r24
    32f0:	bd 01       	movw	r22, r26
    32f2:	cf 01       	movw	r24, r30
    32f4:	08 95       	ret

000032f6 <__prologue_saves__>:
    32f6:	2f 92       	push	r2
    32f8:	3f 92       	push	r3
    32fa:	4f 92       	push	r4
    32fc:	5f 92       	push	r5
    32fe:	6f 92       	push	r6
    3300:	7f 92       	push	r7
    3302:	8f 92       	push	r8
    3304:	9f 92       	push	r9
    3306:	af 92       	push	r10
    3308:	bf 92       	push	r11
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	ca 1b       	sub	r28, r26
    3320:	db 0b       	sbc	r29, r27
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	09 94       	ijmp

0000332e <__epilogue_restores__>:
    332e:	2a 88       	ldd	r2, Y+18	; 0x12
    3330:	39 88       	ldd	r3, Y+17	; 0x11
    3332:	48 88       	ldd	r4, Y+16	; 0x10
    3334:	5f 84       	ldd	r5, Y+15	; 0x0f
    3336:	6e 84       	ldd	r6, Y+14	; 0x0e
    3338:	7d 84       	ldd	r7, Y+13	; 0x0d
    333a:	8c 84       	ldd	r8, Y+12	; 0x0c
    333c:	9b 84       	ldd	r9, Y+11	; 0x0b
    333e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3340:	b9 84       	ldd	r11, Y+9	; 0x09
    3342:	c8 84       	ldd	r12, Y+8	; 0x08
    3344:	df 80       	ldd	r13, Y+7	; 0x07
    3346:	ee 80       	ldd	r14, Y+6	; 0x06
    3348:	fd 80       	ldd	r15, Y+5	; 0x05
    334a:	0c 81       	ldd	r16, Y+4	; 0x04
    334c:	1b 81       	ldd	r17, Y+3	; 0x03
    334e:	aa 81       	ldd	r26, Y+2	; 0x02
    3350:	b9 81       	ldd	r27, Y+1	; 0x01
    3352:	ce 0f       	add	r28, r30
    3354:	d1 1d       	adc	r29, r1
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	ed 01       	movw	r28, r26
    3362:	08 95       	ret

00003364 <_exit>:
    3364:	f8 94       	cli

00003366 <__stop_program>:
    3366:	ff cf       	rjmp	.-2      	; 0x3366 <__stop_program>
