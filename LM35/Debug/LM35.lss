
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000029ba  00002a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800180  00800180  00002b6e  2**0
                  ALLOC
  3 .stab         0000276c  00000000  00000000  00002b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001594  00000000  00000000  000052dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ba30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000bc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000bf17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_1>
       8:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_2>
       c:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 14 	call	0x28de	; 0x28de <main>
      8a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <GIE_VoidEnabledGlobalInterrupt>:

#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_VoidEnabledGlobalInterrupt(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG , SREG_BIT7);
     ef2:	af e5       	ldi	r26, 0x5F	; 95
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ef e5       	ldi	r30, 0x5F	; 95
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	8c 93       	st	X, r24


}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <GIE_VoidDisabledGlobalInterrupt>:
void GIE_VoidDisabledGlobalInterrupt(void)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG , SREG_BIT7);
     f0e:	af e5       	ldi	r26, 0x5F	; 95
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ef e5       	ldi	r30, 0x5F	; 95
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 77       	andi	r24, 0x7F	; 127
     f1a:	8c 93       	st	X, r24


}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <EXTI_VoidIntit>:
static void (*EXTI_PVoidINT1NotificationFunction) (void) = NULL ;
static void (*EXTI_PVoidINT2NotificationFunction) (void) = NULL ;


void EXTI_VoidIntit( u8 Copy_U8INTNum)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <EXTI_VoidIntit+0x6>
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_U8INTNum)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3b 83       	std	Y+3, r19	; 0x03
     f38:	2a 83       	std	Y+2, r18	; 0x02
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	a1 f0       	breq	.+40     	; 0xf6c <EXTI_VoidIntit+0x4a>
     f44:	2a 81       	ldd	r18, Y+2	; 0x02
     f46:	3b 81       	ldd	r19, Y+3	; 0x03
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	d1 f0       	breq	.+52     	; 0xf82 <EXTI_VoidIntit+0x60>
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	9b 81       	ldd	r25, Y+3	; 0x03
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	01 f5       	brne	.+64     	; 0xf96 <EXTI_VoidIntit+0x74>
    {
    case EXTI_INT0:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	62 e0       	ldi	r22, 0x02	; 2
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI0_PORT,EXTI0_PIN,HIGH);
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	62 e0       	ldi	r22, 0x02	; 2
     f64:	41 e0       	ldi	r20, 0x01	; 1
     f66:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
     f6a:	15 c0       	rjmp	.+42     	; 0xf96 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT1:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	63 e0       	ldi	r22, 0x03	; 3
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI1_PORT,EXTI1_PIN,HIGH);
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	63 e0       	ldi	r22, 0x03	; 3
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
     f80:	0a c0       	rjmp	.+20     	; 0xf96 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT2:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI2_PORT,EXTI2_PIN,INPUT);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	62 e0       	ldi	r22, 0x02	; 2
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI2_PORT,EXTI2_PIN,HIGH);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	62 e0       	ldi	r22, 0x02	; 2
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
        break;
    
    default:
        break;
    }
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <EXTI_VoidEnable>:

void EXTI_VoidEnable(u8 Copy_U8Intnum)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <EXTI_VoidEnable+0x6>
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3b 83       	std	Y+3, r19	; 0x03
     fb8:	2a 83       	std	Y+2, r18	; 0x02
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	89 f0       	breq	.+34     	; 0xfe6 <EXTI_VoidEnable+0x44>
     fc4:	2a 81       	ldd	r18, Y+2	; 0x02
     fc6:	3b 81       	ldd	r19, Y+3	; 0x03
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	a1 f0       	breq	.+40     	; 0xff6 <EXTI_VoidEnable+0x54>
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	b9 f4       	brne	.+46     	; 0x1004 <EXTI_VoidEnable+0x62>
    {
    case  EXTI_INT0  :
            SET_BIT(GICR,INT0);
     fd6:	ab e5       	ldi	r26, 0x5B	; 91
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	eb e5       	ldi	r30, 0x5B	; 91
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 64       	ori	r24, 0x40	; 64
     fe2:	8c 93       	st	X, r24
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT1:
            SET_BIT(GICR,INT1);
     fe6:	ab e5       	ldi	r26, 0x5B	; 91
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	eb e5       	ldi	r30, 0x5B	; 91
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 68       	ori	r24, 0x80	; 128
     ff2:	8c 93       	st	X, r24
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT2 :
            SET_BIT(GICR,INT2);
     ff6:	ab e5       	ldi	r26, 0x5B	; 91
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e5       	ldi	r30, 0x5B	; 91
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 62       	ori	r24, 0x20	; 32
    1002:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <EXTI_VoidDisable>:
void EXTI_VoidDisable(u8 Copy_U8Intnum)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <EXTI_VoidDisable+0x6>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3b 83       	std	Y+3, r19	; 0x03
    1026:	2a 83       	std	Y+2, r18	; 0x02
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	89 f0       	breq	.+34     	; 0x1054 <EXTI_VoidDisable+0x44>
    1032:	2a 81       	ldd	r18, Y+2	; 0x02
    1034:	3b 81       	ldd	r19, Y+3	; 0x03
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	a1 f0       	breq	.+40     	; 0x1064 <EXTI_VoidDisable+0x54>
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	b9 f4       	brne	.+46     	; 0x1072 <EXTI_VoidDisable+0x62>
    {
    case  EXTI_INT0:
            CLEAR_BIT(GICR,INT0);
    1044:	ab e5       	ldi	r26, 0x5B	; 91
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	eb e5       	ldi	r30, 0x5B	; 91
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8f 7b       	andi	r24, 0xBF	; 191
    1050:	8c 93       	st	X, r24
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT1:
            CLEAR_BIT(GICR,INT1);
    1054:	ab e5       	ldi	r26, 0x5B	; 91
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	eb e5       	ldi	r30, 0x5B	; 91
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8f 77       	andi	r24, 0x7F	; 127
    1060:	8c 93       	st	X, r24
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT2:
            CLEAR_BIT(GICR,INT2);
    1064:	ab e5       	ldi	r26, 0x5B	; 91
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	eb e5       	ldi	r30, 0x5B	; 91
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 7d       	andi	r24, 0xDF	; 223
    1070:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <EXTI_VoidTriggerEdge>:
void EXTI_VoidTriggerEdge(u8 Copy_U8Intnum , u8 Copy_U8Edge)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	2a 97       	sbiw	r28, 0x0a	; 10
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_U8Intnum)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3a 87       	std	Y+10, r19	; 0x0a
    109e:	29 87       	std	Y+9, r18	; 0x09
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <EXTI_VoidTriggerEdge+0x2e>
    10aa:	66 c0       	rjmp	.+204    	; 0x1178 <EXTI_VoidTriggerEdge+0xfa>
    10ac:	29 85       	ldd	r18, Y+9	; 0x09
    10ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <EXTI_VoidTriggerEdge+0x3a>
    10b6:	bb c0       	rjmp	.+374    	; 0x122e <EXTI_VoidTriggerEdge+0x1b0>
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	09 f0       	breq	.+2      	; 0x10c2 <EXTI_VoidTriggerEdge+0x44>
    10c0:	dd c0       	rjmp	.+442    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
    {
    case  EXTI_INT0:
                switch (Copy_U8Edge)
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	38 87       	std	Y+8, r19	; 0x08
    10ca:	2f 83       	std	Y+7, r18	; 0x07
    10cc:	8f 81       	ldd	r24, Y+7	; 0x07
    10ce:	98 85       	ldd	r25, Y+8	; 0x08
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	21 f1       	breq	.+72     	; 0x111e <EXTI_VoidTriggerEdge+0xa0>
    10d6:	2f 81       	ldd	r18, Y+7	; 0x07
    10d8:	38 85       	ldd	r19, Y+8	; 0x08
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <EXTI_VoidTriggerEdge+0x6c>
    10e0:	8f 81       	ldd	r24, Y+7	; 0x07
    10e2:	98 85       	ldd	r25, Y+8	; 0x08
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	61 f0       	breq	.+24     	; 0x1100 <EXTI_VoidTriggerEdge+0x82>
    10e8:	c9 c0       	rjmp	.+402    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
    10ea:	2f 81       	ldd	r18, Y+7	; 0x07
    10ec:	38 85       	ldd	r19, Y+8	; 0x08
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	21 f1       	breq	.+72     	; 0x113c <EXTI_VoidTriggerEdge+0xbe>
    10f4:	8f 81       	ldd	r24, Y+7	; 0x07
    10f6:	98 85       	ldd	r25, Y+8	; 0x08
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	71 f1       	breq	.+92     	; 0x115a <EXTI_VoidTriggerEdge+0xdc>
    10fe:	be c0       	rjmp	.+380    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC00);
    1100:	a5 e5       	ldi	r26, 0x55	; 85
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e5       	ldi	r30, 0x55	; 85
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    110e:	a5 e5       	ldi	r26, 0x55	; 85
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e5       	ldi	r30, 0x55	; 85
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8d 7f       	andi	r24, 0xFD	; 253
    111a:	8c 93       	st	X, r24
    111c:	af c0       	rjmp	.+350    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC00);
    111e:	a5 e5       	ldi	r26, 0x55	; 85
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e5       	ldi	r30, 0x55	; 85
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	81 60       	ori	r24, 0x01	; 1
    112a:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    112c:	a5 e5       	ldi	r26, 0x55	; 85
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8d 7f       	andi	r24, 0xFD	; 253
    1138:	8c 93       	st	X, r24
    113a:	a0 c0       	rjmp	.+320    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC00);
    113c:	a5 e5       	ldi	r26, 0x55	; 85
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e5       	ldi	r30, 0x55	; 85
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    114a:	a5 e5       	ldi	r26, 0x55	; 85
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	8c 93       	st	X, r24
    1158:	91 c0       	rjmp	.+290    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC00);
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	81 60       	ori	r24, 0x01	; 1
    1166:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    1168:	a5 e5       	ldi	r26, 0x55	; 85
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e5       	ldi	r30, 0x55	; 85
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	8c 93       	st	X, r24
    1176:	82 c0       	rjmp	.+260    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT1:
                switch (Copy_U8Edge)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	3e 83       	std	Y+6, r19	; 0x06
    1180:	2d 83       	std	Y+5, r18	; 0x05
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	91 05       	cpc	r25, r1
    118a:	21 f1       	breq	.+72     	; 0x11d4 <EXTI_VoidTriggerEdge+0x156>
    118c:	2d 81       	ldd	r18, Y+5	; 0x05
    118e:	3e 81       	ldd	r19, Y+6	; 0x06
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	2c f4       	brge	.+10     	; 0x11a0 <EXTI_VoidTriggerEdge+0x122>
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	61 f0       	breq	.+24     	; 0x11b6 <EXTI_VoidTriggerEdge+0x138>
    119e:	6e c0       	rjmp	.+220    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
    11a0:	2d 81       	ldd	r18, Y+5	; 0x05
    11a2:	3e 81       	ldd	r19, Y+6	; 0x06
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	21 f1       	breq	.+72     	; 0x11f2 <EXTI_VoidTriggerEdge+0x174>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	71 f1       	breq	.+92     	; 0x1210 <EXTI_VoidTriggerEdge+0x192>
    11b4:	63 c0       	rjmp	.+198    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC10);
    11b6:	a5 e5       	ldi	r26, 0x55	; 85
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e5       	ldi	r30, 0x55	; 85
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8b 7f       	andi	r24, 0xFB	; 251
    11c2:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    11c4:	a5 e5       	ldi	r26, 0x55	; 85
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e5       	ldi	r30, 0x55	; 85
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	87 7f       	andi	r24, 0xF7	; 247
    11d0:	8c 93       	st	X, r24
    11d2:	54 c0       	rjmp	.+168    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC10);
    11d4:	a5 e5       	ldi	r26, 0x55	; 85
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e5 e5       	ldi	r30, 0x55	; 85
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	84 60       	ori	r24, 0x04	; 4
    11e0:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    11e2:	a5 e5       	ldi	r26, 0x55	; 85
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e5       	ldi	r30, 0x55	; 85
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	8c 93       	st	X, r24
    11f0:	45 c0       	rjmp	.+138    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC10);
    11f2:	a5 e5       	ldi	r26, 0x55	; 85
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e5 e5       	ldi	r30, 0x55	; 85
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8b 7f       	andi	r24, 0xFB	; 251
    11fe:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    1200:	a5 e5       	ldi	r26, 0x55	; 85
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e5       	ldi	r30, 0x55	; 85
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	88 60       	ori	r24, 0x08	; 8
    120c:	8c 93       	st	X, r24
    120e:	36 c0       	rjmp	.+108    	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC10);
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	84 60       	ori	r24, 0x04	; 4
    121c:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	88 60       	ori	r24, 0x08	; 8
    122a:	8c 93       	st	X, r24
    122c:	27 c0       	rjmp	.+78     	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT2:
                switch (Copy_U8Edge)
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3c 83       	std	Y+4, r19	; 0x04
    1236:	2b 83       	std	Y+3, r18	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	91 05       	cpc	r25, r1
    1240:	31 f0       	breq	.+12     	; 0x124e <EXTI_VoidTriggerEdge+0x1d0>
    1242:	2b 81       	ldd	r18, Y+3	; 0x03
    1244:	3c 81       	ldd	r19, Y+4	; 0x04
    1246:	23 30       	cpi	r18, 0x03	; 3
    1248:	31 05       	cpc	r19, r1
    124a:	49 f0       	breq	.+18     	; 0x125e <EXTI_VoidTriggerEdge+0x1e0>
    124c:	10 c0       	rjmp	.+32     	; 0x126e <EXTI_VoidTriggerEdge+0x1f0>
                {
            
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCSR,ISC2);
    124e:	a4 e5       	ldi	r26, 0x54	; 84
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e4 e5       	ldi	r30, 0x54	; 84
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8f 7b       	andi	r24, 0xBF	; 191
    125a:	8c 93       	st	X, r24
    125c:	0f c0       	rjmp	.+30     	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                        
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCSR,ISC2);
    125e:	a4 e5       	ldi	r26, 0x54	; 84
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e5       	ldi	r30, 0x54	; 84
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 64       	ori	r24, 0x40	; 64
    126a:	8c 93       	st	X, r24
    126c:	07 c0       	rjmp	.+14     	; 0x127c <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                
                     default:
                            CLEAR_BIT(MCUCSR,ISC2);
    126e:	a4 e5       	ldi	r26, 0x54	; 84
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e5       	ldi	r30, 0x54	; 84
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7b       	andi	r24, 0xBF	; 191
    127a:	8c 93       	st	X, r24
            break;
    
        default:
        break;
    }
}
    127c:	2a 96       	adiw	r28, 0x0a	; 10
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <EXTI_VoidINT0SetCallBack>:

//function to take adress of user function  for EXTI0
void EXTI_VoidINT0SetCallBack(void (*NotificationFunction) (void))
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <EXTI_VoidINT0SetCallBack+0x6>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user 
    EXTI_PVoidINT0NotificationFunction=NotificationFunction ;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	90 93 81 01 	sts	0x0181, r25
    12a4:	80 93 80 01 	sts	0x0180, r24
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <__vector_1>:
//TELL LINKER OPTMIZER that function change within hardware donts delete it  
void __vector_1 (void)  __attribute__ ((signal)) ; 
//function implemention that takes global pointer to function and execute it  
// we can make macro to #define EXTI0_vector    __vector_1
void __vector_1 (void)
{   
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
     /*check if user didnot write function for interrupt if no ISR FOR INTERRUPT 
     THEN INTERRUPT WILL GO TO 0 ADDRESS AND RESTART THE PROGRAM SO WE CHECK FIRST*/
    if (EXTI_PVoidINT0NotificationFunction != NULL)
    12dc:	80 91 80 01 	lds	r24, 0x0180
    12e0:	90 91 81 01 	lds	r25, 0x0181
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <__vector_1+0x40>
    {
        //execute function
        EXTI_PVoidINT0NotificationFunction();
    12e8:	e0 91 80 01 	lds	r30, 0x0180
    12ec:	f0 91 81 01 	lds	r31, 0x0181
    12f0:	09 95       	icall
    }
    
    
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <EXTI_VoidINT1SetCallBack>:

//function to take adress of user function  for EXTI1
void EXTI_VoidINT1SetCallBack(void (*NotificationFunction) (void))
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <EXTI_VoidINT1SetCallBack+0x6>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user
    EXTI_PVoidINT1NotificationFunction=NotificationFunction ;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	90 93 83 01 	sts	0x0183, r25
    132e:	80 93 82 01 	sts	0x0182, r24
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <__vector_2>:
//ISR for INT1
//TELL LINKER OPTMIZER that function change within hardware donts delete it
void __vector_2(void) __attribute__((signal));
//function implemention that takes global pointer to function and execute it 
void __vector_2(void)
{
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    /*check if user didnot write function for interrupt if no ISR FOR INTERRUPT 
     THEN INTERRUPT WILL GO TO 0 ADDRESS AND RESTART THE PROGRAM SO WE CHECK FIRST*/
    if (EXTI_PVoidINT1NotificationFunction != NULL)
    1366:	80 91 82 01 	lds	r24, 0x0182
    136a:	90 91 83 01 	lds	r25, 0x0183
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	29 f0       	breq	.+10     	; 0x137c <__vector_2+0x40>
    {
        //execute function
        EXTI_PVoidINT1NotificationFunction();
    1372:	e0 91 82 01 	lds	r30, 0x0182
    1376:	f0 91 83 01 	lds	r31, 0x0183
    137a:	09 95       	icall
    }
}
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	ff 91       	pop	r31
    1382:	ef 91       	pop	r30
    1384:	bf 91       	pop	r27
    1386:	af 91       	pop	r26
    1388:	9f 91       	pop	r25
    138a:	8f 91       	pop	r24
    138c:	7f 91       	pop	r23
    138e:	6f 91       	pop	r22
    1390:	5f 91       	pop	r21
    1392:	4f 91       	pop	r20
    1394:	3f 91       	pop	r19
    1396:	2f 91       	pop	r18
    1398:	0f 90       	pop	r0
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	0f 90       	pop	r0
    139e:	1f 90       	pop	r1
    13a0:	18 95       	reti

000013a2 <EXTI_VoidINT2SetCallBack>:

void EXTI_VoidINT2SetCallBack (void (*NotificationFunction) (void))
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <EXTI_VoidINT2SetCallBack+0x6>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    EXTI_PVoidINT2NotificationFunction=NotificationFunction;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	90 93 85 01 	sts	0x0185, r25
    13b8:	80 93 84 01 	sts	0x0184, r24
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <__vector_3>:

void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void)
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	2f 93       	push	r18
    13d2:	3f 93       	push	r19
    13d4:	4f 93       	push	r20
    13d6:	5f 93       	push	r21
    13d8:	6f 93       	push	r22
    13da:	7f 93       	push	r23
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	af 93       	push	r26
    13e2:	bf 93       	push	r27
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
   /*check if user didnot write function for interrupt if no ISR FOR INTERRUPT 
     THEN INTERRUPT WILL GO TO 0 ADDRESS AND RESTART THE PROGRAM SO WE CHECK FIRST*/
    if (EXTI_PVoidINT2NotificationFunction != NULL)
    13f0:	80 91 84 01 	lds	r24, 0x0184
    13f4:	90 91 85 01 	lds	r25, 0x0185
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	29 f0       	breq	.+10     	; 0x1406 <__vector_3+0x40>
    {
        //execute function
        EXTI_PVoidINT2NotificationFunction();
    13fc:	e0 91 84 01 	lds	r30, 0x0184
    1400:	f0 91 85 01 	lds	r31, 0x0185
    1404:	09 95       	icall
    }
}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <DIO_voidSetPinDirection>:
/*Self files INclusions in the same sequence  */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void 	DIO_voidSetPinDirection(u8 Copy_U8PortNmame , u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_voidSetPinDirection+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <DIO_voidSetPinDirection+0x8>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	6a 83       	std	Y+2, r22	; 0x02
    143e:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8PortNmame)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3d 83       	std	Y+5, r19	; 0x05
    1448:	2c 83       	std	Y+4, r18	; 0x04
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <DIO_voidSetPinDirection+0x2a>
    1454:	47 c0       	rjmp	.+142    	; 0x14e4 <DIO_voidSetPinDirection+0xb8>
    1456:	2c 81       	ldd	r18, Y+4	; 0x04
    1458:	3d 81       	ldd	r19, Y+5	; 0x05
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <DIO_voidSetPinDirection+0x3e>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	71 f0       	breq	.+28     	; 0x1484 <DIO_voidSetPinDirection+0x58>
    1468:	cb c0       	rjmp	.+406    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
    146a:	2c 81       	ldd	r18, Y+4	; 0x04
    146c:	3d 81       	ldd	r19, Y+5	; 0x05
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <DIO_voidSetPinDirection+0x4a>
    1474:	67 c0       	rjmp	.+206    	; 0x1544 <DIO_voidSetPinDirection+0x118>
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <DIO_voidSetPinDirection+0x56>
    1480:	91 c0       	rjmp	.+290    	; 0x15a4 <DIO_voidSetPinDirection+0x178>
    1482:	be c0       	rjmp	.+380    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	a1 f4       	brne	.+40     	; 0x14b2 <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA , Copy_u8PinNumber);
    148a:	aa e3       	ldi	r26, 0x3A	; 58
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ea e3       	ldi	r30, 0x3A	; 58
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_voidSetPinDirection+0x7c>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_voidSetPinDirection+0x78>
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	a7 c0       	rjmp	.+334    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	88 23       	and	r24, r24
    14b6:	09 f0       	breq	.+2      	; 0x14ba <DIO_voidSetPinDirection+0x8e>
    14b8:	a3 c0       	rjmp	.+326    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRA , Copy_u8PinNumber);
    14ba:	aa e3       	ldi	r26, 0x3A	; 58
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ea e3       	ldi	r30, 0x3A	; 58
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_voidSetPinDirection+0xac>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_voidSetPinDirection+0xa8>
    14dc:	80 95       	com	r24
    14de:	84 23       	and	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	8e c0       	rjmp	.+284    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	a1 f4       	brne	.+40     	; 0x1512 <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB , Copy_u8PinNumber);
    14ea:	a7 e3       	ldi	r26, 0x37	; 55
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e7 e3       	ldi	r30, 0x37	; 55
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_voidSetPinDirection+0xdc>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_voidSetPinDirection+0xd8>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	77 c0       	rjmp	.+238    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	88 23       	and	r24, r24
    1516:	09 f0       	breq	.+2      	; 0x151a <DIO_voidSetPinDirection+0xee>
    1518:	73 c0       	rjmp	.+230    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRB , Copy_u8PinNumber);
    151a:	a7 e3       	ldi	r26, 0x37	; 55
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e7 e3       	ldi	r30, 0x37	; 55
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_voidSetPinDirection+0x10c>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_voidSetPinDirection+0x108>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	5e c0       	rjmp	.+188    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	a1 f4       	brne	.+40     	; 0x1572 <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC , Copy_u8PinNumber);
    154a:	a4 e3       	ldi	r26, 0x34	; 52
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e4 e3       	ldi	r30, 0x34	; 52
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_voidSetPinDirection+0x13c>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_voidSetPinDirection+0x138>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	47 c0       	rjmp	.+142    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 23       	and	r24, r24
    1576:	09 f0       	breq	.+2      	; 0x157a <DIO_voidSetPinDirection+0x14e>
    1578:	43 c0       	rjmp	.+134    	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRC , Copy_u8PinNumber);
    157a:	a4 e3       	ldi	r26, 0x34	; 52
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e4 e3       	ldi	r30, 0x34	; 52
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_voidSetPinDirection+0x16c>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_voidSetPinDirection+0x168>
    159c:	80 95       	com	r24
    159e:	84 23       	and	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	2e c0       	rjmp	.+92     	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	a1 f4       	brne	.+40     	; 0x15d2 <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD , Copy_u8PinNumber);
    15aa:	a1 e3       	ldi	r26, 0x31	; 49
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e1 e3       	ldi	r30, 0x31	; 49
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_voidSetPinDirection+0x19c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_voidSetPinDirection+0x198>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	17 c0       	rjmp	.+46     	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 23       	and	r24, r24
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRD , Copy_u8PinNumber);
    15d8:	a1 e3       	ldi	r26, 0x31	; 49
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e1 e3       	ldi	r30, 0x31	; 49
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_voidSetPinDirection+0x1ca>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_voidSetPinDirection+0x1c6>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
	
	default:
			//do no thing 
		break;
	}
}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_U8PinState)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	2d 97       	sbiw	r28, 0x0d	; 13
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	6a 83       	std	Y+2, r22	; 0x02
    1628:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8PortNumber)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	3d 87       	std	Y+13, r19	; 0x0d
    1632:	2c 87       	std	Y+12, r18	; 0x0c
    1634:	8c 85       	ldd	r24, Y+12	; 0x0c
    1636:	9d 85       	ldd	r25, Y+13	; 0x0d
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	91 05       	cpc	r25, r1
    163c:	09 f4       	brne	.+2      	; 0x1640 <DIO_VoidSetPinValue+0x30>
    163e:	4f c0       	rjmp	.+158    	; 0x16de <DIO_VoidSetPinValue+0xce>
    1640:	2c 85       	ldd	r18, Y+12	; 0x0c
    1642:	3d 85       	ldd	r19, Y+13	; 0x0d
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	2c f4       	brge	.+10     	; 0x1654 <DIO_VoidSetPinValue+0x44>
    164a:	8c 85       	ldd	r24, Y+12	; 0x0c
    164c:	9d 85       	ldd	r25, Y+13	; 0x0d
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	71 f0       	breq	.+28     	; 0x166e <DIO_VoidSetPinValue+0x5e>
    1652:	ec c0       	rjmp	.+472    	; 0x182c <DIO_VoidSetPinValue+0x21c>
    1654:	2c 85       	ldd	r18, Y+12	; 0x0c
    1656:	3d 85       	ldd	r19, Y+13	; 0x0d
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	09 f4       	brne	.+2      	; 0x1660 <DIO_VoidSetPinValue+0x50>
    165e:	77 c0       	rjmp	.+238    	; 0x174e <DIO_VoidSetPinValue+0x13e>
    1660:	8c 85       	ldd	r24, Y+12	; 0x0c
    1662:	9d 85       	ldd	r25, Y+13	; 0x0d
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	91 05       	cpc	r25, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <DIO_VoidSetPinValue+0x5c>
    166a:	a9 c0       	rjmp	.+338    	; 0x17be <DIO_VoidSetPinValue+0x1ae>
    166c:	df c0       	rjmp	.+446    	; 0x182c <DIO_VoidSetPinValue+0x21c>
	{
		case DIO_PORTA :
			switch(Copy_U8PinState)
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3b 87       	std	Y+11, r19	; 0x0b
    1676:	2a 87       	std	Y+10, r18	; 0x0a
    1678:	8a 85       	ldd	r24, Y+10	; 0x0a
    167a:	9b 85       	ldd	r25, Y+11	; 0x0b
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	31 f0       	breq	.+12     	; 0x168c <DIO_VoidSetPinValue+0x7c>
    1680:	2a 85       	ldd	r18, Y+10	; 0x0a
    1682:	3b 85       	ldd	r19, Y+11	; 0x0b
    1684:	21 30       	cpi	r18, 0x01	; 1
    1686:	31 05       	cpc	r19, r1
    1688:	b1 f0       	breq	.+44     	; 0x16b6 <DIO_VoidSetPinValue+0xa6>
    168a:	d0 c0       	rjmp	.+416    	; 0x182c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTA , Copy_u8PinNumber );
    168c:	ab e3       	ldi	r26, 0x3B	; 59
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e3       	ldi	r30, 0x3B	; 59
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <DIO_VoidSetPinValue+0x9a>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <DIO_VoidSetPinValue+0x96>
    16ae:	80 95       	com	r24
    16b0:	84 23       	and	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	bb c0       	rjmp	.+374    	; 0x182c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTA , Copy_u8PinNumber );
    16b6:	ab e3       	ldi	r26, 0x3B	; 59
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	eb e3       	ldi	r30, 0x3B	; 59
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_VoidSetPinValue+0xc4>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_VoidSetPinValue+0xc0>
    16d8:	84 2b       	or	r24, r20
    16da:	8c 93       	st	X, r24
    16dc:	a7 c0       	rjmp	.+334    	; 0x182c <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTB :
			switch(Copy_U8PinState)
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	39 87       	std	Y+9, r19	; 0x09
    16e6:	28 87       	std	Y+8, r18	; 0x08
    16e8:	88 85       	ldd	r24, Y+8	; 0x08
    16ea:	99 85       	ldd	r25, Y+9	; 0x09
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	31 f0       	breq	.+12     	; 0x16fc <DIO_VoidSetPinValue+0xec>
    16f0:	28 85       	ldd	r18, Y+8	; 0x08
    16f2:	39 85       	ldd	r19, Y+9	; 0x09
    16f4:	21 30       	cpi	r18, 0x01	; 1
    16f6:	31 05       	cpc	r19, r1
    16f8:	b1 f0       	breq	.+44     	; 0x1726 <DIO_VoidSetPinValue+0x116>
    16fa:	98 c0       	rjmp	.+304    	; 0x182c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTB , Copy_u8PinNumber );
    16fc:	a8 e3       	ldi	r26, 0x38	; 56
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e8 e3       	ldi	r30, 0x38	; 56
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_VoidSetPinValue+0x10a>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_VoidSetPinValue+0x106>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	83 c0       	rjmp	.+262    	; 0x182c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTB , Copy_u8PinNumber );
    1726:	a8 e3       	ldi	r26, 0x38	; 56
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_VoidSetPinValue+0x134>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_VoidSetPinValue+0x130>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	6f c0       	rjmp	.+222    	; 0x182c <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTC :
			switch(Copy_U8PinState)
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3f 83       	std	Y+7, r19	; 0x07
    1756:	2e 83       	std	Y+6, r18	; 0x06
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	9f 81       	ldd	r25, Y+7	; 0x07
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	31 f0       	breq	.+12     	; 0x176c <DIO_VoidSetPinValue+0x15c>
    1760:	2e 81       	ldd	r18, Y+6	; 0x06
    1762:	3f 81       	ldd	r19, Y+7	; 0x07
    1764:	21 30       	cpi	r18, 0x01	; 1
    1766:	31 05       	cpc	r19, r1
    1768:	b1 f0       	breq	.+44     	; 0x1796 <DIO_VoidSetPinValue+0x186>
    176a:	60 c0       	rjmp	.+192    	; 0x182c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTC , Copy_u8PinNumber );
    176c:	a5 e3       	ldi	r26, 0x35	; 53
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e5 e3       	ldi	r30, 0x35	; 53
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_VoidSetPinValue+0x17a>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_VoidSetPinValue+0x176>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	4b c0       	rjmp	.+150    	; 0x182c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTC , Copy_u8PinNumber );
    1796:	a5 e3       	ldi	r26, 0x35	; 53
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e3       	ldi	r30, 0x35	; 53
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_VoidSetPinValue+0x1a4>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_VoidSetPinValue+0x1a0>
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	37 c0       	rjmp	.+110    	; 0x182c <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTD :
			switch(Copy_U8PinState)
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3d 83       	std	Y+5, r19	; 0x05
    17c6:	2c 83       	std	Y+4, r18	; 0x04
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	31 f0       	breq	.+12     	; 0x17dc <DIO_VoidSetPinValue+0x1cc>
    17d0:	2c 81       	ldd	r18, Y+4	; 0x04
    17d2:	3d 81       	ldd	r19, Y+5	; 0x05
    17d4:	21 30       	cpi	r18, 0x01	; 1
    17d6:	31 05       	cpc	r19, r1
    17d8:	b1 f0       	breq	.+44     	; 0x1806 <DIO_VoidSetPinValue+0x1f6>
    17da:	28 c0       	rjmp	.+80     	; 0x182c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTD , Copy_u8PinNumber );
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_VoidSetPinValue+0x1ea>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_VoidSetPinValue+0x1e6>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	13 c0       	rjmp	.+38     	; 0x182c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTD , Copy_u8PinNumber );
    1806:	a2 e3       	ldi	r26, 0x32	; 50
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e2 e3       	ldi	r30, 0x32	; 50
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_VoidSetPinValue+0x214>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_VoidSetPinValue+0x210>
    1828:	84 2b       	or	r24, r20
    182a:	8c 93       	st	X, r24
	
	default:
			// Do nothing 
		break;
	}
}
    182c:	2d 96       	adiw	r28, 0x0d	; 13
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <DIO_VoidGetPinValue>:

u8  DIO_VoidGetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <DIO_VoidGetPinValue+0x6>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <DIO_VoidGetPinValue+0x8>
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	8a 83       	std	Y+2, r24	; 0x02
    184e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue =0 ;
    1850:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PortName)
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3d 83       	std	Y+5, r19	; 0x05
    185a:	2c 83       	std	Y+4, r18	; 0x04
    185c:	4c 81       	ldd	r20, Y+4	; 0x04
    185e:	5d 81       	ldd	r21, Y+5	; 0x05
    1860:	41 30       	cpi	r20, 0x01	; 1
    1862:	51 05       	cpc	r21, r1
    1864:	41 f1       	breq	.+80     	; 0x18b6 <DIO_VoidGetPinValue+0x78>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	91 05       	cpc	r25, r1
    186e:	34 f4       	brge	.+12     	; 0x187c <DIO_VoidGetPinValue+0x3e>
    1870:	2c 81       	ldd	r18, Y+4	; 0x04
    1872:	3d 81       	ldd	r19, Y+5	; 0x05
    1874:	21 15       	cp	r18, r1
    1876:	31 05       	cpc	r19, r1
    1878:	61 f0       	breq	.+24     	; 0x1892 <DIO_VoidGetPinValue+0x54>
    187a:	52 c0       	rjmp	.+164    	; 0x1920 <DIO_VoidGetPinValue+0xe2>
    187c:	4c 81       	ldd	r20, Y+4	; 0x04
    187e:	5d 81       	ldd	r21, Y+5	; 0x05
    1880:	42 30       	cpi	r20, 0x02	; 2
    1882:	51 05       	cpc	r21, r1
    1884:	51 f1       	breq	.+84     	; 0x18da <DIO_VoidGetPinValue+0x9c>
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	b9 f1       	breq	.+110    	; 0x18fe <DIO_VoidGetPinValue+0xc0>
    1890:	47 c0       	rjmp	.+142    	; 0x1920 <DIO_VoidGetPinValue+0xe2>
	{
		case DIO_PORTA :
			Local_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    1892:	eb e3       	ldi	r30, 0x3B	; 59
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a9 01       	movw	r20, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_VoidGetPinValue+0x6c>
    18a6:	55 95       	asr	r21
    18a8:	47 95       	ror	r20
    18aa:	8a 95       	dec	r24
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_VoidGetPinValue+0x68>
    18ae:	ca 01       	movw	r24, r20
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	35 c0       	rjmp	.+106    	; 0x1920 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTB :
			Local_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    18b6:	e8 e3       	ldi	r30, 0x38	; 56
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a9 01       	movw	r20, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_VoidGetPinValue+0x90>
    18ca:	55 95       	asr	r21
    18cc:	47 95       	ror	r20
    18ce:	8a 95       	dec	r24
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_VoidGetPinValue+0x8c>
    18d2:	ca 01       	movw	r24, r20
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	23 c0       	rjmp	.+70     	; 0x1920 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTC :
			Local_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    18da:	e5 e3       	ldi	r30, 0x35	; 53
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a9 01       	movw	r20, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <DIO_VoidGetPinValue+0xb4>
    18ee:	55 95       	asr	r21
    18f0:	47 95       	ror	r20
    18f2:	8a 95       	dec	r24
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <DIO_VoidGetPinValue+0xb0>
    18f6:	ca 01       	movw	r24, r20
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	11 c0       	rjmp	.+34     	; 0x1920 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTD :
			Local_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a9 01       	movw	r20, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_VoidGetPinValue+0xd8>
    1912:	55 95       	asr	r21
    1914:	47 95       	ror	r20
    1916:	8a 95       	dec	r24
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_VoidGetPinValue+0xd4>
    191a:	ca 01       	movw	r24, r20
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	89 83       	std	Y+1, r24	; 0x01
	
		default:
				//Do nothing
			break;
	}
	return Local_u8PinValue;
    1920:	89 81       	ldd	r24, Y+1	; 0x01
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_U8PortName , u8  Copy_U8PortState)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <DIO_VoidSetPortDirection+0x6>
    1938:	00 d0       	rcall	.+0      	; 0x193a <DIO_VoidSetPortDirection+0x8>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3c 83       	std	Y+4, r19	; 0x04
    194a:	2b 83       	std	Y+3, r18	; 0x03
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	21 f1       	breq	.+72     	; 0x199e <DIO_VoidSetPortDirection+0x6c>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	2c f4       	brge	.+10     	; 0x196a <DIO_VoidSetPortDirection+0x38>
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 f0       	breq	.+24     	; 0x1980 <DIO_VoidSetPortDirection+0x4e>
    1968:	46 c0       	rjmp	.+140    	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
    196a:	2b 81       	ldd	r18, Y+3	; 0x03
    196c:	3c 81       	ldd	r19, Y+4	; 0x04
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	21 f1       	breq	.+72     	; 0x19bc <DIO_VoidSetPortDirection+0x8a>
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	71 f1       	breq	.+92     	; 0x19da <DIO_VoidSetPortDirection+0xa8>
    197e:	3b c0       	rjmp	.+118    	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
	{
		case DIO_PORTA :
			if(Copy_U8PortState==OUTPUT)
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	29 f4       	brne	.+10     	; 0x1990 <DIO_VoidSetPortDirection+0x5e>
			{
				SET_REG(DDRA);
    1986:	ea e3       	ldi	r30, 0x3A	; 58
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	80 83       	st	Z, r24
    198e:	33 c0       	rjmp	.+102    	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	88 23       	and	r24, r24
    1994:	81 f5       	brne	.+96     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRA);
    1996:	ea e3       	ldi	r30, 0x3A	; 58
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	10 82       	st	Z, r1
    199c:	2c c0       	rjmp	.+88     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTB :
			if(Copy_U8PortState==OUTPUT)
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	29 f4       	brne	.+10     	; 0x19ae <DIO_VoidSetPortDirection+0x7c>
			{
				SET_REG(DDRB);
    19a4:	e7 e3       	ldi	r30, 0x37	; 55
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8f ef       	ldi	r24, 0xFF	; 255
    19aa:	80 83       	st	Z, r24
    19ac:	24 c0       	rjmp	.+72     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	88 23       	and	r24, r24
    19b2:	09 f5       	brne	.+66     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRB);
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	10 82       	st	Z, r1
    19ba:	1d c0       	rjmp	.+58     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTC :
			if(Copy_U8PortState==OUTPUT)
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	29 f4       	brne	.+10     	; 0x19cc <DIO_VoidSetPortDirection+0x9a>
			{
				SET_REG(DDRC);
    19c2:	e4 e3       	ldi	r30, 0x34	; 52
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	80 83       	st	Z, r24
    19ca:	15 c0       	rjmp	.+42     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	88 23       	and	r24, r24
    19d0:	91 f4       	brne	.+36     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRC);
    19d2:	e4 e3       	ldi	r30, 0x34	; 52
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	10 82       	st	Z, r1
    19d8:	0e c0       	rjmp	.+28     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTD :
			if(Copy_U8PortState==OUTPUT)
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	29 f4       	brne	.+10     	; 0x19ea <DIO_VoidSetPortDirection+0xb8>
			{
				SET_REG(DDRD);
    19e0:	e1 e3       	ldi	r30, 0x31	; 49
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	8f ef       	ldi	r24, 0xFF	; 255
    19e6:	80 83       	st	Z, r24
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	88 23       	and	r24, r24
    19ee:	19 f4       	brne	.+6      	; 0x19f6 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRD);
    19f0:	e1 e3       	ldi	r30, 0x31	; 49
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	10 82       	st	Z, r1
		default:
			//do no thing
			break;

	}
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <DIO_VOidTogglePortValue>:
void DIO_VOidTogglePortValue(u8 Copy_U8PortName)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <DIO_VOidTogglePortValue+0x6>
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	3b 83       	std	Y+3, r19	; 0x03
    1a1a:	2a 83       	std	Y+2, r18	; 0x02
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	91 05       	cpc	r25, r1
    1a24:	e9 f0       	breq	.+58     	; 0x1a60 <DIO_VOidTogglePortValue+0x5c>
    1a26:	2a 81       	ldd	r18, Y+2	; 0x02
    1a28:	3b 81       	ldd	r19, Y+3	; 0x03
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <DIO_VOidTogglePortValue+0x36>
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	9b 81       	ldd	r25, Y+3	; 0x03
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <DIO_VOidTogglePortValue+0x4c>
    1a38:	2a c0       	rjmp	.+84     	; 0x1a8e <DIO_VOidTogglePortValue+0x8a>
    1a3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	b1 f0       	breq	.+44     	; 0x1a70 <DIO_VOidTogglePortValue+0x6c>
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	9b 81       	ldd	r25, Y+3	; 0x03
    1a48:	83 30       	cpi	r24, 0x03	; 3
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	c9 f0       	breq	.+50     	; 0x1a80 <DIO_VOidTogglePortValue+0x7c>
    1a4e:	1f c0       	rjmp	.+62     	; 0x1a8e <DIO_VOidTogglePortValue+0x8a>
	{
		case DIO_PORTA :
			TOGGLE_REG(PORTA);
    1a50:	ab e3       	ldi	r26, 0x3B	; 59
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	eb e3       	ldi	r30, 0x3B	; 59
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 95       	com	r24
    1a5c:	8c 93       	st	X, r24
    1a5e:	17 c0       	rjmp	.+46     	; 0x1a8e <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTB :
			TOGGLE_REG(PORTB);
    1a60:	a8 e3       	ldi	r26, 0x38	; 56
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e8 e3       	ldi	r30, 0x38	; 56
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 95       	com	r24
    1a6c:	8c 93       	st	X, r24
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTC :
			TOGGLE_REG(PORTC);
    1a70:	a5 e3       	ldi	r26, 0x35	; 53
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e5 e3       	ldi	r30, 0x35	; 53
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	80 95       	com	r24
    1a7c:	8c 93       	st	X, r24
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTD :
			TOGGLE_REG(PORTD);
    1a80:	a2 e3       	ldi	r26, 0x32	; 50
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e2 e3       	ldi	r30, 0x32	; 50
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 95       	com	r24
    1a8c:	8c 93       	st	X, r24
			//do no thing
			break;

	}

}
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <DIO_VoidSetSpacificvalue>:
void DIO_VoidSetSpacificvalue(u8 Copy_U8PortName , u8 Copy_U8Value)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <DIO_VoidSetSpacificvalue+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_VoidSetSpacificvalue+0x8>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3c 83       	std	Y+4, r19	; 0x04
    1ab2:	2b 83       	std	Y+3, r18	; 0x03
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	91 05       	cpc	r25, r1
    1abc:	d1 f0       	breq	.+52     	; 0x1af2 <DIO_VoidSetSpacificvalue+0x58>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <DIO_VoidSetSpacificvalue+0x38>
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <DIO_VoidSetSpacificvalue+0x4e>
    1ad0:	1e c0       	rjmp	.+60     	; 0x1b0e <DIO_VoidSetSpacificvalue+0x74>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	81 f0       	breq	.+32     	; 0x1afc <DIO_VoidSetSpacificvalue+0x62>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	81 f0       	breq	.+32     	; 0x1b06 <DIO_VoidSetSpacificvalue+0x6c>
    1ae6:	13 c0       	rjmp	.+38     	; 0x1b0e <DIO_VoidSetSpacificvalue+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(PORTA,Copy_U8Value);
    1ae8:	eb e3       	ldi	r30, 0x3B	; 59
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	80 83       	st	Z, r24
    1af0:	0e c0       	rjmp	.+28     	; 0x1b0e <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(PORTB,Copy_U8Value);
    1af2:	e8 e3       	ldi	r30, 0x38	; 56
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 83       	st	Z, r24
    1afa:	09 c0       	rjmp	.+18     	; 0x1b0e <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(PORTC,Copy_U8Value);
    1afc:	e5 e3       	ldi	r30, 0x35	; 53
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	80 83       	st	Z, r24
    1b04:	04 c0       	rjmp	.+8      	; 0x1b0e <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(PORTD,Copy_U8Value);
    1b06:	e2 e3       	ldi	r30, 0x32	; 50
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <DIO_U8GetPortValue>:
u8 DIO_U8GetPortValue(u8 Copy_U8PortName )
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <DIO_U8GetPortValue+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <DIO_U8GetPortValue+0x8>
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	3c 83       	std	Y+4, r19	; 0x04
    1b34:	2b 83       	std	Y+3, r18	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	d1 f0       	breq	.+52     	; 0x1b74 <DIO_U8GetPortValue+0x58>
    1b40:	2b 81       	ldd	r18, Y+3	; 0x03
    1b42:	3c 81       	ldd	r19, Y+4	; 0x04
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <DIO_U8GetPortValue+0x38>
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	61 f0       	breq	.+24     	; 0x1b6a <DIO_U8GetPortValue+0x4e>
    1b52:	1f c0       	rjmp	.+62     	; 0x1b92 <DIO_U8GetPortValue+0x76>
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	3c 81       	ldd	r19, Y+4	; 0x04
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	81 f0       	breq	.+32     	; 0x1b7e <DIO_U8GetPortValue+0x62>
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	83 30       	cpi	r24, 0x03	; 3
    1b64:	91 05       	cpc	r25, r1
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <DIO_U8GetPortValue+0x6c>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <DIO_U8GetPortValue+0x76>
	{
		case DIO_PORTA :
			return PINA;
    1b6a:	e9 e3       	ldi	r30, 0x39	; 57
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	90 81       	ld	r25, Z
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	10 c0       	rjmp	.+32     	; 0x1b94 <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTB :
			return PINB ;
    1b74:	e6 e3       	ldi	r30, 0x36	; 54
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	20 81       	ld	r18, Z
    1b7a:	2a 83       	std	Y+2, r18	; 0x02
    1b7c:	0b c0       	rjmp	.+22     	; 0x1b94 <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTC :
			return PINC;
    1b7e:	e3 e3       	ldi	r30, 0x33	; 51
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	30 81       	ld	r19, Z
    1b84:	3a 83       	std	Y+2, r19	; 0x02
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTD :
			return PIND;
    1b88:	e0 e3       	ldi	r30, 0x30	; 48
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8a 83       	std	Y+2, r24	; 0x02
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <DIO_U8GetPortValue+0x78>
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_U8GetPortValue+0x7c>
			//do no thing
			break;

	}

}
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	9d 83       	std	Y+5, r25	; 0x05
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <DIO_VoidSetPortSpecificDirection>:
void DIO_VoidSetPortSpecificDirection(u8 Copy_U8PortName, u8 Copy_U8SpectificDirection)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <DIO_VoidSetPortSpecificDirection+0x6>
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <DIO_VoidSetPortSpecificDirection+0x8>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	3c 83       	std	Y+4, r19	; 0x04
    1bc2:	2b 83       	std	Y+3, r18	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	d1 f0       	breq	.+52     	; 0x1c02 <DIO_VoidSetPortSpecificDirection+0x58>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <DIO_VoidSetPortSpecificDirection+0x38>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <DIO_VoidSetPortSpecificDirection+0x4e>
    1be0:	1e c0       	rjmp	.+60     	; 0x1c1e <DIO_VoidSetPortSpecificDirection+0x74>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	31 05       	cpc	r19, r1
    1bea:	81 f0       	breq	.+32     	; 0x1c0c <DIO_VoidSetPortSpecificDirection+0x62>
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	81 f0       	breq	.+32     	; 0x1c16 <DIO_VoidSetPortSpecificDirection+0x6c>
    1bf6:	13 c0       	rjmp	.+38     	; 0x1c1e <DIO_VoidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(DDRA,Copy_U8SpectificDirection);
    1bf8:	ea e3       	ldi	r30, 0x3A	; 58
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	80 83       	st	Z, r24
    1c00:	0e c0       	rjmp	.+28     	; 0x1c1e <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(DDRB,Copy_U8SpectificDirection);
    1c02:	e7 e3       	ldi	r30, 0x37	; 55
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	80 83       	st	Z, r24
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(DDRC,Copy_U8SpectificDirection);
    1c0c:	e4 e3       	ldi	r30, 0x34	; 52
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	80 83       	st	Z, r24
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(DDRD,Copy_U8SpectificDirection);
    1c16:	e1 e3       	ldi	r30, 0x31	; 49
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <DIO_VoidTogglePinValu>:
void DIO_VoidTogglePinValu(u8 Copy_U8PortName ,u8 Copy_u8PinNumber ) 
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <DIO_VoidTogglePinValu+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <DIO_VoidTogglePinValu+0x8>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8PortName)
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	3c 83       	std	Y+4, r19	; 0x04
    1c44:	2b 83       	std	Y+3, r18	; 0x03
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	49 f1       	breq	.+82     	; 0x1ca2 <DIO_VoidTogglePinValu+0x76>
    1c50:	2b 81       	ldd	r18, Y+3	; 0x03
    1c52:	3c 81       	ldd	r19, Y+4	; 0x04
    1c54:	22 30       	cpi	r18, 0x02	; 2
    1c56:	31 05       	cpc	r19, r1
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <DIO_VoidTogglePinValu+0x38>
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	61 f0       	breq	.+24     	; 0x1c7a <DIO_VoidTogglePinValu+0x4e>
    1c62:	5a c0       	rjmp	.+180    	; 0x1d18 <DIO_VoidTogglePinValu+0xec>
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	22 30       	cpi	r18, 0x02	; 2
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	71 f1       	breq	.+92     	; 0x1cca <DIO_VoidTogglePinValu+0x9e>
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	83 30       	cpi	r24, 0x03	; 3
    1c74:	91 05       	cpc	r25, r1
    1c76:	e9 f1       	breq	.+122    	; 0x1cf2 <DIO_VoidTogglePinValu+0xc6>
    1c78:	4f c0       	rjmp	.+158    	; 0x1d18 <DIO_VoidTogglePinValu+0xec>
	{
	case DIO_PORTA:
			TOGGLE_BIT(PORTA ,Copy_u8PinNumber);
    1c7a:	ab e3       	ldi	r26, 0x3B	; 59
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	eb e3       	ldi	r30, 0x3B	; 59
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_VoidTogglePinValu+0x6c>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <DIO_VoidTogglePinValu+0x68>
    1c9c:	84 27       	eor	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	3b c0       	rjmp	.+118    	; 0x1d18 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB ,Copy_u8PinNumber);
    1ca2:	a8 e3       	ldi	r26, 0x38	; 56
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e8 e3       	ldi	r30, 0x38	; 56
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 2e       	mov	r0, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_VoidTogglePinValu+0x94>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_VoidTogglePinValu+0x90>
    1cc4:	84 27       	eor	r24, r20
    1cc6:	8c 93       	st	X, r24
    1cc8:	27 c0       	rjmp	.+78     	; 0x1d18 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC ,Copy_u8PinNumber);
    1cca:	a5 e3       	ldi	r26, 0x35	; 53
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_VoidTogglePinValu+0xbc>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_VoidTogglePinValu+0xb8>
    1cec:	84 27       	eor	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	13 c0       	rjmp	.+38     	; 0x1d18 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD ,Copy_u8PinNumber);
    1cf2:	a2 e3       	ldi	r26, 0x32	; 50
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e2 e3       	ldi	r30, 0x32	; 50
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <DIO_VoidTogglePinValu+0xe4>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <DIO_VoidTogglePinValu+0xe0>
    1d14:	84 27       	eor	r24, r20
    1d16:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <ADC_VoidInit>:

static void (*ADC_pvoidNotificationFunction)(void) = NULL;
volatile   u16  ADC_Digital_Value ;

void ADC_VoidInit(void)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    // ADC ENABLE BIT 
    #if ADC_ENABLE == ENABLE
        SET_BIT(ADCSRA,ADEN);
    1d2e:	a6 e2       	ldi	r26, 0x26	; 38
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e6 e2       	ldi	r30, 0x26	; 38
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	80 68       	ori	r24, 0x80	; 128
    1d3a:	8c 93       	st	X, r24
    #endif
    //ADC ENABLE interrupt 
    #if ADC_INTERRUPT_STATUS  ==  ENABLE
        SET_BIT(ADCSRA,ADIE);
    #elif ADC_INTERRUPT_STATUS  ==  DISABLE
        CLEAR_BIT(ADCSRA,ADIE);
    1d3c:	a6 e2       	ldi	r26, 0x26	; 38
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e6 e2       	ldi	r30, 0x26	; 38
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	87 7f       	andi	r24, 0xF7	; 247
    1d48:	8c 93       	st	X, r24
    #endif
    //
    #if ADC_AJUST_RESULT  ==   1
        SET_BIT(ADMUX,ADLAR);
    #elif ADC_AJUST_RESULT  ==    RIGHT_ADJUST
        CLEAR_BIT(ADMUX,ADLAR);
    1d4a:	a7 e2       	ldi	r26, 0x27	; 39
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e7 e2       	ldi	r30, 0x27	; 39
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8f 7d       	andi	r24, 0xDF	; 223
    1d56:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ADJUST Configuration Error"
    #endif

    //set refereence volt selection
    ADMUX &= REFERENCE_SELECTION_MASK ;
    1d58:	a7 e2       	ldi	r26, 0x27	; 39
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e7 e2       	ldi	r30, 0x27	; 39
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 73       	andi	r24, 0x3F	; 63
    1d64:	8c 93       	st	X, r24
    ADMUX |= Reference_Selection ;
    1d66:	a7 e2       	ldi	r26, 0x27	; 39
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e7 e2       	ldi	r30, 0x27	; 39
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8c 93       	st	X, r24
        //set prescaler for adc 
    ADCSRA &= PRESCALER_SELECTION_MASK ;
    1d72:	a6 e2       	ldi	r26, 0x26	; 38
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e6 e2       	ldi	r30, 0x26	; 38
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 7f       	andi	r24, 0xF8	; 248
    1d7e:	8c 93       	st	X, r24
    ADCSRA |=  PRESCALER_SELECTION ;
    1d80:	a6 e2       	ldi	r26, 0x26	; 38
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 e2       	ldi	r30, 0x26	; 38
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	82 60       	ori	r24, 0x02	; 2
    1d8c:	8c 93       	st	X, r24

}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <ADC_VoidInterruptControl>:
 void ADC_VoidInterruptControl(u8 Copy_InterruptStatus)
 {
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <ADC_VoidInterruptControl+0x6>
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_InterruptStatus)
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3b 83       	std	Y+3, r19	; 0x03
    1daa:	2a 83       	std	Y+2, r18	; 0x02
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	31 f0       	breq	.+12     	; 0x1dc0 <ADC_VoidInterruptControl+0x2c>
    1db4:	2a 81       	ldd	r18, Y+2	; 0x02
    1db6:	3b 81       	ldd	r19, Y+3	; 0x03
    1db8:	21 30       	cpi	r18, 0x01	; 1
    1dba:	31 05       	cpc	r19, r1
    1dbc:	49 f0       	breq	.+18     	; 0x1dd0 <ADC_VoidInterruptControl+0x3c>
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <ADC_VoidInterruptControl+0x4a>
    {
    case DISABLE :
            CLEAR_BIT(ADCSRA,ADIE);
    1dc0:	a6 e2       	ldi	r26, 0x26	; 38
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e6 e2       	ldi	r30, 0x26	; 38
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	87 7f       	andi	r24, 0xF7	; 247
    1dcc:	8c 93       	st	X, r24
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <ADC_VoidInterruptControl+0x4a>
        break;
    case ENABLE :
        CLEAR_BIT(ADCSRA,ADIE);
    1dd0:	a6 e2       	ldi	r26, 0x26	; 38
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e6 e2       	ldi	r30, 0x26	; 38
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	87 7f       	andi	r24, 0xF7	; 247
    1ddc:	8c 93       	st	X, r24
    default:
        break;
    }
 }
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <ADC_U8StartConversionSynchronous>:

 u8 ADC_U8StartConversionSynchronous(u8 Copy_U8ChannelNumber)
 {
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <ADC_U8StartConversionSynchronous+0x6>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	8a 83       	std	Y+2, r24	; 0x02

   /// VARIABLE TO STORE THE DIGITAL DATA FROM ADC
    u8 Local_U8DigitalValue ;
    //SELECT THE CHANNEL FOR DOING CONVERSION 
    ADMUX &= CHANEL_SELECTION_MASK ;
    1df6:	a7 e2       	ldi	r26, 0x27	; 39
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e7 e2       	ldi	r30, 0x27	; 39
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	80 7e       	andi	r24, 0xE0	; 224
    1e02:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    1e04:	a7 e2       	ldi	r26, 0x27	; 39
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e7 e2       	ldi	r30, 0x27	; 39
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	90 81       	ld	r25, Z
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	89 2b       	or	r24, r25
    1e12:	8c 93       	st	X, r24
    //START THE CONVERSION
    SET_BIT(ADCSRA , ADSC);
    1e14:	a6 e2       	ldi	r26, 0x26	; 38
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e6 e2       	ldi	r30, 0x26	; 38
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 64       	ori	r24, 0x40	; 64
    1e20:	8c 93       	st	X, r24
    //POLLING UNTILL CONVERSION END , PROCESSOR STOP UNTILL CONVERSION END 
    while(GET_BIT(ADCSRA,ADIF) == FALSE);
    1e22:	e6 e2       	ldi	r30, 0x26	; 38
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	82 95       	swap	r24
    1e2a:	8f 70       	andi	r24, 0x0F	; 15
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	81 70       	andi	r24, 0x01	; 1
    1e32:	90 70       	andi	r25, 0x00	; 0
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	a9 f3       	breq	.-22     	; 0x1e22 <ADC_U8StartConversionSynchronous+0x38>
    //RESET THE ADC FLAG AFTER CONVERSION DONE
    SET_BIT(ADCSRA,ADIF);
    1e38:	a6 e2       	ldi	r26, 0x26	; 38
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e6 e2       	ldi	r30, 0x26	; 38
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 61       	ori	r24, 0x10	; 16
    1e44:	8c 93       	st	X, r24
    //TO READ VALUE FORM HIG REGISTER OR LOW
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        Local_U8DigitalValue = ADCH ;
    1e46:	e5 e2       	ldi	r30, 0x25	; 37
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    #elif ADC_AJUST_RESULT  ==    RIGHT_ADJUST  
        Local_U8DigitalValue = ADCL;
    #endif
    //RETURN THE DIGITAL VALUE FROM ADC 
    return Local_U8DigitalValue ;
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <ADC_U16StartConversionSynchronous>:
 u16 ADC_U16StartConversionSynchronous(u8 Copy_U8ChannelNumber)
 {
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <ADC_U16StartConversionSynchronous+0x6>
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	8b 83       	std	Y+3, r24	; 0x03

   /// VARIABLE TO STORE THE DIGITAL DATA FROM ADC
    u16 Local_U8DigitalValue ;
    //SELECT THE CHANNEL FOR DOING CONVERSION 
    ADMUX &= CHANEL_SELECTION_MASK ;
    1e68:	a7 e2       	ldi	r26, 0x27	; 39
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e7 e2       	ldi	r30, 0x27	; 39
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 7e       	andi	r24, 0xE0	; 224
    1e74:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    1e76:	a7 e2       	ldi	r26, 0x27	; 39
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e7 e2       	ldi	r30, 0x27	; 39
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	90 81       	ld	r25, Z
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	89 2b       	or	r24, r25
    1e84:	8c 93       	st	X, r24
    //START THE CONVERSION
    SET_BIT(ADCSRA , ADSC);
    1e86:	a6 e2       	ldi	r26, 0x26	; 38
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e6 e2       	ldi	r30, 0x26	; 38
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	80 64       	ori	r24, 0x40	; 64
    1e92:	8c 93       	st	X, r24
    //POLLING UNTILL CONVERSION END , PROCESSOR STOP UNTILL CONVERSION END 
    while(GET_BIT(ADCSRA,ADIF) == FALSE);
    1e94:	e6 e2       	ldi	r30, 0x26	; 38
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	82 95       	swap	r24
    1e9c:	8f 70       	andi	r24, 0x0F	; 15
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	81 70       	andi	r24, 0x01	; 1
    1ea4:	90 70       	andi	r25, 0x00	; 0
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	a9 f3       	breq	.-22     	; 0x1e94 <ADC_U16StartConversionSynchronous+0x3a>
    //RESET THE ADC FLAG AFTER CONVERSION DONE
    SET_BIT(ADCSRA,ADIF);
    1eaa:	a6 e2       	ldi	r26, 0x26	; 38
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e6 e2       	ldi	r30, 0x26	; 38
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 61       	ori	r24, 0x10	; 16
    1eb6:	8c 93       	st	X, r24
    //TO READ VALUE FORM 16 bit adc register 
    Local_U8DigitalValue=ADC ;
    1eb8:	e4 e2       	ldi	r30, 0x24	; 36
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    //RETURN THE DIGITAL VALUE FROM ADC 
    return Local_U8DigitalValue ;
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02

 }
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <ADC_U8StartConversionAsynchronous>:
 void ADC_U8StartConversionAsynchronous(u8 Copy_U8ChannelNumber  ,  void (* Notification ) (void))
 {
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <ADC_U8StartConversionAsynchronous+0x6>
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	7b 83       	std	Y+3, r23	; 0x03
    1ee4:	6a 83       	std	Y+2, r22	; 0x02
    //set channel 
    ADMUX &= CHANEL_SELECTION_MASK ;
    1ee6:	a7 e2       	ldi	r26, 0x27	; 39
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e7 e2       	ldi	r30, 0x27	; 39
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 7e       	andi	r24, 0xE0	; 224
    1ef2:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    1ef4:	a7 e2       	ldi	r26, 0x27	; 39
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e7 e2       	ldi	r30, 0x27	; 39
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	90 81       	ld	r25, Z
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	89 2b       	or	r24, r25
    1f02:	8c 93       	st	X, r24

    ADC_pvoidNotificationFunction = Notification;
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	90 93 87 01 	sts	0x0187, r25
    1f0c:	80 93 86 01 	sts	0x0186, r24

    SET_BIT(ADCSRA , ADSC);
    1f10:	a6 e2       	ldi	r26, 0x26	; 38
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e6 e2       	ldi	r30, 0x26	; 38
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 64       	ori	r24, 0x40	; 64
    1f1c:	8c 93       	st	X, r24

 }
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <__vector_16>:
 void __vector_16 (void)  __attribute__ ((signal));
 void __vector_16 (void)
{
    1f2a:	1f 92       	push	r1
    1f2c:	0f 92       	push	r0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
    1f34:	2f 93       	push	r18
    1f36:	3f 93       	push	r19
    1f38:	4f 93       	push	r20
    1f3a:	5f 93       	push	r21
    1f3c:	6f 93       	push	r22
    1f3e:	7f 93       	push	r23
    1f40:	8f 93       	push	r24
    1f42:	9f 93       	push	r25
    1f44:	af 93       	push	r26
    1f46:	bf 93       	push	r27
    1f48:	ef 93       	push	r30
    1f4a:	ff 93       	push	r31
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
     ADC_VoidInterruptControl(DISABLE);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <ADC_VoidInterruptControl>
    ADC_Digital_Value = ADCH;
    1f5a:	e5 e2       	ldi	r30, 0x25	; 37
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	90 93 89 01 	sts	0x0189, r25
    1f68:	80 93 88 01 	sts	0x0188, r24
    if(ADC_pvoidNotificationFunction != NULL)
    1f6c:	80 91 86 01 	lds	r24, 0x0186
    1f70:	90 91 87 01 	lds	r25, 0x0187
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	29 f0       	breq	.+10     	; 0x1f82 <__vector_16+0x58>
    {
        ADC_pvoidNotificationFunction();
    1f78:	e0 91 86 01 	lds	r30, 0x0186
    1f7c:	f0 91 87 01 	lds	r31, 0x0187
    1f80:	09 95       	icall
    }
    else
    {
        /* Do Nothing*/
    }
    ADC_VoidInterruptControl(ENABLE);
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <ADC_VoidInterruptControl>
                    
                    #endif

    #endif
    */
}
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	0f 90       	pop	r0
    1faa:	1f 90       	pop	r1
    1fac:	18 95       	reti

00001fae <LM_VoidInit>:
#include "LM_config.h"



void LM_VoidInit(Lm_t * lm_obj)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <LM_VoidInit+0x6>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_U8Flag =0 ;
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    DIO_voidSetPinDirection(lm_obj->Lm_Port,lm_obj->Lm_pin,INPUT);    
    1fc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc4:	80 81       	ld	r24, Z
    1fc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	69 2f       	mov	r22, r25
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    if(Local_U8Flag == 0)
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	88 23       	and	r24, r24
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <LM_VoidInit+0x34>
    {
        ADC_VoidInit();
    1fda:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ADC_VoidInit>
        Local_U8Flag =  1 ;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    }
    else{}

}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <Lm_U8ReturnTemperture>:

u8 Lm_U8ReturnTemperture(Lm_t * lm_obj)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	9d 87       	std	Y+13, r25	; 0x0d
    2004:	8c 87       	std	Y+12, r24	; 0x0c
    f32 LocalF32temp ;
    u8 LocalU8Temp ;
    u16 ADC_Value = ADC_U16StartConversionSynchronous(lm_obj->Lm_pin);
    2006:	ec 85       	ldd	r30, Y+12	; 0x0c
    2008:	fd 85       	ldd	r31, Y+13	; 0x0d
    200a:	81 81       	ldd	r24, Z+1	; 0x01
    200c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <ADC_U16StartConversionSynchronous>
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05

    f32 volt_value= ((f32)ADC_Value * Reference_volt)/Reslution ;
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	cc 01       	movw	r24, r24
    201a:	a0 e0       	ldi	r26, 0x00	; 0
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e4       	ldi	r19, 0x40	; 64
    2032:	4c e9       	ldi	r20, 0x9C	; 156
    2034:	55 e4       	ldi	r21, 0x45	; 69
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	ab 83       	std	Y+3, r26	; 0x03
    2058:	bc 83       	std	Y+4, r27	; 0x04


     LocalF32temp = (f32)volt_value/lm_volt_for_1_temp ;
    205a:	69 81       	ldd	r22, Y+1	; 0x01
    205c:	7a 81       	ldd	r23, Y+2	; 0x02
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	88 87       	std	Y+8, r24	; 0x08
    2074:	99 87       	std	Y+9, r25	; 0x09
    2076:	aa 87       	std	Y+10, r26	; 0x0a
    2078:	bb 87       	std	Y+11, r27	; 0x0b
     if(LocalF32temp - (s32)LocalF32temp >= .5)
    207a:	68 85       	ldd	r22, Y+8	; 0x08
    207c:	79 85       	ldd	r23, Y+9	; 0x09
    207e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2080:	9b 85       	ldd	r25, Y+11	; 0x0b
    2082:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	aa 27       	eor	r26, r26
    208c:	97 fd       	sbrc	r25, 7
    208e:	a0 95       	com	r26
    2090:	ba 2f       	mov	r27, r26
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    209a:	9b 01       	movw	r18, r22
    209c:	ac 01       	movw	r20, r24
    209e:	68 85       	ldd	r22, Y+8	; 0x08
    20a0:	79 85       	ldd	r23, Y+9	; 0x09
    20a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    20be:	88 23       	and	r24, r24
    20c0:	84 f0       	brlt	.+32     	; 0x20e2 <Lm_U8ReturnTemperture+0xf4>
     {
        LocalF32temp++;
    20c2:	68 85       	ldd	r22, Y+8	; 0x08
    20c4:	79 85       	ldd	r23, Y+9	; 0x09
    20c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	88 87       	std	Y+8, r24	; 0x08
    20dc:	99 87       	std	Y+9, r25	; 0x09
    20de:	aa 87       	std	Y+10, r26	; 0x0a
    20e0:	bb 87       	std	Y+11, r27	; 0x0b
     }else{}
     
     LocalU8Temp=(u8)LocalF32temp ;
    20e2:	68 85       	ldd	r22, Y+8	; 0x08
    20e4:	79 85       	ldd	r23, Y+9	; 0x09
    20e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8f 83       	std	Y+7, r24	; 0x07

    return LocalU8Temp ;
    20f4:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20f6:	2d 96       	adiw	r28, 0x0d	; 13
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <LED_VoidInit>:
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

void LED_VoidInit(led_t * ledobj)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <LED_VoidInit+0x6>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidSetPinDirection(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,OUTPUT);
    2116:	e9 81       	ldd	r30, Y+1	; 0x01
    2118:	fa 81       	ldd	r31, Y+2	; 0x02
    211a:	80 81       	ld	r24, Z
    211c:	e9 81       	ldd	r30, Y+1	; 0x01
    211e:	fa 81       	ldd	r31, Y+2	; 0x02
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	69 2f       	mov	r22, r25
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <LED_VoidTurnOn>:
void LED_VoidTurnOn(led_t * ledobj)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <LED_VoidTurnOn+0x6>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,HIGH);
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	80 81       	ld	r24, Z
    2148:	e9 81       	ldd	r30, Y+1	; 0x01
    214a:	fa 81       	ldd	r31, Y+2	; 0x02
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	69 2f       	mov	r22, r25
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <LED_VoidTurnOff>:
void LED_VoidTurnOff(led_t * ledobj)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	00 d0       	rcall	.+0      	; 0x2166 <LED_VoidTurnOff+0x6>
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,LOW);
    216e:	e9 81       	ldd	r30, Y+1	; 0x01
    2170:	fa 81       	ldd	r31, Y+2	; 0x02
    2172:	80 81       	ld	r24, Z
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	69 2f       	mov	r22, r25
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <LED_VoidToggleLed>:
void LED_VoidToggleLed(led_t * ledobj)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <LED_VoidToggleLed+0x6>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidTogglePinValu(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin);
    219a:	e9 81       	ldd	r30, Y+1	; 0x01
    219c:	fa 81       	ldd	r31, Y+2	; 0x02
    219e:	80 81       	ld	r24, Z
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	69 2f       	mov	r22, r25
    21a8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <DIO_VoidTogglePinValu>
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <LCD_voidInit>:
#include "LCD_config.h"



void LCD_voidInit()
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	2e 97       	sbiw	r28, 0x0e	; 14
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    #if LCD_INIT_MODE==EIGHT_BIT_MODE
    /* Initialize  Data Port*/
     DIO_VoidSetPortSpecificDirection(LCD_DATA_PORT,OUTPUT);
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <DIO_VoidSetPortSpecificDirection>

     // set RS and R/W and ENABLE as output
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_RS_PIN,OUTPUT);
    21d2:	83 e0       	ldi	r24, 0x03	; 3
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_RW_PIN,OUTPUT);
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	61 e0       	ldi	r22, 0x01	; 1
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_EN_PIN,OUTPUT);
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a8 e4       	ldi	r26, 0x48	; 72
    21f6:	b2 e4       	ldi	r27, 0x42	; 66
    21f8:	8b 87       	std	Y+11, r24	; 0x0b
    21fa:	9c 87       	std	Y+12, r25	; 0x0c
    21fc:	ad 87       	std	Y+13, r26	; 0x0d
    21fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	6b 85       	ldd	r22, Y+11	; 0x0b
    2202:	7c 85       	ldd	r23, Y+12	; 0x0c
    2204:	8d 85       	ldd	r24, Y+13	; 0x0d
    2206:	9e 85       	ldd	r25, Y+14	; 0x0e
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a ef       	ldi	r20, 0xFA	; 250
    220e:	54 e4       	ldi	r21, 0x44	; 68
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8f 83       	std	Y+7, r24	; 0x07
    221a:	98 87       	std	Y+8, r25	; 0x08
    221c:	a9 87       	std	Y+9, r26	; 0x09
    221e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	2c f4       	brge	.+10     	; 0x2242 <LCD_voidInit+0x8c>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	3f c0       	rjmp	.+126    	; 0x22c0 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	4c f5       	brge	.+82     	; 0x22ac <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <LCD_voidInit+0xec>
    2284:	88 ec       	ldi	r24, 0xC8	; 200
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_voidInit+0xda>
    2294:	9c 83       	std	Y+4, r25	; 0x04
    2296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <LCD_voidInit+0xce>
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_voidInit+0x116>
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01

     //wait for 30 ms
     _delay_ms(50);
     
     LCD_VoidSendCommand(FUNCTION_SET_CMD);
    22d4:	88 e3       	ldi	r24, 0x38	; 56
    22d6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_VoidSendCommand>
     LCD_VoidSendCommand(DISPLAY_ON_OFF_CMD);
    22da:	8c e0       	ldi	r24, 0x0C	; 12
    22dc:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_VoidSendCommand>
     LCD_VoidSendCommand(DISPLAY_CLEAR_CMD);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_VoidSendCommand>
    #else

        error("LCD CONFIGRATION ERROR ")

    #endif
}
    22e6:	2e 96       	adiw	r28, 0x0e	; 14
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <LCD_VoidSendCommand>:

 static void LCD_VoidSendCommand(u8 Copy_Command)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	2f 97       	sbiw	r28, 0x0f	; 15
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	8f 87       	std	Y+15, r24	; 0x0f
    //clear the RS pin To sent Command 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,LOW);
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    //clear the R/W pin to write 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    //set the command to data the data port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT,Copy_Command);
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	6f 85       	ldd	r22, Y+15	; 0x0f
    2326:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_VoidSetSpacificvalue>
    /* send enable pulse*/
    //low 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	62 e0       	ldi	r22, 0x02	; 2
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    //high
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,HIGH);
    2334:	83 e0       	ldi	r24, 0x03	; 3
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e0       	ldi	r26, 0x00	; 0
    2344:	b0 e4       	ldi	r27, 0x40	; 64
    2346:	8b 87       	std	Y+11, r24	; 0x0b
    2348:	9c 87       	std	Y+12, r25	; 0x0c
    234a:	ad 87       	std	Y+13, r26	; 0x0d
    234c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4a ef       	ldi	r20, 0xFA	; 250
    235c:	54 e4       	ldi	r21, 0x44	; 68
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8f 83       	std	Y+7, r24	; 0x07
    2368:	98 87       	std	Y+8, r25	; 0x08
    236a:	a9 87       	std	Y+9, r26	; 0x09
    236c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	78 85       	ldd	r23, Y+8	; 0x08
    2372:	89 85       	ldd	r24, Y+9	; 0x09
    2374:	9a 85       	ldd	r25, Y+10	; 0x0a
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <LCD_VoidSendCommand+0x98>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	3f c0       	rjmp	.+126    	; 0x240e <LCD_VoidSendCommand+0x116>
	else if (__tmp > 65535)
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <LCD_VoidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <LCD_VoidSendCommand+0xf8>
    23d2:	88 ec       	ldi	r24, 0xC8	; 200
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_VoidSendCommand+0xe6>
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <LCD_VoidSendCommand+0xda>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <LCD_VoidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_VoidSendCommand+0x122>
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    //low
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	62 e0       	ldi	r22, 0x02	; 2
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>




}
    242c:	2f 96       	adiw	r28, 0x0f	; 15
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Copy_Data)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	2f 97       	sbiw	r28, 0x0f	; 15
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	8f 87       	std	Y+15, r24	; 0x0f
    //clear the RS pin To sent data
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,HIGH);
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    //clear the R/W pin to write 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    //set the command to data the data port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT,Copy_Data);
    2468:	82 e0       	ldi	r24, 0x02	; 2
    246a:	6f 85       	ldd	r22, Y+15	; 0x0f
    246c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_VoidSetSpacificvalue>
    /* send enable pulse*/
    //low 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	62 e0       	ldi	r22, 0x02	; 2
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    //high
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,HIGH);
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	62 e0       	ldi	r22, 0x02	; 2
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a0 e0       	ldi	r26, 0x00	; 0
    248a:	b0 e4       	ldi	r27, 0x40	; 64
    248c:	8b 87       	std	Y+11, r24	; 0x0b
    248e:	9c 87       	std	Y+12, r25	; 0x0c
    2490:	ad 87       	std	Y+13, r26	; 0x0d
    2492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	6b 85       	ldd	r22, Y+11	; 0x0b
    2496:	7c 85       	ldd	r23, Y+12	; 0x0c
    2498:	8d 85       	ldd	r24, Y+13	; 0x0d
    249a:	9e 85       	ldd	r25, Y+14	; 0x0e
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a ef       	ldi	r20, 0xFA	; 250
    24a2:	54 e4       	ldi	r21, 0x44	; 68
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8f 83       	std	Y+7, r24	; 0x07
    24ae:	98 87       	std	Y+8, r25	; 0x08
    24b0:	a9 87       	std	Y+9, r26	; 0x09
    24b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b4:	6f 81       	ldd	r22, Y+7	; 0x07
    24b6:	78 85       	ldd	r23, Y+8	; 0x08
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <LCD_VoidSendData+0x98>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <LCD_VoidSendData+0x116>
	else if (__tmp > 65535)
    24d6:	6f 81       	ldd	r22, Y+7	; 0x07
    24d8:	78 85       	ldd	r23, Y+8	; 0x08
    24da:	89 85       	ldd	r24, Y+9	; 0x09
    24dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <LCD_VoidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <LCD_VoidSendData+0xf8>
    2518:	88 ec       	ldi	r24, 0xC8	; 200
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_VoidSendData+0xe6>
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9e 83       	std	Y+6, r25	; 0x06
    2534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <LCD_VoidSendData+0xda>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <LCD_VoidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	6f 81       	ldd	r22, Y+7	; 0x07
    2542:	78 85       	ldd	r23, Y+8	; 0x08
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <LCD_VoidSendData+0x122>
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    //low
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	62 e0       	ldi	r22, 0x02	; 2
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>


}
    2572:	2f 96       	adiw	r28, 0x0f	; 15
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <LCD_voidClearLcd>:

void LCD_voidClearLcd(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    LCD_VoidSendCommand(DISPLAY_CLEAR_CMD);
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_VoidSendCommand>
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_VoidGoToXY>:

void LCD_VoidGoToXY(u8 Copy_U8Xpostion  , u8 Copy_U8Ypostion)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <LCD_VoidGoToXY+0x6>
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	8a 83       	std	Y+2, r24	; 0x02
    25a6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_U8CharacterAdress = 0;
    25a8:	19 82       	std	Y+1, r1	; 0x01
    //calculate the address 

    if(Copy_U8Xpostion==0)
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	88 23       	and	r24, r24
    25ae:	19 f4       	brne	.+6      	; 0x25b6 <LCD_VoidGoToXY+0x1e>
    {
            //if x=0 so adrees = y 
            Local_U8CharacterAdress =Copy_U8Ypostion ;
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	06 c0       	rjmp	.+12     	; 0x25c2 <LCD_VoidGoToXY+0x2a>

    }
    else if (Copy_U8Xpostion==1)
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	19 f4       	brne	.+6      	; 0x25c2 <LCD_VoidGoToXY+0x2a>
    {
        //if x =1 so adress = y+40
        Local_U8CharacterAdress=Copy_U8Ypostion + 0x40 ;
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	80 5c       	subi	r24, 0xC0	; 192
    25c0:	89 83       	std	Y+1, r24	; 0x01
    {
        //raise error 
    }
    // set bit8 to to 1 because address command has 1 in bit8

    SET_BIT(Local_U8CharacterAdress,7);
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	80 68       	ori	r24, 0x80	; 128
    25c6:	89 83       	std	Y+1, r24	; 0x01
    LCD_VoidSendCommand(Local_U8CharacterAdress);
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_VoidSendCommand>

}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_VoidSendString>:
void LCD_VoidSendString ( u8 * Copy_pu8StringArray)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LCD_VoidSendString+0x6>
    25e0:	0f 92       	push	r0
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8LoopCounter =0 ;
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <LCD_VoidSendString+0x30>
    while (Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    {
        LCD_VoidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	fc 01       	movw	r30, r24
    25fa:	e2 0f       	add	r30, r18
    25fc:	f3 1f       	adc	r31, r19
    25fe:	80 81       	ld	r24, Z
    2600:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_VoidSendData>
        Local_u8LoopCounter ++;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_VoidSendString ( u8 * Copy_pu8StringArray)
{
    u8 Local_u8LoopCounter =0 ;
    while (Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	fc 01       	movw	r30, r24
    2616:	e2 0f       	add	r30, r18
    2618:	f3 1f       	adc	r31, r19
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	39 f7       	brne	.-50     	; 0x25ee <LCD_VoidSendString+0x14>
    {
        LCD_VoidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
        Local_u8LoopCounter ++;
    }

}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32  Copy_U8number)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	2d 97       	sbiw	r28, 0x0d	; 13
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	9d 87       	std	Y+13, r25	; 0x0d
    2642:	8c 87       	std	Y+12, r24	; 0x0c
    u8 local_u8ArrayyNumber[10];
    u8 local_u8LoopCounter =0 ;
    2644:	19 82       	std	Y+1, r1	; 0x01
    2646:	1d c0       	rjmp	.+58     	; 0x2682 <LCD_VoidSendNumber+0x56>
    while(Copy_U8number != 0)
    {
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	e8 2f       	mov	r30, r24
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2650:	9d 85       	ldd	r25, Y+13	; 0x0d
    2652:	2a e0       	ldi	r18, 0x0A	; 10
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	b9 01       	movw	r22, r18
    2658:	0e 94 90 14 	call	0x2920	; 0x2920 <__udivmodhi4>
    265c:	28 2f       	mov	r18, r24
    265e:	ce 01       	movw	r24, r28
    2660:	02 96       	adiw	r24, 0x02	; 2
    2662:	e8 0f       	add	r30, r24
    2664:	f9 1f       	adc	r31, r25
    2666:	20 83       	st	Z, r18
        Copy_U8number /= 10 ;
    2668:	8c 85       	ldd	r24, Y+12	; 0x0c
    266a:	9d 85       	ldd	r25, Y+13	; 0x0d
    266c:	2a e0       	ldi	r18, 0x0A	; 10
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	b9 01       	movw	r22, r18
    2672:	0e 94 90 14 	call	0x2920	; 0x2920 <__udivmodhi4>
    2676:	cb 01       	movw	r24, r22
    2678:	9d 87       	std	Y+13, r25	; 0x0d
    267a:	8c 87       	std	Y+12, r24	; 0x0c
        local_u8LoopCounter ++ ;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_VoidSendNumber(u32  Copy_U8number)
{
    u8 local_u8ArrayyNumber[10];
    u8 local_u8LoopCounter =0 ;
    while(Copy_U8number != 0)
    2682:	8c 85       	ldd	r24, Y+12	; 0x0c
    2684:	9d 85       	ldd	r25, Y+13	; 0x0d
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	f9 f6       	brne	.-66     	; 0x2648 <LCD_VoidSendNumber+0x1c>
    {
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
        Copy_U8number /= 10 ;
        local_u8LoopCounter ++ ;
    }
    local_u8LoopCounter -- ; // while increament and check condition
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	81 50       	subi	r24, 0x01	; 1
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <LCD_VoidSendNumber+0x84>
    while(local_u8LoopCounter != 255) // beacuse loopcounter is unsigned so when we delver to - value == 255
    {
        //we want to send Asci code so add '0' 48 plus the number  if number is 5 so ascii code of 5 = 5+48('0') =53 
        LCD_VoidSendData(local_u8ArrayyNumber[local_u8LoopCounter]+ '0');
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	ce 01       	movw	r24, r28
    269a:	02 96       	adiw	r24, 0x02	; 2
    269c:	fc 01       	movw	r30, r24
    269e:	e2 0f       	add	r30, r18
    26a0:	f3 1f       	adc	r31, r19
    26a2:	80 81       	ld	r24, Z
    26a4:	80 5d       	subi	r24, 0xD0	; 208
    26a6:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_VoidSendData>
        local_u8LoopCounter -- ;
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	81 50       	subi	r24, 0x01	; 1
    26ae:	89 83       	std	Y+1, r24	; 0x01
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
        Copy_U8number /= 10 ;
        local_u8LoopCounter ++ ;
    }
    local_u8LoopCounter -- ; // while increament and check condition
    while(local_u8LoopCounter != 255) // beacuse loopcounter is unsigned so when we delver to - value == 255
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	8f 3f       	cpi	r24, 0xFF	; 255
    26b4:	71 f7       	brne	.-36     	; 0x2692 <LCD_VoidSendNumber+0x66>
    {
        //we want to send Asci code so add '0' 48 plus the number  if number is 5 so ascii code of 5 = 5+48('0') =53 
        LCD_VoidSendData(local_u8ArrayyNumber[local_u8LoopCounter]+ '0');
        local_u8LoopCounter -- ;
    }
}
    26b6:	2d 96       	adiw	r28, 0x0d	; 13
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <LCD_VoidSendCustomCharacter>:
void LCD_VoidSendCustomCharacter( u8 * Copy_pU8CharacterArray ,u8 Copy_U8PatternNumber , u8 Copy_U8Xpostion ,  u8 Copy_U8Ypostion  )
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	27 97       	sbiw	r28, 0x07	; 7
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	6d 83       	std	Y+5, r22	; 0x05
    26e2:	4e 83       	std	Y+6, r20	; 0x06
    26e4:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter ;
    u8 Local_u8CGRAMAdress = 0;
    26e6:	19 82       	std	Y+1, r1	; 0x01
    //calcute the adress of CGRAM = pattern number *8  
    Local_u8CGRAMAdress = Copy_U8PatternNumber * 8 ;
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	89 83       	std	Y+1, r24	; 0x01
    //set bit 6 to 1 according to command in datasheet 
    SET_BIT(Local_u8CGRAMAdress , 6);
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	80 64       	ori	r24, 0x40	; 64
    2700:	89 83       	std	Y+1, r24	; 0x01
    //send the command that tell i call the CGRAM 
    LCD_VoidSendCommand(Local_u8CGRAMAdress);
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_VoidSendCommand>
    for(Local_u8LoopCounter =0 ; Local_u8LoopCounter < 8 ; Local_u8LoopCounter ++)
    2708:	1a 82       	std	Y+2, r1	; 0x02
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <LCD_VoidSendCustomCharacter+0x60>
    {
        LCD_VoidSendData(Copy_pU8CharacterArray[Local_u8LoopCounter]);
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	9c 81       	ldd	r25, Y+4	; 0x04
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_VoidSendData>
    Local_u8CGRAMAdress = Copy_U8PatternNumber * 8 ;
    //set bit 6 to 1 according to command in datasheet 
    SET_BIT(Local_u8CGRAMAdress , 6);
    //send the command that tell i call the CGRAM 
    LCD_VoidSendCommand(Local_u8CGRAMAdress);
    for(Local_u8LoopCounter =0 ; Local_u8LoopCounter < 8 ; Local_u8LoopCounter ++)
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	8a 83       	std	Y+2, r24	; 0x02
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	88 30       	cpi	r24, 0x08	; 8
    272c:	78 f3       	brcs	.-34     	; 0x270c <LCD_VoidSendCustomCharacter+0x44>
    {
        LCD_VoidSendData(Copy_pU8CharacterArray[Local_u8LoopCounter]);
    }
    // postion of start display and  sent data to DDRAM to display in lcd 
    LCD_VoidGoToXY(Copy_U8Xpostion , Copy_U8Ypostion);
    272e:	8e 81       	ldd	r24, Y+6	; 0x06
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_VoidGoToXY>
    LCD_VoidSendData(Copy_U8PatternNumber);
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	0e 94 1f 12 	call	0x243e	; 0x243e <LCD_VoidSendData>
    
}
    273c:	27 96       	adiw	r28, 0x07	; 7
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <KPD_VoidIntit>:
#include "KPD_private.h"



void KPD_VoidIntit(void)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    //set Rows pins to input pulled up
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,INPUT);
    2756:	83 e0       	ldi	r24, 0x03	; 3
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,INPUT);
    2760:	83 e0       	ldi	r24, 0x03	; 3
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,INPUT);
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	62 e0       	ldi	r22, 0x02	; 2
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,INPUT);
    2774:	83 e0       	ldi	r24, 0x03	; 3
    2776:	63 e0       	ldi	r22, 0x03	; 3
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    // PuLLED UP 
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW0_PIN,PULLUP);
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	60 e0       	ldi	r22, 0x00	; 0
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW1_PIN,PULLUP);
    2788:	83 e0       	ldi	r24, 0x03	; 3
    278a:	61 e0       	ldi	r22, 0x01	; 1
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW2_PIN,PULLUP);
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	62 e0       	ldi	r22, 0x02	; 2
    2796:	41 e0       	ldi	r20, 0x01	; 1
    2798:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW3_PIN,PULLUP);
    279c:	83 e0       	ldi	r24, 0x03	; 3
    279e:	63 e0       	ldi	r22, 0x03	; 3
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    //set cols pins to output high
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,OUTPUT);
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	64 e0       	ldi	r22, 0x04	; 4
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,OUTPUT);
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	65 e0       	ldi	r22, 0x05	; 5
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,OUTPUT);
    27ba:	83 e0       	ldi	r24, 0x03	; 3
    27bc:	66 e0       	ldi	r22, 0x06	; 6
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,OUTPUT);
    27c4:	83 e0       	ldi	r24, 0x03	; 3
    27c6:	67 e0       	ldi	r22, 0x07	; 7
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 16 0a 	call	0x142c	; 0x142c <DIO_voidSetPinDirection>
    //SET COLUMNS HIGH
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,HIGH);
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	64 e0       	ldi	r22, 0x04	; 4
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,HIGH);
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	65 e0       	ldi	r22, 0x05	; 5
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,HIGH);
    27e2:	83 e0       	ldi	r24, 0x03	; 3
    27e4:	66 e0       	ldi	r22, 0x06	; 6
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,HIGH);
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	67 e0       	ldi	r22, 0x07	; 7
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>


}
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <KPD_U8GetPressedKey>:
                                                 

u8 KPD_U8GetPressedKey(void)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <KPD_U8GetPressedKey+0x6>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <KPD_U8GetPressedKey+0x8>
    2804:	0f 92       	push	r0
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
   //array of colums pins
   static u8 Local_u8Array_of_columns[KPD_COLUMNS_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
   //array of rows pins
   static  u8 Local_U8Array_Of_Rows[KPD_ROWS_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    280e:	1b 82       	std	Y+3, r1	; 0x03
    2810:	57 c0       	rjmp	.+174    	; 0x28c0 <KPD_U8GetPressedKey+0xc4>
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	fc 01       	movw	r30, r24
    281a:	e4 59       	subi	r30, 0x94	; 148
    281c:	fe 4f       	sbci	r31, 0xFE	; 254
    281e:	90 81       	ld	r25, Z
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	69 2f       	mov	r22, r25
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    282a:	1a 82       	std	Y+2, r1	; 0x02
    282c:	37 c0       	rjmp	.+110    	; 0x289c <KPD_U8GetPressedKey+0xa0>
        {
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	fc 01       	movw	r30, r24
    2836:	e8 59       	subi	r30, 0x98	; 152
    2838:	fe 4f       	sbci	r31, 0xFE	; 254
    283a:	90 81       	ld	r25, Z
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	69 2f       	mov	r22, r25
    2840:	0e 94 1f 0c 	call	0x183e	; 0x183e <DIO_VoidGetPinValue>
    2844:	89 83       	std	Y+1, r24	; 0x01
           if(local_u8RowValue== LOW)
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	88 23       	and	r24, r24
    284a:	29 f5       	brne	.+74     	; 0x2896 <KPD_U8GetPressedKey+0x9a>
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	48 2f       	mov	r20, r24
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	ca 01       	movw	r24, r20
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	82 0f       	add	r24, r18
    2864:	93 1f       	adc	r25, r19
    2866:	fc 01       	movw	r30, r24
    2868:	e0 59       	subi	r30, 0x90	; 144
    286a:	fe 4f       	sbci	r31, 0xFE	; 254
    286c:	80 81       	ld	r24, Z
    286e:	8c 83       	std	Y+4, r24	; 0x04
    2870:	0c c0       	rjmp	.+24     	; 0x288a <KPD_U8GetPressedKey+0x8e>
                while(local_u8RowValue==LOW)
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	fc 01       	movw	r30, r24
    287a:	e8 59       	subi	r30, 0x98	; 152
    287c:	fe 4f       	sbci	r31, 0xFE	; 254
    287e:	90 81       	ld	r25, Z
    2880:	83 e0       	ldi	r24, 0x03	; 3
    2882:	69 2f       	mov	r22, r25
    2884:	0e 94 1f 0c 	call	0x183e	; 0x183e <DIO_VoidGetPinValue>
    2888:	89 83       	std	Y+1, r24	; 0x01
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
           if(local_u8RowValue== LOW)
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
                while(local_u8RowValue==LOW)
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	88 23       	and	r24, r24
    288e:	89 f3       	breq	.-30     	; 0x2872 <KPD_U8GetPressedKey+0x76>
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
                }

                return  local_u8Key_pressed ;
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	1b c0       	rjmp	.+54     	; 0x28cc <KPD_U8GetPressedKey+0xd0>
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	8a 83       	std	Y+2, r24	; 0x02
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	84 30       	cpi	r24, 0x04	; 4
    28a0:	30 f2       	brcs	.-116    	; 0x282e <KPD_U8GetPressedKey+0x32>

           }

        }
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	88 2f       	mov	r24, r24
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	fc 01       	movw	r30, r24
    28aa:	e4 59       	subi	r30, 0x94	; 148
    28ac:	fe 4f       	sbci	r31, 0xFE	; 254
    28ae:	90 81       	ld	r25, Z
    28b0:	83 e0       	ldi	r24, 0x03	; 3
    28b2:	69 2f       	mov	r22, r25
    28b4:	41 e0       	ldi	r20, 0x01	; 1
    28b6:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_VoidSetPinValue>
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	8f 5f       	subi	r24, 0xFF	; 255
    28be:	8b 83       	std	Y+3, r24	; 0x03
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	84 30       	cpi	r24, 0x04	; 4
    28c4:	08 f4       	brcc	.+2      	; 0x28c8 <KPD_U8GetPressedKey+0xcc>
    28c6:	a5 cf       	rjmp	.-182    	; 0x2812 <KPD_U8GetPressedKey+0x16>
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);

    }

    return local_u8Key_pressed ;
    28c8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <main>:
#include "../MCAL/DIO/DIO_interface.h"
#include "../HAL/LCD/LCD_interface.h"
#include "../HAL/LM35/LM_interface.h"

int main (void)
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <main+0x6>
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <main+0x8>
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62

	LCD_voidInit();
    28ea:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_voidInit>
	ADC_VoidInit();
    28ee:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ADC_VoidInit>
	while(1)
	{

		u16 temp ;
		Lm_t lm1;
		lm1.Lm_Port=DIO_PORTA ;
    28f2:	1b 82       	std	Y+3, r1	; 0x03
		lm1.Lm_pin=PIN0 ;
    28f4:	1c 82       	std	Y+4, r1	; 0x04
		LM_VoidInit(&lm1);
    28f6:	ce 01       	movw	r24, r28
    28f8:	03 96       	adiw	r24, 0x03	; 3
    28fa:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <LM_VoidInit>

		temp=Lm_U8ReturnTemperture(&lm1);
    28fe:	ce 01       	movw	r24, r28
    2900:	03 96       	adiw	r24, 0x03	; 3
    2902:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Lm_U8ReturnTemperture>
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidGoToXY(0,0);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_VoidGoToXY>
		LCD_VoidSendNumber(temp);
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_VoidSendNumber>
    291e:	e9 cf       	rjmp	.-46     	; 0x28f2 <main+0x14>

00002920 <__udivmodhi4>:
    2920:	aa 1b       	sub	r26, r26
    2922:	bb 1b       	sub	r27, r27
    2924:	51 e1       	ldi	r21, 0x11	; 17
    2926:	07 c0       	rjmp	.+14     	; 0x2936 <__udivmodhi4_ep>

00002928 <__udivmodhi4_loop>:
    2928:	aa 1f       	adc	r26, r26
    292a:	bb 1f       	adc	r27, r27
    292c:	a6 17       	cp	r26, r22
    292e:	b7 07       	cpc	r27, r23
    2930:	10 f0       	brcs	.+4      	; 0x2936 <__udivmodhi4_ep>
    2932:	a6 1b       	sub	r26, r22
    2934:	b7 0b       	sbc	r27, r23

00002936 <__udivmodhi4_ep>:
    2936:	88 1f       	adc	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	5a 95       	dec	r21
    293c:	a9 f7       	brne	.-22     	; 0x2928 <__udivmodhi4_loop>
    293e:	80 95       	com	r24
    2940:	90 95       	com	r25
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	08 95       	ret

00002948 <__prologue_saves__>:
    2948:	2f 92       	push	r2
    294a:	3f 92       	push	r3
    294c:	4f 92       	push	r4
    294e:	5f 92       	push	r5
    2950:	6f 92       	push	r6
    2952:	7f 92       	push	r7
    2954:	8f 92       	push	r8
    2956:	9f 92       	push	r9
    2958:	af 92       	push	r10
    295a:	bf 92       	push	r11
    295c:	cf 92       	push	r12
    295e:	df 92       	push	r13
    2960:	ef 92       	push	r14
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	ca 1b       	sub	r28, r26
    2972:	db 0b       	sbc	r29, r27
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	09 94       	ijmp

00002980 <__epilogue_restores__>:
    2980:	2a 88       	ldd	r2, Y+18	; 0x12
    2982:	39 88       	ldd	r3, Y+17	; 0x11
    2984:	48 88       	ldd	r4, Y+16	; 0x10
    2986:	5f 84       	ldd	r5, Y+15	; 0x0f
    2988:	6e 84       	ldd	r6, Y+14	; 0x0e
    298a:	7d 84       	ldd	r7, Y+13	; 0x0d
    298c:	8c 84       	ldd	r8, Y+12	; 0x0c
    298e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2990:	aa 84       	ldd	r10, Y+10	; 0x0a
    2992:	b9 84       	ldd	r11, Y+9	; 0x09
    2994:	c8 84       	ldd	r12, Y+8	; 0x08
    2996:	df 80       	ldd	r13, Y+7	; 0x07
    2998:	ee 80       	ldd	r14, Y+6	; 0x06
    299a:	fd 80       	ldd	r15, Y+5	; 0x05
    299c:	0c 81       	ldd	r16, Y+4	; 0x04
    299e:	1b 81       	ldd	r17, Y+3	; 0x03
    29a0:	aa 81       	ldd	r26, Y+2	; 0x02
    29a2:	b9 81       	ldd	r27, Y+1	; 0x01
    29a4:	ce 0f       	add	r28, r30
    29a6:	d1 1d       	adc	r29, r1
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	ed 01       	movw	r28, r26
    29b4:	08 95       	ret

000029b6 <_exit>:
    29b6:	f8 94       	cli

000029b8 <__stop_program>:
    29b8:	ff cf       	rjmp	.-2      	; 0x29b8 <__stop_program>
