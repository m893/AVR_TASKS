
LCD_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000019fe  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001218  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c9f  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00003933  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00003a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00003be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000582c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006717  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000074c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000078b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000807f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      68:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      6c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      70:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      7c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      80:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      84:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      8c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      90:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      94:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      98:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      9c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      a0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      a4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      a8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      ac:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      b0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      b4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      b8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      bc:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      c0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      c4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      c8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	12 e0       	ldi	r17, 0x02	; 2
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	ee ef       	ldi	r30, 0xFE	; 254
      e4:	f9 e1       	ldi	r31, 0x19	; 25
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a8 30       	cpi	r26, 0x08	; 8
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>
      f6:	0e 94 a7 0c 	call	0x194e	; 0x194e <main>
      fa:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <_exit>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <__fixunssfsi>:
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	7b 01       	movw	r14, r22
     10c:	8c 01       	movw	r16, r24
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	40 e0       	ldi	r20, 0x00	; 0
     114:	5f e4       	ldi	r21, 0x4F	; 79
     116:	0e 94 81 03 	call	0x702	; 0x702 <__gesf2>
     11a:	88 23       	and	r24, r24
     11c:	8c f0       	brlt	.+34     	; 0x140 <__fixunssfsi+0x3e>
     11e:	c8 01       	movw	r24, r16
     120:	b7 01       	movw	r22, r14
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	5f e4       	ldi	r21, 0x4F	; 79
     12a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__subsf3>
     12e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fixsfsi>
     132:	9b 01       	movw	r18, r22
     134:	ac 01       	movw	r20, r24
     136:	20 50       	subi	r18, 0x00	; 0
     138:	30 40       	sbci	r19, 0x00	; 0
     13a:	40 40       	sbci	r20, 0x00	; 0
     13c:	50 48       	sbci	r21, 0x80	; 128
     13e:	06 c0       	rjmp	.+12     	; 0x14c <__fixunssfsi+0x4a>
     140:	c8 01       	movw	r24, r16
     142:	b7 01       	movw	r22, r14
     144:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fixsfsi>
     148:	9b 01       	movw	r18, r22
     14a:	ac 01       	movw	r20, r24
     14c:	b9 01       	movw	r22, r18
     14e:	ca 01       	movw	r24, r20
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	ff 90       	pop	r15
     156:	ef 90       	pop	r14
     158:	08 95       	ret

0000015a <_fpadd_parts>:
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e3 eb       	ldi	r30, 0xB3	; 179
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__prologue_saves__>
     166:	dc 01       	movw	r26, r24
     168:	2b 01       	movw	r4, r22
     16a:	fa 01       	movw	r30, r20
     16c:	9c 91       	ld	r25, X
     16e:	92 30       	cpi	r25, 0x02	; 2
     170:	08 f4       	brcc	.+2      	; 0x174 <_fpadd_parts+0x1a>
     172:	39 c1       	rjmp	.+626    	; 0x3e6 <_fpadd_parts+0x28c>
     174:	eb 01       	movw	r28, r22
     176:	88 81       	ld	r24, Y
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	08 f4       	brcc	.+2      	; 0x17e <_fpadd_parts+0x24>
     17c:	33 c1       	rjmp	.+614    	; 0x3e4 <_fpadd_parts+0x28a>
     17e:	94 30       	cpi	r25, 0x04	; 4
     180:	69 f4       	brne	.+26     	; 0x19c <_fpadd_parts+0x42>
     182:	84 30       	cpi	r24, 0x04	; 4
     184:	09 f0       	breq	.+2      	; 0x188 <_fpadd_parts+0x2e>
     186:	2f c1       	rjmp	.+606    	; 0x3e6 <_fpadd_parts+0x28c>
     188:	11 96       	adiw	r26, 0x01	; 1
     18a:	9c 91       	ld	r25, X
     18c:	11 97       	sbiw	r26, 0x01	; 1
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	98 17       	cp	r25, r24
     192:	09 f4       	brne	.+2      	; 0x196 <_fpadd_parts+0x3c>
     194:	28 c1       	rjmp	.+592    	; 0x3e6 <_fpadd_parts+0x28c>
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b2 e0       	ldi	r27, 0x02	; 2
     19a:	25 c1       	rjmp	.+586    	; 0x3e6 <_fpadd_parts+0x28c>
     19c:	84 30       	cpi	r24, 0x04	; 4
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x48>
     1a0:	21 c1       	rjmp	.+578    	; 0x3e4 <_fpadd_parts+0x28a>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	a9 f4       	brne	.+42     	; 0x1d0 <_fpadd_parts+0x76>
     1a6:	92 30       	cpi	r25, 0x02	; 2
     1a8:	09 f0       	breq	.+2      	; 0x1ac <_fpadd_parts+0x52>
     1aa:	1d c1       	rjmp	.+570    	; 0x3e6 <_fpadd_parts+0x28c>
     1ac:	9a 01       	movw	r18, r20
     1ae:	ad 01       	movw	r20, r26
     1b0:	88 e0       	ldi	r24, 0x08	; 8
     1b2:	ea 01       	movw	r28, r20
     1b4:	09 90       	ld	r0, Y+
     1b6:	ae 01       	movw	r20, r28
     1b8:	e9 01       	movw	r28, r18
     1ba:	09 92       	st	Y+, r0
     1bc:	9e 01       	movw	r18, r28
     1be:	81 50       	subi	r24, 0x01	; 1
     1c0:	c1 f7       	brne	.-16     	; 0x1b2 <_fpadd_parts+0x58>
     1c2:	e2 01       	movw	r28, r4
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	11 96       	adiw	r26, 0x01	; 1
     1c8:	9c 91       	ld	r25, X
     1ca:	89 23       	and	r24, r25
     1cc:	81 83       	std	Z+1, r24	; 0x01
     1ce:	08 c1       	rjmp	.+528    	; 0x3e0 <_fpadd_parts+0x286>
     1d0:	92 30       	cpi	r25, 0x02	; 2
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <_fpadd_parts+0x7c>
     1d4:	07 c1       	rjmp	.+526    	; 0x3e4 <_fpadd_parts+0x28a>
     1d6:	12 96       	adiw	r26, 0x02	; 2
     1d8:	2d 90       	ld	r2, X+
     1da:	3c 90       	ld	r3, X
     1dc:	13 97       	sbiw	r26, 0x03	; 3
     1de:	eb 01       	movw	r28, r22
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	9b 81       	ldd	r25, Y+3	; 0x03
     1e4:	14 96       	adiw	r26, 0x04	; 4
     1e6:	ad 90       	ld	r10, X+
     1e8:	bd 90       	ld	r11, X+
     1ea:	cd 90       	ld	r12, X+
     1ec:	dc 90       	ld	r13, X
     1ee:	17 97       	sbiw	r26, 0x07	; 7
     1f0:	ec 80       	ldd	r14, Y+4	; 0x04
     1f2:	fd 80       	ldd	r15, Y+5	; 0x05
     1f4:	0e 81       	ldd	r16, Y+6	; 0x06
     1f6:	1f 81       	ldd	r17, Y+7	; 0x07
     1f8:	91 01       	movw	r18, r2
     1fa:	28 1b       	sub	r18, r24
     1fc:	39 0b       	sbc	r19, r25
     1fe:	b9 01       	movw	r22, r18
     200:	37 ff       	sbrs	r19, 7
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xb2>
     204:	66 27       	eor	r22, r22
     206:	77 27       	eor	r23, r23
     208:	62 1b       	sub	r22, r18
     20a:	73 0b       	sbc	r23, r19
     20c:	60 32       	cpi	r22, 0x20	; 32
     20e:	71 05       	cpc	r23, r1
     210:	0c f0       	brlt	.+2      	; 0x214 <_fpadd_parts+0xba>
     212:	61 c0       	rjmp	.+194    	; 0x2d6 <_fpadd_parts+0x17c>
     214:	12 16       	cp	r1, r18
     216:	13 06       	cpc	r1, r19
     218:	6c f5       	brge	.+90     	; 0x274 <_fpadd_parts+0x11a>
     21a:	37 01       	movw	r6, r14
     21c:	48 01       	movw	r8, r16
     21e:	06 2e       	mov	r0, r22
     220:	04 c0       	rjmp	.+8      	; 0x22a <_fpadd_parts+0xd0>
     222:	96 94       	lsr	r9
     224:	87 94       	ror	r8
     226:	77 94       	ror	r7
     228:	67 94       	ror	r6
     22a:	0a 94       	dec	r0
     22c:	d2 f7       	brpl	.-12     	; 0x222 <_fpadd_parts+0xc8>
     22e:	21 e0       	ldi	r18, 0x01	; 1
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	04 c0       	rjmp	.+8      	; 0x240 <_fpadd_parts+0xe6>
     238:	22 0f       	add	r18, r18
     23a:	33 1f       	adc	r19, r19
     23c:	44 1f       	adc	r20, r20
     23e:	55 1f       	adc	r21, r21
     240:	6a 95       	dec	r22
     242:	d2 f7       	brpl	.-12     	; 0x238 <_fpadd_parts+0xde>
     244:	21 50       	subi	r18, 0x01	; 1
     246:	30 40       	sbci	r19, 0x00	; 0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	50 40       	sbci	r21, 0x00	; 0
     24c:	2e 21       	and	r18, r14
     24e:	3f 21       	and	r19, r15
     250:	40 23       	and	r20, r16
     252:	51 23       	and	r21, r17
     254:	21 15       	cp	r18, r1
     256:	31 05       	cpc	r19, r1
     258:	41 05       	cpc	r20, r1
     25a:	51 05       	cpc	r21, r1
     25c:	21 f0       	breq	.+8      	; 0x266 <_fpadd_parts+0x10c>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	79 01       	movw	r14, r18
     268:	8a 01       	movw	r16, r20
     26a:	e6 28       	or	r14, r6
     26c:	f7 28       	or	r15, r7
     26e:	08 29       	or	r16, r8
     270:	19 29       	or	r17, r9
     272:	3c c0       	rjmp	.+120    	; 0x2ec <_fpadd_parts+0x192>
     274:	23 2b       	or	r18, r19
     276:	d1 f1       	breq	.+116    	; 0x2ec <_fpadd_parts+0x192>
     278:	26 0e       	add	r2, r22
     27a:	37 1e       	adc	r3, r23
     27c:	35 01       	movw	r6, r10
     27e:	46 01       	movw	r8, r12
     280:	06 2e       	mov	r0, r22
     282:	04 c0       	rjmp	.+8      	; 0x28c <_fpadd_parts+0x132>
     284:	96 94       	lsr	r9
     286:	87 94       	ror	r8
     288:	77 94       	ror	r7
     28a:	67 94       	ror	r6
     28c:	0a 94       	dec	r0
     28e:	d2 f7       	brpl	.-12     	; 0x284 <_fpadd_parts+0x12a>
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	04 c0       	rjmp	.+8      	; 0x2a2 <_fpadd_parts+0x148>
     29a:	22 0f       	add	r18, r18
     29c:	33 1f       	adc	r19, r19
     29e:	44 1f       	adc	r20, r20
     2a0:	55 1f       	adc	r21, r21
     2a2:	6a 95       	dec	r22
     2a4:	d2 f7       	brpl	.-12     	; 0x29a <_fpadd_parts+0x140>
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	30 40       	sbci	r19, 0x00	; 0
     2aa:	40 40       	sbci	r20, 0x00	; 0
     2ac:	50 40       	sbci	r21, 0x00	; 0
     2ae:	2a 21       	and	r18, r10
     2b0:	3b 21       	and	r19, r11
     2b2:	4c 21       	and	r20, r12
     2b4:	5d 21       	and	r21, r13
     2b6:	21 15       	cp	r18, r1
     2b8:	31 05       	cpc	r19, r1
     2ba:	41 05       	cpc	r20, r1
     2bc:	51 05       	cpc	r21, r1
     2be:	21 f0       	breq	.+8      	; 0x2c8 <_fpadd_parts+0x16e>
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	59 01       	movw	r10, r18
     2ca:	6a 01       	movw	r12, r20
     2cc:	a6 28       	or	r10, r6
     2ce:	b7 28       	or	r11, r7
     2d0:	c8 28       	or	r12, r8
     2d2:	d9 28       	or	r13, r9
     2d4:	0b c0       	rjmp	.+22     	; 0x2ec <_fpadd_parts+0x192>
     2d6:	82 15       	cp	r24, r2
     2d8:	93 05       	cpc	r25, r3
     2da:	2c f0       	brlt	.+10     	; 0x2e6 <_fpadd_parts+0x18c>
     2dc:	1c 01       	movw	r2, r24
     2de:	aa 24       	eor	r10, r10
     2e0:	bb 24       	eor	r11, r11
     2e2:	65 01       	movw	r12, r10
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <_fpadd_parts+0x192>
     2e6:	ee 24       	eor	r14, r14
     2e8:	ff 24       	eor	r15, r15
     2ea:	87 01       	movw	r16, r14
     2ec:	11 96       	adiw	r26, 0x01	; 1
     2ee:	9c 91       	ld	r25, X
     2f0:	d2 01       	movw	r26, r4
     2f2:	11 96       	adiw	r26, 0x01	; 1
     2f4:	8c 91       	ld	r24, X
     2f6:	98 17       	cp	r25, r24
     2f8:	09 f4       	brne	.+2      	; 0x2fc <_fpadd_parts+0x1a2>
     2fa:	45 c0       	rjmp	.+138    	; 0x386 <_fpadd_parts+0x22c>
     2fc:	99 23       	and	r25, r25
     2fe:	39 f0       	breq	.+14     	; 0x30e <_fpadd_parts+0x1b4>
     300:	a8 01       	movw	r20, r16
     302:	97 01       	movw	r18, r14
     304:	2a 19       	sub	r18, r10
     306:	3b 09       	sbc	r19, r11
     308:	4c 09       	sbc	r20, r12
     30a:	5d 09       	sbc	r21, r13
     30c:	06 c0       	rjmp	.+12     	; 0x31a <_fpadd_parts+0x1c0>
     30e:	a6 01       	movw	r20, r12
     310:	95 01       	movw	r18, r10
     312:	2e 19       	sub	r18, r14
     314:	3f 09       	sbc	r19, r15
     316:	40 0b       	sbc	r20, r16
     318:	51 0b       	sbc	r21, r17
     31a:	57 fd       	sbrc	r21, 7
     31c:	08 c0       	rjmp	.+16     	; 0x32e <_fpadd_parts+0x1d4>
     31e:	11 82       	std	Z+1, r1	; 0x01
     320:	33 82       	std	Z+3, r3	; 0x03
     322:	22 82       	std	Z+2, r2	; 0x02
     324:	24 83       	std	Z+4, r18	; 0x04
     326:	35 83       	std	Z+5, r19	; 0x05
     328:	46 83       	std	Z+6, r20	; 0x06
     32a:	57 83       	std	Z+7, r21	; 0x07
     32c:	1d c0       	rjmp	.+58     	; 0x368 <_fpadd_parts+0x20e>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	81 83       	std	Z+1, r24	; 0x01
     332:	33 82       	std	Z+3, r3	; 0x03
     334:	22 82       	std	Z+2, r2	; 0x02
     336:	88 27       	eor	r24, r24
     338:	99 27       	eor	r25, r25
     33a:	dc 01       	movw	r26, r24
     33c:	82 1b       	sub	r24, r18
     33e:	93 0b       	sbc	r25, r19
     340:	a4 0b       	sbc	r26, r20
     342:	b5 0b       	sbc	r27, r21
     344:	84 83       	std	Z+4, r24	; 0x04
     346:	95 83       	std	Z+5, r25	; 0x05
     348:	a6 83       	std	Z+6, r26	; 0x06
     34a:	b7 83       	std	Z+7, r27	; 0x07
     34c:	0d c0       	rjmp	.+26     	; 0x368 <_fpadd_parts+0x20e>
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	44 1f       	adc	r20, r20
     354:	55 1f       	adc	r21, r21
     356:	24 83       	std	Z+4, r18	; 0x04
     358:	35 83       	std	Z+5, r19	; 0x05
     35a:	46 83       	std	Z+6, r20	; 0x06
     35c:	57 83       	std	Z+7, r21	; 0x07
     35e:	82 81       	ldd	r24, Z+2	; 0x02
     360:	93 81       	ldd	r25, Z+3	; 0x03
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	93 83       	std	Z+3, r25	; 0x03
     366:	82 83       	std	Z+2, r24	; 0x02
     368:	24 81       	ldd	r18, Z+4	; 0x04
     36a:	35 81       	ldd	r19, Z+5	; 0x05
     36c:	46 81       	ldd	r20, Z+6	; 0x06
     36e:	57 81       	ldd	r21, Z+7	; 0x07
     370:	da 01       	movw	r26, r20
     372:	c9 01       	movw	r24, r18
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	a1 09       	sbc	r26, r1
     378:	b1 09       	sbc	r27, r1
     37a:	8f 5f       	subi	r24, 0xFF	; 255
     37c:	9f 4f       	sbci	r25, 0xFF	; 255
     37e:	af 4f       	sbci	r26, 0xFF	; 255
     380:	bf 43       	sbci	r27, 0x3F	; 63
     382:	28 f3       	brcs	.-54     	; 0x34e <_fpadd_parts+0x1f4>
     384:	0b c0       	rjmp	.+22     	; 0x39c <_fpadd_parts+0x242>
     386:	91 83       	std	Z+1, r25	; 0x01
     388:	33 82       	std	Z+3, r3	; 0x03
     38a:	22 82       	std	Z+2, r2	; 0x02
     38c:	ea 0c       	add	r14, r10
     38e:	fb 1c       	adc	r15, r11
     390:	0c 1d       	adc	r16, r12
     392:	1d 1d       	adc	r17, r13
     394:	e4 82       	std	Z+4, r14	; 0x04
     396:	f5 82       	std	Z+5, r15	; 0x05
     398:	06 83       	std	Z+6, r16	; 0x06
     39a:	17 83       	std	Z+7, r17	; 0x07
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	80 83       	st	Z, r24
     3a0:	24 81       	ldd	r18, Z+4	; 0x04
     3a2:	35 81       	ldd	r19, Z+5	; 0x05
     3a4:	46 81       	ldd	r20, Z+6	; 0x06
     3a6:	57 81       	ldd	r21, Z+7	; 0x07
     3a8:	57 ff       	sbrs	r21, 7
     3aa:	1a c0       	rjmp	.+52     	; 0x3e0 <_fpadd_parts+0x286>
     3ac:	c9 01       	movw	r24, r18
     3ae:	aa 27       	eor	r26, r26
     3b0:	97 fd       	sbrc	r25, 7
     3b2:	a0 95       	com	r26
     3b4:	ba 2f       	mov	r27, r26
     3b6:	81 70       	andi	r24, 0x01	; 1
     3b8:	90 70       	andi	r25, 0x00	; 0
     3ba:	a0 70       	andi	r26, 0x00	; 0
     3bc:	b0 70       	andi	r27, 0x00	; 0
     3be:	56 95       	lsr	r21
     3c0:	47 95       	ror	r20
     3c2:	37 95       	ror	r19
     3c4:	27 95       	ror	r18
     3c6:	82 2b       	or	r24, r18
     3c8:	93 2b       	or	r25, r19
     3ca:	a4 2b       	or	r26, r20
     3cc:	b5 2b       	or	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	93 81       	ldd	r25, Z+3	; 0x03
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	93 83       	std	Z+3, r25	; 0x03
     3de:	82 83       	std	Z+2, r24	; 0x02
     3e0:	df 01       	movw	r26, r30
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <_fpadd_parts+0x28c>
     3e4:	d2 01       	movw	r26, r4
     3e6:	cd 01       	movw	r24, r26
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	e2 e1       	ldi	r30, 0x12	; 18
     3ee:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__epilogue_restores__>

000003f2 <__subsf3>:
     3f2:	a0 e2       	ldi	r26, 0x20	; 32
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	ef ef       	ldi	r30, 0xFF	; 255
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__prologue_saves__+0x18>
     3fe:	69 83       	std	Y+1, r22	; 0x01
     400:	7a 83       	std	Y+2, r23	; 0x02
     402:	8b 83       	std	Y+3, r24	; 0x03
     404:	9c 83       	std	Y+4, r25	; 0x04
     406:	2d 83       	std	Y+5, r18	; 0x05
     408:	3e 83       	std	Y+6, r19	; 0x06
     40a:	4f 83       	std	Y+7, r20	; 0x07
     40c:	58 87       	std	Y+8, r21	; 0x08
     40e:	e9 e0       	ldi	r30, 0x09	; 9
     410:	ee 2e       	mov	r14, r30
     412:	f1 2c       	mov	r15, r1
     414:	ec 0e       	add	r14, r28
     416:	fd 1e       	adc	r15, r29
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	b7 01       	movw	r22, r14
     41e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     422:	8e 01       	movw	r16, r28
     424:	0f 5e       	subi	r16, 0xEF	; 239
     426:	1f 4f       	sbci	r17, 0xFF	; 255
     428:	ce 01       	movw	r24, r28
     42a:	05 96       	adiw	r24, 0x05	; 5
     42c:	b8 01       	movw	r22, r16
     42e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     432:	8a 89       	ldd	r24, Y+18	; 0x12
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	89 27       	eor	r24, r25
     438:	8a 8b       	std	Y+18, r24	; 0x12
     43a:	c7 01       	movw	r24, r14
     43c:	b8 01       	movw	r22, r16
     43e:	ae 01       	movw	r20, r28
     440:	47 5e       	subi	r20, 0xE7	; 231
     442:	5f 4f       	sbci	r21, 0xFF	; 255
     444:	0e 94 ad 00 	call	0x15a	; 0x15a <_fpadd_parts>
     448:	0e 94 35 04 	call	0x86a	; 0x86a <__pack_f>
     44c:	a0 96       	adiw	r28, 0x20	; 32
     44e:	e6 e0       	ldi	r30, 0x06	; 6
     450:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__epilogue_restores__+0x18>

00000454 <__addsf3>:
     454:	a0 e2       	ldi	r26, 0x20	; 32
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e0 e3       	ldi	r30, 0x30	; 48
     45a:	f2 e0       	ldi	r31, 0x02	; 2
     45c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__prologue_saves__+0x18>
     460:	69 83       	std	Y+1, r22	; 0x01
     462:	7a 83       	std	Y+2, r23	; 0x02
     464:	8b 83       	std	Y+3, r24	; 0x03
     466:	9c 83       	std	Y+4, r25	; 0x04
     468:	2d 83       	std	Y+5, r18	; 0x05
     46a:	3e 83       	std	Y+6, r19	; 0x06
     46c:	4f 83       	std	Y+7, r20	; 0x07
     46e:	58 87       	std	Y+8, r21	; 0x08
     470:	f9 e0       	ldi	r31, 0x09	; 9
     472:	ef 2e       	mov	r14, r31
     474:	f1 2c       	mov	r15, r1
     476:	ec 0e       	add	r14, r28
     478:	fd 1e       	adc	r15, r29
     47a:	ce 01       	movw	r24, r28
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	b7 01       	movw	r22, r14
     480:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     484:	8e 01       	movw	r16, r28
     486:	0f 5e       	subi	r16, 0xEF	; 239
     488:	1f 4f       	sbci	r17, 0xFF	; 255
     48a:	ce 01       	movw	r24, r28
     48c:	05 96       	adiw	r24, 0x05	; 5
     48e:	b8 01       	movw	r22, r16
     490:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     494:	c7 01       	movw	r24, r14
     496:	b8 01       	movw	r22, r16
     498:	ae 01       	movw	r20, r28
     49a:	47 5e       	subi	r20, 0xE7	; 231
     49c:	5f 4f       	sbci	r21, 0xFF	; 255
     49e:	0e 94 ad 00 	call	0x15a	; 0x15a <_fpadd_parts>
     4a2:	0e 94 35 04 	call	0x86a	; 0x86a <__pack_f>
     4a6:	a0 96       	adiw	r28, 0x20	; 32
     4a8:	e6 e0       	ldi	r30, 0x06	; 6
     4aa:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__epilogue_restores__+0x18>

000004ae <__mulsf3>:
     4ae:	a0 e2       	ldi	r26, 0x20	; 32
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	ed e5       	ldi	r30, 0x5D	; 93
     4b4:	f2 e0       	ldi	r31, 0x02	; 2
     4b6:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__prologue_saves__>
     4ba:	69 83       	std	Y+1, r22	; 0x01
     4bc:	7a 83       	std	Y+2, r23	; 0x02
     4be:	8b 83       	std	Y+3, r24	; 0x03
     4c0:	9c 83       	std	Y+4, r25	; 0x04
     4c2:	2d 83       	std	Y+5, r18	; 0x05
     4c4:	3e 83       	std	Y+6, r19	; 0x06
     4c6:	4f 83       	std	Y+7, r20	; 0x07
     4c8:	58 87       	std	Y+8, r21	; 0x08
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	be 01       	movw	r22, r28
     4d0:	67 5f       	subi	r22, 0xF7	; 247
     4d2:	7f 4f       	sbci	r23, 0xFF	; 255
     4d4:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     4d8:	ce 01       	movw	r24, r28
     4da:	05 96       	adiw	r24, 0x05	; 5
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5e       	subi	r22, 0xEF	; 239
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     4e6:	99 85       	ldd	r25, Y+9	; 0x09
     4e8:	92 30       	cpi	r25, 0x02	; 2
     4ea:	88 f0       	brcs	.+34     	; 0x50e <__mulsf3+0x60>
     4ec:	89 89       	ldd	r24, Y+17	; 0x11
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	c8 f0       	brcs	.+50     	; 0x524 <__mulsf3+0x76>
     4f2:	94 30       	cpi	r25, 0x04	; 4
     4f4:	19 f4       	brne	.+6      	; 0x4fc <__mulsf3+0x4e>
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	51 f4       	brne	.+20     	; 0x50e <__mulsf3+0x60>
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <__mulsf3+0x56>
     4fc:	84 30       	cpi	r24, 0x04	; 4
     4fe:	29 f4       	brne	.+10     	; 0x50a <__mulsf3+0x5c>
     500:	92 30       	cpi	r25, 0x02	; 2
     502:	81 f4       	brne	.+32     	; 0x524 <__mulsf3+0x76>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	c6 c0       	rjmp	.+396    	; 0x696 <__mulsf3+0x1e8>
     50a:	92 30       	cpi	r25, 0x02	; 2
     50c:	49 f4       	brne	.+18     	; 0x520 <__mulsf3+0x72>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	9a 85       	ldd	r25, Y+10	; 0x0a
     512:	8a 89       	ldd	r24, Y+18	; 0x12
     514:	98 13       	cpse	r25, r24
     516:	21 e0       	ldi	r18, 0x01	; 1
     518:	2a 87       	std	Y+10, r18	; 0x0a
     51a:	ce 01       	movw	r24, r28
     51c:	09 96       	adiw	r24, 0x09	; 9
     51e:	bb c0       	rjmp	.+374    	; 0x696 <__mulsf3+0x1e8>
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	49 f4       	brne	.+18     	; 0x536 <__mulsf3+0x88>
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	9a 85       	ldd	r25, Y+10	; 0x0a
     528:	8a 89       	ldd	r24, Y+18	; 0x12
     52a:	98 13       	cpse	r25, r24
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	2a 8b       	std	Y+18, r18	; 0x12
     530:	ce 01       	movw	r24, r28
     532:	41 96       	adiw	r24, 0x11	; 17
     534:	b0 c0       	rjmp	.+352    	; 0x696 <__mulsf3+0x1e8>
     536:	2d 84       	ldd	r2, Y+13	; 0x0d
     538:	3e 84       	ldd	r3, Y+14	; 0x0e
     53a:	4f 84       	ldd	r4, Y+15	; 0x0f
     53c:	58 88       	ldd	r5, Y+16	; 0x10
     53e:	6d 88       	ldd	r6, Y+21	; 0x15
     540:	7e 88       	ldd	r7, Y+22	; 0x16
     542:	8f 88       	ldd	r8, Y+23	; 0x17
     544:	98 8c       	ldd	r9, Y+24	; 0x18
     546:	ee 24       	eor	r14, r14
     548:	ff 24       	eor	r15, r15
     54a:	87 01       	movw	r16, r14
     54c:	aa 24       	eor	r10, r10
     54e:	bb 24       	eor	r11, r11
     550:	65 01       	movw	r12, r10
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	c1 01       	movw	r24, r2
     560:	81 70       	andi	r24, 0x01	; 1
     562:	90 70       	andi	r25, 0x00	; 0
     564:	89 2b       	or	r24, r25
     566:	e9 f0       	breq	.+58     	; 0x5a2 <__mulsf3+0xf4>
     568:	e6 0c       	add	r14, r6
     56a:	f7 1c       	adc	r15, r7
     56c:	08 1d       	adc	r16, r8
     56e:	19 1d       	adc	r17, r9
     570:	9a 01       	movw	r18, r20
     572:	ab 01       	movw	r20, r22
     574:	2a 0d       	add	r18, r10
     576:	3b 1d       	adc	r19, r11
     578:	4c 1d       	adc	r20, r12
     57a:	5d 1d       	adc	r21, r13
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	a0 e0       	ldi	r26, 0x00	; 0
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e6 14       	cp	r14, r6
     586:	f7 04       	cpc	r15, r7
     588:	08 05       	cpc	r16, r8
     58a:	19 05       	cpc	r17, r9
     58c:	20 f4       	brcc	.+8      	; 0x596 <__mulsf3+0xe8>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	ba 01       	movw	r22, r20
     598:	a9 01       	movw	r20, r18
     59a:	48 0f       	add	r20, r24
     59c:	59 1f       	adc	r21, r25
     59e:	6a 1f       	adc	r22, r26
     5a0:	7b 1f       	adc	r23, r27
     5a2:	aa 0c       	add	r10, r10
     5a4:	bb 1c       	adc	r11, r11
     5a6:	cc 1c       	adc	r12, r12
     5a8:	dd 1c       	adc	r13, r13
     5aa:	97 fe       	sbrs	r9, 7
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <__mulsf3+0x110>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	a0 e0       	ldi	r26, 0x00	; 0
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	a8 2a       	or	r10, r24
     5b8:	b9 2a       	or	r11, r25
     5ba:	ca 2a       	or	r12, r26
     5bc:	db 2a       	or	r13, r27
     5be:	31 96       	adiw	r30, 0x01	; 1
     5c0:	e0 32       	cpi	r30, 0x20	; 32
     5c2:	f1 05       	cpc	r31, r1
     5c4:	49 f0       	breq	.+18     	; 0x5d8 <__mulsf3+0x12a>
     5c6:	66 0c       	add	r6, r6
     5c8:	77 1c       	adc	r7, r7
     5ca:	88 1c       	adc	r8, r8
     5cc:	99 1c       	adc	r9, r9
     5ce:	56 94       	lsr	r5
     5d0:	47 94       	ror	r4
     5d2:	37 94       	ror	r3
     5d4:	27 94       	ror	r2
     5d6:	c3 cf       	rjmp	.-122    	; 0x55e <__mulsf3+0xb0>
     5d8:	fa 85       	ldd	r31, Y+10	; 0x0a
     5da:	ea 89       	ldd	r30, Y+18	; 0x12
     5dc:	2b 89       	ldd	r18, Y+19	; 0x13
     5de:	3c 89       	ldd	r19, Y+20	; 0x14
     5e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e4:	28 0f       	add	r18, r24
     5e6:	39 1f       	adc	r19, r25
     5e8:	2e 5f       	subi	r18, 0xFE	; 254
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	17 c0       	rjmp	.+46     	; 0x61c <__mulsf3+0x16e>
     5ee:	ca 01       	movw	r24, r20
     5f0:	81 70       	andi	r24, 0x01	; 1
     5f2:	90 70       	andi	r25, 0x00	; 0
     5f4:	89 2b       	or	r24, r25
     5f6:	61 f0       	breq	.+24     	; 0x610 <__mulsf3+0x162>
     5f8:	16 95       	lsr	r17
     5fa:	07 95       	ror	r16
     5fc:	f7 94       	ror	r15
     5fe:	e7 94       	ror	r14
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a0 e0       	ldi	r26, 0x00	; 0
     606:	b0 e8       	ldi	r27, 0x80	; 128
     608:	e8 2a       	or	r14, r24
     60a:	f9 2a       	or	r15, r25
     60c:	0a 2b       	or	r16, r26
     60e:	1b 2b       	or	r17, r27
     610:	76 95       	lsr	r23
     612:	67 95       	ror	r22
     614:	57 95       	ror	r21
     616:	47 95       	ror	r20
     618:	2f 5f       	subi	r18, 0xFF	; 255
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
     61c:	77 fd       	sbrc	r23, 7
     61e:	e7 cf       	rjmp	.-50     	; 0x5ee <__mulsf3+0x140>
     620:	0c c0       	rjmp	.+24     	; 0x63a <__mulsf3+0x18c>
     622:	44 0f       	add	r20, r20
     624:	55 1f       	adc	r21, r21
     626:	66 1f       	adc	r22, r22
     628:	77 1f       	adc	r23, r23
     62a:	17 fd       	sbrc	r17, 7
     62c:	41 60       	ori	r20, 0x01	; 1
     62e:	ee 0c       	add	r14, r14
     630:	ff 1c       	adc	r15, r15
     632:	00 1f       	adc	r16, r16
     634:	11 1f       	adc	r17, r17
     636:	21 50       	subi	r18, 0x01	; 1
     638:	30 40       	sbci	r19, 0x00	; 0
     63a:	40 30       	cpi	r20, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	59 07       	cpc	r21, r25
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	69 07       	cpc	r22, r25
     644:	90 e4       	ldi	r25, 0x40	; 64
     646:	79 07       	cpc	r23, r25
     648:	60 f3       	brcs	.-40     	; 0x622 <__mulsf3+0x174>
     64a:	2b 8f       	std	Y+27, r18	; 0x1b
     64c:	3c 8f       	std	Y+28, r19	; 0x1c
     64e:	db 01       	movw	r26, r22
     650:	ca 01       	movw	r24, r20
     652:	8f 77       	andi	r24, 0x7F	; 127
     654:	90 70       	andi	r25, 0x00	; 0
     656:	a0 70       	andi	r26, 0x00	; 0
     658:	b0 70       	andi	r27, 0x00	; 0
     65a:	80 34       	cpi	r24, 0x40	; 64
     65c:	91 05       	cpc	r25, r1
     65e:	a1 05       	cpc	r26, r1
     660:	b1 05       	cpc	r27, r1
     662:	61 f4       	brne	.+24     	; 0x67c <__mulsf3+0x1ce>
     664:	47 fd       	sbrc	r20, 7
     666:	0a c0       	rjmp	.+20     	; 0x67c <__mulsf3+0x1ce>
     668:	e1 14       	cp	r14, r1
     66a:	f1 04       	cpc	r15, r1
     66c:	01 05       	cpc	r16, r1
     66e:	11 05       	cpc	r17, r1
     670:	29 f0       	breq	.+10     	; 0x67c <__mulsf3+0x1ce>
     672:	40 5c       	subi	r20, 0xC0	; 192
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	6f 4f       	sbci	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	40 78       	andi	r20, 0x80	; 128
     67c:	1a 8e       	std	Y+26, r1	; 0x1a
     67e:	fe 17       	cp	r31, r30
     680:	11 f0       	breq	.+4      	; 0x686 <__mulsf3+0x1d8>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	8a 8f       	std	Y+26, r24	; 0x1a
     686:	4d 8f       	std	Y+29, r20	; 0x1d
     688:	5e 8f       	std	Y+30, r21	; 0x1e
     68a:	6f 8f       	std	Y+31, r22	; 0x1f
     68c:	78 a3       	std	Y+32, r23	; 0x20
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	89 8f       	std	Y+25, r24	; 0x19
     692:	ce 01       	movw	r24, r28
     694:	49 96       	adiw	r24, 0x19	; 25
     696:	0e 94 35 04 	call	0x86a	; 0x86a <__pack_f>
     69a:	a0 96       	adiw	r28, 0x20	; 32
     69c:	e2 e1       	ldi	r30, 0x12	; 18
     69e:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__epilogue_restores__>

000006a2 <__gtsf2>:
     6a2:	a8 e1       	ldi	r26, 0x18	; 24
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	e7 e5       	ldi	r30, 0x57	; 87
     6a8:	f3 e0       	ldi	r31, 0x03	; 3
     6aa:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__prologue_saves__+0x18>
     6ae:	69 83       	std	Y+1, r22	; 0x01
     6b0:	7a 83       	std	Y+2, r23	; 0x02
     6b2:	8b 83       	std	Y+3, r24	; 0x03
     6b4:	9c 83       	std	Y+4, r25	; 0x04
     6b6:	2d 83       	std	Y+5, r18	; 0x05
     6b8:	3e 83       	std	Y+6, r19	; 0x06
     6ba:	4f 83       	std	Y+7, r20	; 0x07
     6bc:	58 87       	std	Y+8, r21	; 0x08
     6be:	89 e0       	ldi	r24, 0x09	; 9
     6c0:	e8 2e       	mov	r14, r24
     6c2:	f1 2c       	mov	r15, r1
     6c4:	ec 0e       	add	r14, r28
     6c6:	fd 1e       	adc	r15, r29
     6c8:	ce 01       	movw	r24, r28
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	b7 01       	movw	r22, r14
     6ce:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     6d2:	8e 01       	movw	r16, r28
     6d4:	0f 5e       	subi	r16, 0xEF	; 239
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255
     6d8:	ce 01       	movw	r24, r28
     6da:	05 96       	adiw	r24, 0x05	; 5
     6dc:	b8 01       	movw	r22, r16
     6de:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     6e2:	89 85       	ldd	r24, Y+9	; 0x09
     6e4:	82 30       	cpi	r24, 0x02	; 2
     6e6:	40 f0       	brcs	.+16     	; 0x6f8 <__gtsf2+0x56>
     6e8:	89 89       	ldd	r24, Y+17	; 0x11
     6ea:	82 30       	cpi	r24, 0x02	; 2
     6ec:	28 f0       	brcs	.+10     	; 0x6f8 <__gtsf2+0x56>
     6ee:	c7 01       	movw	r24, r14
     6f0:	b8 01       	movw	r22, r16
     6f2:	0e 94 82 05 	call	0xb04	; 0xb04 <__fpcmp_parts_f>
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <__gtsf2+0x58>
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	68 96       	adiw	r28, 0x18	; 24
     6fc:	e6 e0       	ldi	r30, 0x06	; 6
     6fe:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__epilogue_restores__+0x18>

00000702 <__gesf2>:
     702:	a8 e1       	ldi	r26, 0x18	; 24
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	e7 e8       	ldi	r30, 0x87	; 135
     708:	f3 e0       	ldi	r31, 0x03	; 3
     70a:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__prologue_saves__+0x18>
     70e:	69 83       	std	Y+1, r22	; 0x01
     710:	7a 83       	std	Y+2, r23	; 0x02
     712:	8b 83       	std	Y+3, r24	; 0x03
     714:	9c 83       	std	Y+4, r25	; 0x04
     716:	2d 83       	std	Y+5, r18	; 0x05
     718:	3e 83       	std	Y+6, r19	; 0x06
     71a:	4f 83       	std	Y+7, r20	; 0x07
     71c:	58 87       	std	Y+8, r21	; 0x08
     71e:	89 e0       	ldi	r24, 0x09	; 9
     720:	e8 2e       	mov	r14, r24
     722:	f1 2c       	mov	r15, r1
     724:	ec 0e       	add	r14, r28
     726:	fd 1e       	adc	r15, r29
     728:	ce 01       	movw	r24, r28
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	b7 01       	movw	r22, r14
     72e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     732:	8e 01       	movw	r16, r28
     734:	0f 5e       	subi	r16, 0xEF	; 239
     736:	1f 4f       	sbci	r17, 0xFF	; 255
     738:	ce 01       	movw	r24, r28
     73a:	05 96       	adiw	r24, 0x05	; 5
     73c:	b8 01       	movw	r22, r16
     73e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     742:	89 85       	ldd	r24, Y+9	; 0x09
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	40 f0       	brcs	.+16     	; 0x758 <__gesf2+0x56>
     748:	89 89       	ldd	r24, Y+17	; 0x11
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	28 f0       	brcs	.+10     	; 0x758 <__gesf2+0x56>
     74e:	c7 01       	movw	r24, r14
     750:	b8 01       	movw	r22, r16
     752:	0e 94 82 05 	call	0xb04	; 0xb04 <__fpcmp_parts_f>
     756:	01 c0       	rjmp	.+2      	; 0x75a <__gesf2+0x58>
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	68 96       	adiw	r28, 0x18	; 24
     75c:	e6 e0       	ldi	r30, 0x06	; 6
     75e:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__epilogue_restores__+0x18>

00000762 <__ltsf2>:
     762:	a8 e1       	ldi	r26, 0x18	; 24
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e7 eb       	ldi	r30, 0xB7	; 183
     768:	f3 e0       	ldi	r31, 0x03	; 3
     76a:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__prologue_saves__+0x18>
     76e:	69 83       	std	Y+1, r22	; 0x01
     770:	7a 83       	std	Y+2, r23	; 0x02
     772:	8b 83       	std	Y+3, r24	; 0x03
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	2d 83       	std	Y+5, r18	; 0x05
     778:	3e 83       	std	Y+6, r19	; 0x06
     77a:	4f 83       	std	Y+7, r20	; 0x07
     77c:	58 87       	std	Y+8, r21	; 0x08
     77e:	89 e0       	ldi	r24, 0x09	; 9
     780:	e8 2e       	mov	r14, r24
     782:	f1 2c       	mov	r15, r1
     784:	ec 0e       	add	r14, r28
     786:	fd 1e       	adc	r15, r29
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	b7 01       	movw	r22, r14
     78e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     792:	8e 01       	movw	r16, r28
     794:	0f 5e       	subi	r16, 0xEF	; 239
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	ce 01       	movw	r24, r28
     79a:	05 96       	adiw	r24, 0x05	; 5
     79c:	b8 01       	movw	r22, r16
     79e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     7a2:	89 85       	ldd	r24, Y+9	; 0x09
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	40 f0       	brcs	.+16     	; 0x7b8 <__ltsf2+0x56>
     7a8:	89 89       	ldd	r24, Y+17	; 0x11
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	28 f0       	brcs	.+10     	; 0x7b8 <__ltsf2+0x56>
     7ae:	c7 01       	movw	r24, r14
     7b0:	b8 01       	movw	r22, r16
     7b2:	0e 94 82 05 	call	0xb04	; 0xb04 <__fpcmp_parts_f>
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <__ltsf2+0x58>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	68 96       	adiw	r28, 0x18	; 24
     7bc:	e6 e0       	ldi	r30, 0x06	; 6
     7be:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__epilogue_restores__+0x18>

000007c2 <__fixsfsi>:
     7c2:	ac e0       	ldi	r26, 0x0C	; 12
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	e7 ee       	ldi	r30, 0xE7	; 231
     7c8:	f3 e0       	ldi	r31, 0x03	; 3
     7ca:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__prologue_saves__+0x20>
     7ce:	69 83       	std	Y+1, r22	; 0x01
     7d0:	7a 83       	std	Y+2, r23	; 0x02
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	9c 83       	std	Y+4, r25	; 0x04
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	be 01       	movw	r22, r28
     7dc:	6b 5f       	subi	r22, 0xFB	; 251
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	0e 94 0a 05 	call	0xa14	; 0xa14 <__unpack_f>
     7e4:	8d 81       	ldd	r24, Y+5	; 0x05
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	61 f1       	breq	.+88     	; 0x842 <__fixsfsi+0x80>
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	50 f1       	brcs	.+84     	; 0x842 <__fixsfsi+0x80>
     7ee:	84 30       	cpi	r24, 0x04	; 4
     7f0:	21 f4       	brne	.+8      	; 0x7fa <__fixsfsi+0x38>
     7f2:	8e 81       	ldd	r24, Y+6	; 0x06
     7f4:	88 23       	and	r24, r24
     7f6:	51 f1       	breq	.+84     	; 0x84c <__fixsfsi+0x8a>
     7f8:	2e c0       	rjmp	.+92     	; 0x856 <__fixsfsi+0x94>
     7fa:	2f 81       	ldd	r18, Y+7	; 0x07
     7fc:	38 85       	ldd	r19, Y+8	; 0x08
     7fe:	37 fd       	sbrc	r19, 7
     800:	20 c0       	rjmp	.+64     	; 0x842 <__fixsfsi+0x80>
     802:	6e 81       	ldd	r22, Y+6	; 0x06
     804:	2f 31       	cpi	r18, 0x1F	; 31
     806:	31 05       	cpc	r19, r1
     808:	1c f0       	brlt	.+6      	; 0x810 <__fixsfsi+0x4e>
     80a:	66 23       	and	r22, r22
     80c:	f9 f0       	breq	.+62     	; 0x84c <__fixsfsi+0x8a>
     80e:	23 c0       	rjmp	.+70     	; 0x856 <__fixsfsi+0x94>
     810:	8e e1       	ldi	r24, 0x1E	; 30
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	82 1b       	sub	r24, r18
     816:	93 0b       	sbc	r25, r19
     818:	29 85       	ldd	r18, Y+9	; 0x09
     81a:	3a 85       	ldd	r19, Y+10	; 0x0a
     81c:	4b 85       	ldd	r20, Y+11	; 0x0b
     81e:	5c 85       	ldd	r21, Y+12	; 0x0c
     820:	04 c0       	rjmp	.+8      	; 0x82a <__fixsfsi+0x68>
     822:	56 95       	lsr	r21
     824:	47 95       	ror	r20
     826:	37 95       	ror	r19
     828:	27 95       	ror	r18
     82a:	8a 95       	dec	r24
     82c:	d2 f7       	brpl	.-12     	; 0x822 <__fixsfsi+0x60>
     82e:	66 23       	and	r22, r22
     830:	b1 f0       	breq	.+44     	; 0x85e <__fixsfsi+0x9c>
     832:	50 95       	com	r21
     834:	40 95       	com	r20
     836:	30 95       	com	r19
     838:	21 95       	neg	r18
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	4f 4f       	sbci	r20, 0xFF	; 255
     83e:	5f 4f       	sbci	r21, 0xFF	; 255
     840:	0e c0       	rjmp	.+28     	; 0x85e <__fixsfsi+0x9c>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	09 c0       	rjmp	.+18     	; 0x85e <__fixsfsi+0x9c>
     84c:	2f ef       	ldi	r18, 0xFF	; 255
     84e:	3f ef       	ldi	r19, 0xFF	; 255
     850:	4f ef       	ldi	r20, 0xFF	; 255
     852:	5f e7       	ldi	r21, 0x7F	; 127
     854:	04 c0       	rjmp	.+8      	; 0x85e <__fixsfsi+0x9c>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e8       	ldi	r21, 0x80	; 128
     85e:	b9 01       	movw	r22, r18
     860:	ca 01       	movw	r24, r20
     862:	2c 96       	adiw	r28, 0x0c	; 12
     864:	e2 e0       	ldi	r30, 0x02	; 2
     866:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__epilogue_restores__+0x20>

0000086a <__pack_f>:
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	fc 01       	movw	r30, r24
     876:	e4 80       	ldd	r14, Z+4	; 0x04
     878:	f5 80       	ldd	r15, Z+5	; 0x05
     87a:	06 81       	ldd	r16, Z+6	; 0x06
     87c:	17 81       	ldd	r17, Z+7	; 0x07
     87e:	d1 80       	ldd	r13, Z+1	; 0x01
     880:	80 81       	ld	r24, Z
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	48 f4       	brcc	.+18     	; 0x898 <__pack_f+0x2e>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	a0 e1       	ldi	r26, 0x10	; 16
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e8 2a       	or	r14, r24
     890:	f9 2a       	or	r15, r25
     892:	0a 2b       	or	r16, r26
     894:	1b 2b       	or	r17, r27
     896:	a5 c0       	rjmp	.+330    	; 0x9e2 <__pack_f+0x178>
     898:	84 30       	cpi	r24, 0x04	; 4
     89a:	09 f4       	brne	.+2      	; 0x89e <__pack_f+0x34>
     89c:	9f c0       	rjmp	.+318    	; 0x9dc <__pack_f+0x172>
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	21 f4       	brne	.+8      	; 0x8aa <__pack_f+0x40>
     8a2:	ee 24       	eor	r14, r14
     8a4:	ff 24       	eor	r15, r15
     8a6:	87 01       	movw	r16, r14
     8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <__pack_f+0x4a>
     8aa:	e1 14       	cp	r14, r1
     8ac:	f1 04       	cpc	r15, r1
     8ae:	01 05       	cpc	r16, r1
     8b0:	11 05       	cpc	r17, r1
     8b2:	19 f4       	brne	.+6      	; 0x8ba <__pack_f+0x50>
     8b4:	e0 e0       	ldi	r30, 0x00	; 0
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	96 c0       	rjmp	.+300    	; 0x9e6 <__pack_f+0x17c>
     8ba:	62 81       	ldd	r22, Z+2	; 0x02
     8bc:	73 81       	ldd	r23, Z+3	; 0x03
     8be:	9f ef       	ldi	r25, 0xFF	; 255
     8c0:	62 38       	cpi	r22, 0x82	; 130
     8c2:	79 07       	cpc	r23, r25
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <__pack_f+0x5e>
     8c6:	5b c0       	rjmp	.+182    	; 0x97e <__pack_f+0x114>
     8c8:	22 e8       	ldi	r18, 0x82	; 130
     8ca:	3f ef       	ldi	r19, 0xFF	; 255
     8cc:	26 1b       	sub	r18, r22
     8ce:	37 0b       	sbc	r19, r23
     8d0:	2a 31       	cpi	r18, 0x1A	; 26
     8d2:	31 05       	cpc	r19, r1
     8d4:	2c f0       	brlt	.+10     	; 0x8e0 <__pack_f+0x76>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	2a c0       	rjmp	.+84     	; 0x934 <__pack_f+0xca>
     8e0:	b8 01       	movw	r22, r16
     8e2:	a7 01       	movw	r20, r14
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0x86>
     8e8:	76 95       	lsr	r23
     8ea:	67 95       	ror	r22
     8ec:	57 95       	ror	r21
     8ee:	47 95       	ror	r20
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__pack_f+0x7e>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	a0 e0       	ldi	r26, 0x00	; 0
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__pack_f+0x9c>
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	aa 1f       	adc	r26, r26
     904:	bb 1f       	adc	r27, r27
     906:	2a 95       	dec	r18
     908:	d2 f7       	brpl	.-12     	; 0x8fe <__pack_f+0x94>
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	a1 09       	sbc	r26, r1
     90e:	b1 09       	sbc	r27, r1
     910:	8e 21       	and	r24, r14
     912:	9f 21       	and	r25, r15
     914:	a0 23       	and	r26, r16
     916:	b1 23       	and	r27, r17
     918:	00 97       	sbiw	r24, 0x00	; 0
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	21 f0       	breq	.+8      	; 0x928 <__pack_f+0xbe>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	9a 01       	movw	r18, r20
     92a:	ab 01       	movw	r20, r22
     92c:	28 2b       	or	r18, r24
     92e:	39 2b       	or	r19, r25
     930:	4a 2b       	or	r20, r26
     932:	5b 2b       	or	r21, r27
     934:	da 01       	movw	r26, r20
     936:	c9 01       	movw	r24, r18
     938:	8f 77       	andi	r24, 0x7F	; 127
     93a:	90 70       	andi	r25, 0x00	; 0
     93c:	a0 70       	andi	r26, 0x00	; 0
     93e:	b0 70       	andi	r27, 0x00	; 0
     940:	80 34       	cpi	r24, 0x40	; 64
     942:	91 05       	cpc	r25, r1
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	39 f4       	brne	.+14     	; 0x958 <__pack_f+0xee>
     94a:	27 ff       	sbrs	r18, 7
     94c:	09 c0       	rjmp	.+18     	; 0x960 <__pack_f+0xf6>
     94e:	20 5c       	subi	r18, 0xC0	; 192
     950:	3f 4f       	sbci	r19, 0xFF	; 255
     952:	4f 4f       	sbci	r20, 0xFF	; 255
     954:	5f 4f       	sbci	r21, 0xFF	; 255
     956:	04 c0       	rjmp	.+8      	; 0x960 <__pack_f+0xf6>
     958:	21 5c       	subi	r18, 0xC1	; 193
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	4f 4f       	sbci	r20, 0xFF	; 255
     95e:	5f 4f       	sbci	r21, 0xFF	; 255
     960:	e0 e0       	ldi	r30, 0x00	; 0
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	20 30       	cpi	r18, 0x00	; 0
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	3a 07       	cpc	r19, r26
     96a:	a0 e0       	ldi	r26, 0x00	; 0
     96c:	4a 07       	cpc	r20, r26
     96e:	a0 e4       	ldi	r26, 0x40	; 64
     970:	5a 07       	cpc	r21, r26
     972:	10 f0       	brcs	.+4      	; 0x978 <__pack_f+0x10e>
     974:	e1 e0       	ldi	r30, 0x01	; 1
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	79 01       	movw	r14, r18
     97a:	8a 01       	movw	r16, r20
     97c:	27 c0       	rjmp	.+78     	; 0x9cc <__pack_f+0x162>
     97e:	60 38       	cpi	r22, 0x80	; 128
     980:	71 05       	cpc	r23, r1
     982:	64 f5       	brge	.+88     	; 0x9dc <__pack_f+0x172>
     984:	fb 01       	movw	r30, r22
     986:	e1 58       	subi	r30, 0x81	; 129
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	d8 01       	movw	r26, r16
     98c:	c7 01       	movw	r24, r14
     98e:	8f 77       	andi	r24, 0x7F	; 127
     990:	90 70       	andi	r25, 0x00	; 0
     992:	a0 70       	andi	r26, 0x00	; 0
     994:	b0 70       	andi	r27, 0x00	; 0
     996:	80 34       	cpi	r24, 0x40	; 64
     998:	91 05       	cpc	r25, r1
     99a:	a1 05       	cpc	r26, r1
     99c:	b1 05       	cpc	r27, r1
     99e:	39 f4       	brne	.+14     	; 0x9ae <__pack_f+0x144>
     9a0:	e7 fe       	sbrs	r14, 7
     9a2:	0d c0       	rjmp	.+26     	; 0x9be <__pack_f+0x154>
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__pack_f+0x14c>
     9ae:	8f e3       	ldi	r24, 0x3F	; 63
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	a0 e0       	ldi	r26, 0x00	; 0
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	e8 0e       	add	r14, r24
     9b8:	f9 1e       	adc	r15, r25
     9ba:	0a 1f       	adc	r16, r26
     9bc:	1b 1f       	adc	r17, r27
     9be:	17 ff       	sbrs	r17, 7
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <__pack_f+0x162>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	31 96       	adiw	r30, 0x01	; 1
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	16 95       	lsr	r17
     9d0:	07 95       	ror	r16
     9d2:	f7 94       	ror	r15
     9d4:	e7 94       	ror	r14
     9d6:	8a 95       	dec	r24
     9d8:	d1 f7       	brne	.-12     	; 0x9ce <__pack_f+0x164>
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <__pack_f+0x17c>
     9dc:	ee 24       	eor	r14, r14
     9de:	ff 24       	eor	r15, r15
     9e0:	87 01       	movw	r16, r14
     9e2:	ef ef       	ldi	r30, 0xFF	; 255
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	6e 2f       	mov	r22, r30
     9e8:	67 95       	ror	r22
     9ea:	66 27       	eor	r22, r22
     9ec:	67 95       	ror	r22
     9ee:	90 2f       	mov	r25, r16
     9f0:	9f 77       	andi	r25, 0x7F	; 127
     9f2:	d7 94       	ror	r13
     9f4:	dd 24       	eor	r13, r13
     9f6:	d7 94       	ror	r13
     9f8:	8e 2f       	mov	r24, r30
     9fa:	86 95       	lsr	r24
     9fc:	49 2f       	mov	r20, r25
     9fe:	46 2b       	or	r20, r22
     a00:	58 2f       	mov	r21, r24
     a02:	5d 29       	or	r21, r13
     a04:	b7 01       	movw	r22, r14
     a06:	ca 01       	movw	r24, r20
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	08 95       	ret

00000a14 <__unpack_f>:
     a14:	fc 01       	movw	r30, r24
     a16:	db 01       	movw	r26, r22
     a18:	40 81       	ld	r20, Z
     a1a:	51 81       	ldd	r21, Z+1	; 0x01
     a1c:	22 81       	ldd	r18, Z+2	; 0x02
     a1e:	62 2f       	mov	r22, r18
     a20:	6f 77       	andi	r22, 0x7F	; 127
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	22 1f       	adc	r18, r18
     a26:	22 27       	eor	r18, r18
     a28:	22 1f       	adc	r18, r18
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	89 2f       	mov	r24, r25
     a2e:	88 0f       	add	r24, r24
     a30:	82 2b       	or	r24, r18
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	99 1f       	adc	r25, r25
     a38:	99 27       	eor	r25, r25
     a3a:	99 1f       	adc	r25, r25
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	9c 93       	st	X, r25
     a40:	11 97       	sbiw	r26, 0x01	; 1
     a42:	21 15       	cp	r18, r1
     a44:	31 05       	cpc	r19, r1
     a46:	a9 f5       	brne	.+106    	; 0xab2 <__unpack_f+0x9e>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	11 f4       	brne	.+4      	; 0xa56 <__unpack_f+0x42>
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	37 c0       	rjmp	.+110    	; 0xac4 <__unpack_f+0xb0>
     a56:	82 e8       	ldi	r24, 0x82	; 130
     a58:	9f ef       	ldi	r25, 0xFF	; 255
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	9c 93       	st	X, r25
     a5e:	8e 93       	st	-X, r24
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	9a 01       	movw	r18, r20
     a64:	ab 01       	movw	r20, r22
     a66:	67 e0       	ldi	r22, 0x07	; 7
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	44 1f       	adc	r20, r20
     a6e:	55 1f       	adc	r21, r21
     a70:	6a 95       	dec	r22
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0x54>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	8c 93       	st	X, r24
     a78:	0d c0       	rjmp	.+26     	; 0xa94 <__unpack_f+0x80>
     a7a:	22 0f       	add	r18, r18
     a7c:	33 1f       	adc	r19, r19
     a7e:	44 1f       	adc	r20, r20
     a80:	55 1f       	adc	r21, r21
     a82:	12 96       	adiw	r26, 0x02	; 2
     a84:	8d 91       	ld	r24, X+
     a86:	9c 91       	ld	r25, X
     a88:	13 97       	sbiw	r26, 0x03	; 3
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	13 96       	adiw	r26, 0x03	; 3
     a8e:	9c 93       	st	X, r25
     a90:	8e 93       	st	-X, r24
     a92:	12 97       	sbiw	r26, 0x02	; 2
     a94:	20 30       	cpi	r18, 0x00	; 0
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	38 07       	cpc	r19, r24
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	48 07       	cpc	r20, r24
     a9e:	80 e4       	ldi	r24, 0x40	; 64
     aa0:	58 07       	cpc	r21, r24
     aa2:	58 f3       	brcs	.-42     	; 0xa7a <__unpack_f+0x66>
     aa4:	14 96       	adiw	r26, 0x04	; 4
     aa6:	2d 93       	st	X+, r18
     aa8:	3d 93       	st	X+, r19
     aaa:	4d 93       	st	X+, r20
     aac:	5c 93       	st	X, r21
     aae:	17 97       	sbiw	r26, 0x07	; 7
     ab0:	08 95       	ret
     ab2:	2f 3f       	cpi	r18, 0xFF	; 255
     ab4:	31 05       	cpc	r19, r1
     ab6:	79 f4       	brne	.+30     	; 0xad6 <__unpack_f+0xc2>
     ab8:	41 15       	cp	r20, r1
     aba:	51 05       	cpc	r21, r1
     abc:	61 05       	cpc	r22, r1
     abe:	71 05       	cpc	r23, r1
     ac0:	19 f4       	brne	.+6      	; 0xac8 <__unpack_f+0xb4>
     ac2:	84 e0       	ldi	r24, 0x04	; 4
     ac4:	8c 93       	st	X, r24
     ac6:	08 95       	ret
     ac8:	64 ff       	sbrs	r22, 4
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <__unpack_f+0xbe>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	8c 93       	st	X, r24
     ad0:	12 c0       	rjmp	.+36     	; 0xaf6 <__unpack_f+0xe2>
     ad2:	1c 92       	st	X, r1
     ad4:	10 c0       	rjmp	.+32     	; 0xaf6 <__unpack_f+0xe2>
     ad6:	2f 57       	subi	r18, 0x7F	; 127
     ad8:	30 40       	sbci	r19, 0x00	; 0
     ada:	13 96       	adiw	r26, 0x03	; 3
     adc:	3c 93       	st	X, r19
     ade:	2e 93       	st	-X, r18
     ae0:	12 97       	sbiw	r26, 0x02	; 2
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	8c 93       	st	X, r24
     ae6:	87 e0       	ldi	r24, 0x07	; 7
     ae8:	44 0f       	add	r20, r20
     aea:	55 1f       	adc	r21, r21
     aec:	66 1f       	adc	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	8a 95       	dec	r24
     af2:	d1 f7       	brne	.-12     	; 0xae8 <__unpack_f+0xd4>
     af4:	70 64       	ori	r23, 0x40	; 64
     af6:	14 96       	adiw	r26, 0x04	; 4
     af8:	4d 93       	st	X+, r20
     afa:	5d 93       	st	X+, r21
     afc:	6d 93       	st	X+, r22
     afe:	7c 93       	st	X, r23
     b00:	17 97       	sbiw	r26, 0x07	; 7
     b02:	08 95       	ret

00000b04 <__fpcmp_parts_f>:
     b04:	1f 93       	push	r17
     b06:	dc 01       	movw	r26, r24
     b08:	fb 01       	movw	r30, r22
     b0a:	9c 91       	ld	r25, X
     b0c:	92 30       	cpi	r25, 0x02	; 2
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <__fpcmp_parts_f+0xe>
     b10:	47 c0       	rjmp	.+142    	; 0xba0 <__fpcmp_parts_f+0x9c>
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	08 f4       	brcc	.+2      	; 0xb1a <__fpcmp_parts_f+0x16>
     b18:	43 c0       	rjmp	.+134    	; 0xba0 <__fpcmp_parts_f+0x9c>
     b1a:	94 30       	cpi	r25, 0x04	; 4
     b1c:	51 f4       	brne	.+20     	; 0xb32 <__fpcmp_parts_f+0x2e>
     b1e:	11 96       	adiw	r26, 0x01	; 1
     b20:	1c 91       	ld	r17, X
     b22:	84 30       	cpi	r24, 0x04	; 4
     b24:	99 f5       	brne	.+102    	; 0xb8c <__fpcmp_parts_f+0x88>
     b26:	81 81       	ldd	r24, Z+1	; 0x01
     b28:	68 2f       	mov	r22, r24
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	61 1b       	sub	r22, r17
     b2e:	71 09       	sbc	r23, r1
     b30:	3f c0       	rjmp	.+126    	; 0xbb0 <__fpcmp_parts_f+0xac>
     b32:	84 30       	cpi	r24, 0x04	; 4
     b34:	21 f0       	breq	.+8      	; 0xb3e <__fpcmp_parts_f+0x3a>
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	31 f4       	brne	.+12     	; 0xb46 <__fpcmp_parts_f+0x42>
     b3a:	82 30       	cpi	r24, 0x02	; 2
     b3c:	b9 f1       	breq	.+110    	; 0xbac <__fpcmp_parts_f+0xa8>
     b3e:	81 81       	ldd	r24, Z+1	; 0x01
     b40:	88 23       	and	r24, r24
     b42:	89 f1       	breq	.+98     	; 0xba6 <__fpcmp_parts_f+0xa2>
     b44:	2d c0       	rjmp	.+90     	; 0xba0 <__fpcmp_parts_f+0x9c>
     b46:	11 96       	adiw	r26, 0x01	; 1
     b48:	1c 91       	ld	r17, X
     b4a:	11 97       	sbiw	r26, 0x01	; 1
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	f1 f0       	breq	.+60     	; 0xb8c <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	18 17       	cp	r17, r24
     b54:	d9 f4       	brne	.+54     	; 0xb8c <__fpcmp_parts_f+0x88>
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	2d 91       	ld	r18, X+
     b5a:	3c 91       	ld	r19, X
     b5c:	13 97       	sbiw	r26, 0x03	; 3
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	93 81       	ldd	r25, Z+3	; 0x03
     b62:	82 17       	cp	r24, r18
     b64:	93 07       	cpc	r25, r19
     b66:	94 f0       	brlt	.+36     	; 0xb8c <__fpcmp_parts_f+0x88>
     b68:	28 17       	cp	r18, r24
     b6a:	39 07       	cpc	r19, r25
     b6c:	bc f0       	brlt	.+46     	; 0xb9c <__fpcmp_parts_f+0x98>
     b6e:	14 96       	adiw	r26, 0x04	; 4
     b70:	8d 91       	ld	r24, X+
     b72:	9d 91       	ld	r25, X+
     b74:	0d 90       	ld	r0, X+
     b76:	bc 91       	ld	r27, X
     b78:	a0 2d       	mov	r26, r0
     b7a:	24 81       	ldd	r18, Z+4	; 0x04
     b7c:	35 81       	ldd	r19, Z+5	; 0x05
     b7e:	46 81       	ldd	r20, Z+6	; 0x06
     b80:	57 81       	ldd	r21, Z+7	; 0x07
     b82:	28 17       	cp	r18, r24
     b84:	39 07       	cpc	r19, r25
     b86:	4a 07       	cpc	r20, r26
     b88:	5b 07       	cpc	r21, r27
     b8a:	18 f4       	brcc	.+6      	; 0xb92 <__fpcmp_parts_f+0x8e>
     b8c:	11 23       	and	r17, r17
     b8e:	41 f0       	breq	.+16     	; 0xba0 <__fpcmp_parts_f+0x9c>
     b90:	0a c0       	rjmp	.+20     	; 0xba6 <__fpcmp_parts_f+0xa2>
     b92:	82 17       	cp	r24, r18
     b94:	93 07       	cpc	r25, r19
     b96:	a4 07       	cpc	r26, r20
     b98:	b5 07       	cpc	r27, r21
     b9a:	40 f4       	brcc	.+16     	; 0xbac <__fpcmp_parts_f+0xa8>
     b9c:	11 23       	and	r17, r17
     b9e:	19 f0       	breq	.+6      	; 0xba6 <__fpcmp_parts_f+0xa2>
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <__fpcmp_parts_f+0xac>
     ba6:	6f ef       	ldi	r22, 0xFF	; 255
     ba8:	7f ef       	ldi	r23, 0xFF	; 255
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <__fpcmp_parts_f+0xac>
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	cb 01       	movw	r24, r22
     bb2:	1f 91       	pop	r17
     bb4:	08 95       	ret

00000bb6 <DIO_voidSetPinDirection>:
/*Self files INclusions in the same sequence  */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void 	DIO_voidSetPinDirection(u8 Copy_U8PortNmame , u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <DIO_voidSetPinDirection+0x6>
     bbc:	0f 92       	push	r0
     bbe:	0f 92       	push	r0
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	6a 83       	std	Y+2, r22	; 0x02
     bc8:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8PortNmame)
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	3d 83       	std	Y+5, r19	; 0x05
     bd2:	2c 83       	std	Y+4, r18	; 0x04
     bd4:	8c 81       	ldd	r24, Y+4	; 0x04
     bd6:	9d 81       	ldd	r25, Y+5	; 0x05
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <DIO_voidSetPinDirection+0x2a>
     bde:	47 c0       	rjmp	.+142    	; 0xc6e <DIO_voidSetPinDirection+0xb8>
     be0:	2c 81       	ldd	r18, Y+4	; 0x04
     be2:	3d 81       	ldd	r19, Y+5	; 0x05
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	2c f4       	brge	.+10     	; 0xbf4 <DIO_voidSetPinDirection+0x3e>
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	71 f0       	breq	.+28     	; 0xc0e <DIO_voidSetPinDirection+0x58>
     bf2:	cb c0       	rjmp	.+406    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
     bf4:	2c 81       	ldd	r18, Y+4	; 0x04
     bf6:	3d 81       	ldd	r19, Y+5	; 0x05
     bf8:	22 30       	cpi	r18, 0x02	; 2
     bfa:	31 05       	cpc	r19, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <DIO_voidSetPinDirection+0x4a>
     bfe:	67 c0       	rjmp	.+206    	; 0xcce <DIO_voidSetPinDirection+0x118>
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	9d 81       	ldd	r25, Y+5	; 0x05
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	91 05       	cpc	r25, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <DIO_voidSetPinDirection+0x56>
     c0a:	91 c0       	rjmp	.+290    	; 0xd2e <DIO_voidSetPinDirection+0x178>
     c0c:	be c0       	rjmp	.+380    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	a1 f4       	brne	.+40     	; 0xc3c <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA , Copy_u8PinNumber);
     c14:	aa e3       	ldi	r26, 0x3A	; 58
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	ea e3       	ldi	r30, 0x3A	; 58
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_voidSetPinDirection+0x7c>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_voidSetPinDirection+0x78>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	a7 c0       	rjmp	.+334    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <DIO_voidSetPinDirection+0x8e>
     c42:	a3 c0       	rjmp	.+326    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRA , Copy_u8PinNumber);
     c44:	aa e3       	ldi	r26, 0x3A	; 58
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ea e3       	ldi	r30, 0x3A	; 58
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_voidSetPinDirection+0xac>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_voidSetPinDirection+0xa8>
     c66:	80 95       	com	r24
     c68:	84 23       	and	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	8e c0       	rjmp	.+284    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB , Copy_u8PinNumber);
     c74:	a7 e3       	ldi	r26, 0x37	; 55
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e7 e3       	ldi	r30, 0x37	; 55
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_voidSetPinDirection+0xdc>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_voidSetPinDirection+0xd8>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	77 c0       	rjmp	.+238    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	88 23       	and	r24, r24
     ca0:	09 f0       	breq	.+2      	; 0xca4 <DIO_voidSetPinDirection+0xee>
     ca2:	73 c0       	rjmp	.+230    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRB , Copy_u8PinNumber);
     ca4:	a7 e3       	ldi	r26, 0x37	; 55
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e3       	ldi	r30, 0x37	; 55
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_voidSetPinDirection+0x10c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_voidSetPinDirection+0x108>
     cc6:	80 95       	com	r24
     cc8:	84 23       	and	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	5e c0       	rjmp	.+188    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	a1 f4       	brne	.+40     	; 0xcfc <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC , Copy_u8PinNumber);
     cd4:	a4 e3       	ldi	r26, 0x34	; 52
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e4 e3       	ldi	r30, 0x34	; 52
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_voidSetPinDirection+0x13c>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_voidSetPinDirection+0x138>
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	47 c0       	rjmp	.+142    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 23       	and	r24, r24
     d00:	09 f0       	breq	.+2      	; 0xd04 <DIO_voidSetPinDirection+0x14e>
     d02:	43 c0       	rjmp	.+134    	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRC , Copy_u8PinNumber);
     d04:	a4 e3       	ldi	r26, 0x34	; 52
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e4 e3       	ldi	r30, 0x34	; 52
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_voidSetPinDirection+0x16c>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_voidSetPinDirection+0x168>
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	2e c0       	rjmp	.+92     	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	a1 f4       	brne	.+40     	; 0xd5c <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD , Copy_u8PinNumber);
     d34:	a1 e3       	ldi	r26, 0x31	; 49
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e1 e3       	ldi	r30, 0x31	; 49
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_voidSetPinDirection+0x19c>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_voidSetPinDirection+0x198>
     d56:	84 2b       	or	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	17 c0       	rjmp	.+46     	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	88 23       	and	r24, r24
     d60:	a1 f4       	brne	.+40     	; 0xd8a <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRD , Copy_u8PinNumber);
     d62:	a1 e3       	ldi	r26, 0x31	; 49
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e1 e3       	ldi	r30, 0x31	; 49
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_voidSetPinDirection+0x1ca>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_voidSetPinDirection+0x1c6>
     d84:	80 95       	com	r24
     d86:	84 23       	and	r24, r20
     d88:	8c 93       	st	X, r24
	
	default:
			//do no thing 
		break;
	}
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_U8PinState)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	2d 97       	sbiw	r28, 0x0d	; 13
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	6a 83       	std	Y+2, r22	; 0x02
     db2:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8PortNumber)
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	3d 87       	std	Y+13, r19	; 0x0d
     dbc:	2c 87       	std	Y+12, r18	; 0x0c
     dbe:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc0:	9d 85       	ldd	r25, Y+13	; 0x0d
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	91 05       	cpc	r25, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <DIO_VoidSetPinValue+0x30>
     dc8:	4f c0       	rjmp	.+158    	; 0xe68 <DIO_VoidSetPinValue+0xce>
     dca:	2c 85       	ldd	r18, Y+12	; 0x0c
     dcc:	3d 85       	ldd	r19, Y+13	; 0x0d
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <DIO_VoidSetPinValue+0x44>
     dd4:	8c 85       	ldd	r24, Y+12	; 0x0c
     dd6:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	71 f0       	breq	.+28     	; 0xdf8 <DIO_VoidSetPinValue+0x5e>
     ddc:	ec c0       	rjmp	.+472    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
     dde:	2c 85       	ldd	r18, Y+12	; 0x0c
     de0:	3d 85       	ldd	r19, Y+13	; 0x0d
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <DIO_VoidSetPinValue+0x50>
     de8:	77 c0       	rjmp	.+238    	; 0xed8 <DIO_VoidSetPinValue+0x13e>
     dea:	8c 85       	ldd	r24, Y+12	; 0x0c
     dec:	9d 85       	ldd	r25, Y+13	; 0x0d
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	91 05       	cpc	r25, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <DIO_VoidSetPinValue+0x5c>
     df4:	a9 c0       	rjmp	.+338    	; 0xf48 <DIO_VoidSetPinValue+0x1ae>
     df6:	df c0       	rjmp	.+446    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
	{
		case DIO_PORTA :
			switch(Copy_U8PinState)
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	3b 87       	std	Y+11, r19	; 0x0b
     e00:	2a 87       	std	Y+10, r18	; 0x0a
     e02:	8a 85       	ldd	r24, Y+10	; 0x0a
     e04:	9b 85       	ldd	r25, Y+11	; 0x0b
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	31 f0       	breq	.+12     	; 0xe16 <DIO_VoidSetPinValue+0x7c>
     e0a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e0c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e0e:	21 30       	cpi	r18, 0x01	; 1
     e10:	31 05       	cpc	r19, r1
     e12:	b1 f0       	breq	.+44     	; 0xe40 <DIO_VoidSetPinValue+0xa6>
     e14:	d0 c0       	rjmp	.+416    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTA , Copy_u8PinNumber );
     e16:	ab e3       	ldi	r26, 0x3B	; 59
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	eb e3       	ldi	r30, 0x3B	; 59
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_VoidSetPinValue+0x9a>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_VoidSetPinValue+0x96>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	bb c0       	rjmp	.+374    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTA , Copy_u8PinNumber );
     e40:	ab e3       	ldi	r26, 0x3B	; 59
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	eb e3       	ldi	r30, 0x3B	; 59
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_VoidSetPinValue+0xc4>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_VoidSetPinValue+0xc0>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	a7 c0       	rjmp	.+334    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTB :
			switch(Copy_U8PinState)
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	39 87       	std	Y+9, r19	; 0x09
     e70:	28 87       	std	Y+8, r18	; 0x08
     e72:	88 85       	ldd	r24, Y+8	; 0x08
     e74:	99 85       	ldd	r25, Y+9	; 0x09
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	31 f0       	breq	.+12     	; 0xe86 <DIO_VoidSetPinValue+0xec>
     e7a:	28 85       	ldd	r18, Y+8	; 0x08
     e7c:	39 85       	ldd	r19, Y+9	; 0x09
     e7e:	21 30       	cpi	r18, 0x01	; 1
     e80:	31 05       	cpc	r19, r1
     e82:	b1 f0       	breq	.+44     	; 0xeb0 <DIO_VoidSetPinValue+0x116>
     e84:	98 c0       	rjmp	.+304    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTB , Copy_u8PinNumber );
     e86:	a8 e3       	ldi	r26, 0x38	; 56
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_VoidSetPinValue+0x10a>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_VoidSetPinValue+0x106>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	83 c0       	rjmp	.+262    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTB , Copy_u8PinNumber );
     eb0:	a8 e3       	ldi	r26, 0x38	; 56
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e8 e3       	ldi	r30, 0x38	; 56
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_VoidSetPinValue+0x134>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_VoidSetPinValue+0x130>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	6f c0       	rjmp	.+222    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTC :
			switch(Copy_U8PinState)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3f 83       	std	Y+7, r19	; 0x07
     ee0:	2e 83       	std	Y+6, r18	; 0x06
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	31 f0       	breq	.+12     	; 0xef6 <DIO_VoidSetPinValue+0x15c>
     eea:	2e 81       	ldd	r18, Y+6	; 0x06
     eec:	3f 81       	ldd	r19, Y+7	; 0x07
     eee:	21 30       	cpi	r18, 0x01	; 1
     ef0:	31 05       	cpc	r19, r1
     ef2:	b1 f0       	breq	.+44     	; 0xf20 <DIO_VoidSetPinValue+0x186>
     ef4:	60 c0       	rjmp	.+192    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTC , Copy_u8PinNumber );
     ef6:	a5 e3       	ldi	r26, 0x35	; 53
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e5 e3       	ldi	r30, 0x35	; 53
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_VoidSetPinValue+0x17a>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_VoidSetPinValue+0x176>
     f18:	80 95       	com	r24
     f1a:	84 23       	and	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	4b c0       	rjmp	.+150    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTC , Copy_u8PinNumber );
     f20:	a5 e3       	ldi	r26, 0x35	; 53
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e3       	ldi	r30, 0x35	; 53
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_VoidSetPinValue+0x1a4>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_VoidSetPinValue+0x1a0>
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	37 c0       	rjmp	.+110    	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTD :
			switch(Copy_U8PinState)
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	2c 83       	std	Y+4, r18	; 0x04
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	31 f0       	breq	.+12     	; 0xf66 <DIO_VoidSetPinValue+0x1cc>
     f5a:	2c 81       	ldd	r18, Y+4	; 0x04
     f5c:	3d 81       	ldd	r19, Y+5	; 0x05
     f5e:	21 30       	cpi	r18, 0x01	; 1
     f60:	31 05       	cpc	r19, r1
     f62:	b1 f0       	breq	.+44     	; 0xf90 <DIO_VoidSetPinValue+0x1f6>
     f64:	28 c0       	rjmp	.+80     	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTD , Copy_u8PinNumber );
     f66:	a2 e3       	ldi	r26, 0x32	; 50
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_VoidSetPinValue+0x1ea>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_VoidSetPinValue+0x1e6>
     f88:	80 95       	com	r24
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	13 c0       	rjmp	.+38     	; 0xfb6 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTD , Copy_u8PinNumber );
     f90:	a2 e3       	ldi	r26, 0x32	; 50
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e2 e3       	ldi	r30, 0x32	; 50
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_VoidSetPinValue+0x214>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_VoidSetPinValue+0x210>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
	
	default:
			// Do nothing 
		break;
	}
}
     fb6:	2d 96       	adiw	r28, 0x0d	; 13
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <DIO_VoidGetPinValue>:

u8  DIO_VoidGetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_VoidGetPinValue+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <DIO_VoidGetPinValue+0x8>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	8a 83       	std	Y+2, r24	; 0x02
     fd6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue =0 ;
     fd8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PortName)
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3d 83       	std	Y+5, r19	; 0x05
     fe2:	2c 83       	std	Y+4, r18	; 0x04
     fe4:	4c 81       	ldd	r20, Y+4	; 0x04
     fe6:	5d 81       	ldd	r21, Y+5	; 0x05
     fe8:	41 30       	cpi	r20, 0x01	; 1
     fea:	51 05       	cpc	r21, r1
     fec:	41 f1       	breq	.+80     	; 0x103e <DIO_VoidGetPinValue+0x76>
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	91 05       	cpc	r25, r1
     ff6:	34 f4       	brge	.+12     	; 0x1004 <DIO_VoidGetPinValue+0x3c>
     ff8:	2c 81       	ldd	r18, Y+4	; 0x04
     ffa:	3d 81       	ldd	r19, Y+5	; 0x05
     ffc:	21 15       	cp	r18, r1
     ffe:	31 05       	cpc	r19, r1
    1000:	61 f0       	breq	.+24     	; 0x101a <DIO_VoidGetPinValue+0x52>
    1002:	52 c0       	rjmp	.+164    	; 0x10a8 <DIO_VoidGetPinValue+0xe0>
    1004:	4c 81       	ldd	r20, Y+4	; 0x04
    1006:	5d 81       	ldd	r21, Y+5	; 0x05
    1008:	42 30       	cpi	r20, 0x02	; 2
    100a:	51 05       	cpc	r21, r1
    100c:	51 f1       	breq	.+84     	; 0x1062 <DIO_VoidGetPinValue+0x9a>
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	b9 f1       	breq	.+110    	; 0x1086 <DIO_VoidGetPinValue+0xbe>
    1018:	47 c0       	rjmp	.+142    	; 0x10a8 <DIO_VoidGetPinValue+0xe0>
	{
		case DIO_PORTA :
			Local_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    101a:	eb e3       	ldi	r30, 0x3B	; 59
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a9 01       	movw	r20, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_VoidGetPinValue+0x6a>
    102e:	55 95       	asr	r21
    1030:	47 95       	ror	r20
    1032:	8a 95       	dec	r24
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_VoidGetPinValue+0x66>
    1036:	ca 01       	movw	r24, r20
    1038:	81 70       	andi	r24, 0x01	; 1
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	35 c0       	rjmp	.+106    	; 0x10a8 <DIO_VoidGetPinValue+0xe0>
		break;
		case DIO_PORTB :
			Local_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    103e:	e8 e3       	ldi	r30, 0x38	; 56
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a9 01       	movw	r20, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_VoidGetPinValue+0x8e>
    1052:	55 95       	asr	r21
    1054:	47 95       	ror	r20
    1056:	8a 95       	dec	r24
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_VoidGetPinValue+0x8a>
    105a:	ca 01       	movw	r24, r20
    105c:	81 70       	andi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	23 c0       	rjmp	.+70     	; 0x10a8 <DIO_VoidGetPinValue+0xe0>
		break;
		case DIO_PORTC :
			Local_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    1062:	e5 e3       	ldi	r30, 0x35	; 53
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a9 01       	movw	r20, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_VoidGetPinValue+0xb2>
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_VoidGetPinValue+0xae>
    107e:	ca 01       	movw	r24, r20
    1080:	81 70       	andi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	11 c0       	rjmp	.+34     	; 0x10a8 <DIO_VoidGetPinValue+0xe0>
		break;
		case DIO_PORTD :
			Local_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_VoidGetPinValue+0xd6>
    109a:	55 95       	asr	r21
    109c:	47 95       	ror	r20
    109e:	8a 95       	dec	r24
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_VoidGetPinValue+0xd2>
    10a2:	ca 01       	movw	r24, r20
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	89 83       	std	Y+1, r24	; 0x01
	
		default:
				//Do nothing
			break;
	}
}
    10a8:	26 96       	adiw	r28, 0x06	; 6
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_U8PortName , u8  Copy_U8PortState)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <DIO_VoidSetPortDirection+0x6>
    10c0:	0f 92       	push	r0
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3c 83       	std	Y+4, r19	; 0x04
    10d2:	2b 83       	std	Y+3, r18	; 0x03
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	21 f1       	breq	.+72     	; 0x1126 <DIO_VoidSetPortDirection+0x6c>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <DIO_VoidSetPortDirection+0x38>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	61 f0       	breq	.+24     	; 0x1108 <DIO_VoidSetPortDirection+0x4e>
    10f0:	46 c0       	rjmp	.+140    	; 0x117e <DIO_VoidSetPortDirection+0xc4>
    10f2:	2b 81       	ldd	r18, Y+3	; 0x03
    10f4:	3c 81       	ldd	r19, Y+4	; 0x04
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	21 f1       	breq	.+72     	; 0x1144 <DIO_VoidSetPortDirection+0x8a>
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	71 f1       	breq	.+92     	; 0x1162 <DIO_VoidSetPortDirection+0xa8>
    1106:	3b c0       	rjmp	.+118    	; 0x117e <DIO_VoidSetPortDirection+0xc4>
	{
		case DIO_PORTA :
			if(Copy_U8PortState==OUTPUT)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	29 f4       	brne	.+10     	; 0x1118 <DIO_VoidSetPortDirection+0x5e>
			{
				SET_REG(DDRA);
    110e:	ea e3       	ldi	r30, 0x3A	; 58
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	80 83       	st	Z, r24
    1116:	33 c0       	rjmp	.+102    	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 23       	and	r24, r24
    111c:	81 f5       	brne	.+96     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRA);
    111e:	ea e3       	ldi	r30, 0x3A	; 58
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	10 82       	st	Z, r1
    1124:	2c c0       	rjmp	.+88     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTB :
			if(Copy_U8PortState==OUTPUT)
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	29 f4       	brne	.+10     	; 0x1136 <DIO_VoidSetPortDirection+0x7c>
			{
				SET_REG(DDRB);
    112c:	e7 e3       	ldi	r30, 0x37	; 55
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	80 83       	st	Z, r24
    1134:	24 c0       	rjmp	.+72     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	88 23       	and	r24, r24
    113a:	09 f5       	brne	.+66     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRB);
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	10 82       	st	Z, r1
    1142:	1d c0       	rjmp	.+58     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTC :
			if(Copy_U8PortState==OUTPUT)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	29 f4       	brne	.+10     	; 0x1154 <DIO_VoidSetPortDirection+0x9a>
			{
				SET_REG(DDRC);
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	80 83       	st	Z, r24
    1152:	15 c0       	rjmp	.+42     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	88 23       	and	r24, r24
    1158:	91 f4       	brne	.+36     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRC);
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	10 82       	st	Z, r1
    1160:	0e c0       	rjmp	.+28     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTD :
			if(Copy_U8PortState==OUTPUT)
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	29 f4       	brne	.+10     	; 0x1172 <DIO_VoidSetPortDirection+0xb8>
			{
				SET_REG(DDRD);
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	80 83       	st	Z, r24
    1170:	06 c0       	rjmp	.+12     	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	88 23       	and	r24, r24
    1176:	19 f4       	brne	.+6      	; 0x117e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRD);
    1178:	e1 e3       	ldi	r30, 0x31	; 49
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	10 82       	st	Z, r1
		default:
			//do no thing
			break;

	}
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <DIO_VOidTogglePortValue>:
void DIO_VOidTogglePortValue(u8 Copy_U8PortName)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <DIO_VOidTogglePortValue+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3b 83       	std	Y+3, r19	; 0x03
    11a0:	2a 83       	std	Y+2, r18	; 0x02
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 05       	cpc	r25, r1
    11aa:	e9 f0       	breq	.+58     	; 0x11e6 <DIO_VOidTogglePortValue+0x5a>
    11ac:	2a 81       	ldd	r18, Y+2	; 0x02
    11ae:	3b 81       	ldd	r19, Y+3	; 0x03
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <DIO_VOidTogglePortValue+0x34>
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <DIO_VOidTogglePortValue+0x4a>
    11be:	2a c0       	rjmp	.+84     	; 0x1214 <DIO_VOidTogglePortValue+0x88>
    11c0:	2a 81       	ldd	r18, Y+2	; 0x02
    11c2:	3b 81       	ldd	r19, Y+3	; 0x03
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	b1 f0       	breq	.+44     	; 0x11f6 <DIO_VOidTogglePortValue+0x6a>
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	9b 81       	ldd	r25, Y+3	; 0x03
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	91 05       	cpc	r25, r1
    11d2:	c9 f0       	breq	.+50     	; 0x1206 <DIO_VOidTogglePortValue+0x7a>
    11d4:	1f c0       	rjmp	.+62     	; 0x1214 <DIO_VOidTogglePortValue+0x88>
	{
		case DIO_PORTA :
			TOGGLE_REG(PORTA);
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 95       	com	r24
    11e2:	8c 93       	st	X, r24
    11e4:	17 c0       	rjmp	.+46     	; 0x1214 <DIO_VOidTogglePortValue+0x88>
		break;
		case DIO_PORTB :
			TOGGLE_REG(PORTB);
    11e6:	a8 e3       	ldi	r26, 0x38	; 56
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e8 e3       	ldi	r30, 0x38	; 56
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 95       	com	r24
    11f2:	8c 93       	st	X, r24
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <DIO_VOidTogglePortValue+0x88>
		break;
		case DIO_PORTC :
			TOGGLE_REG(PORTC);
    11f6:	a5 e3       	ldi	r26, 0x35	; 53
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 95       	com	r24
    1202:	8c 93       	st	X, r24
    1204:	07 c0       	rjmp	.+14     	; 0x1214 <DIO_VOidTogglePortValue+0x88>
		break;
		case DIO_PORTD :
			TOGGLE_REG(PORTD);
    1206:	a2 e3       	ldi	r26, 0x32	; 50
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e2 e3       	ldi	r30, 0x32	; 50
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 95       	com	r24
    1212:	8c 93       	st	X, r24
			//do no thing
			break;

	}

}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <DIO_VoidSetSpacificvalue>:
void DIO_VoidSetSpacificvalue(u8 Copy_U8PortName , u8 Copy_U8Value)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <DIO_VoidSetSpacificvalue+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3c 83       	std	Y+4, r19	; 0x04
    1238:	2b 83       	std	Y+3, r18	; 0x03
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	d1 f0       	breq	.+52     	; 0x1278 <DIO_VoidSetSpacificvalue+0x58>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	22 30       	cpi	r18, 0x02	; 2
    124a:	31 05       	cpc	r19, r1
    124c:	2c f4       	brge	.+10     	; 0x1258 <DIO_VoidSetSpacificvalue+0x38>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	61 f0       	breq	.+24     	; 0x126e <DIO_VoidSetSpacificvalue+0x4e>
    1256:	1e c0       	rjmp	.+60     	; 0x1294 <DIO_VoidSetSpacificvalue+0x74>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	81 f0       	breq	.+32     	; 0x1282 <DIO_VoidSetSpacificvalue+0x62>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	91 05       	cpc	r25, r1
    126a:	81 f0       	breq	.+32     	; 0x128c <DIO_VoidSetSpacificvalue+0x6c>
    126c:	13 c0       	rjmp	.+38     	; 0x1294 <DIO_VoidSetSpacificvalue+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(PORTA,Copy_U8Value);
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(PORTB,Copy_U8Value);
    1278:	e8 e3       	ldi	r30, 0x38	; 56
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	80 83       	st	Z, r24
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(PORTC,Copy_U8Value);
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(PORTD,Copy_U8Value);
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <DIO_U8GetPortValue>:
u8 DIO_U8GetPortValue(u8 Copy_U8PortName )
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_U8GetPortValue+0x6>
    12a8:	0f 92       	push	r0
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3c 83       	std	Y+4, r19	; 0x04
    12ba:	2b 83       	std	Y+3, r18	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	d1 f0       	breq	.+52     	; 0x12fa <DIO_U8GetPortValue+0x58>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <DIO_U8GetPortValue+0x38>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <DIO_U8GetPortValue+0x4e>
    12d8:	1f c0       	rjmp	.+62     	; 0x1318 <DIO_U8GetPortValue+0x76>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <DIO_U8GetPortValue+0x62>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <DIO_U8GetPortValue+0x6c>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <DIO_U8GetPortValue+0x76>
	{
		case DIO_PORTA :
			return PINA;
    12f0:	e9 e3       	ldi	r30, 0x39	; 57
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	90 81       	ld	r25, Z
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	10 c0       	rjmp	.+32     	; 0x131a <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTB :
			return PINB ;
    12fa:	e6 e3       	ldi	r30, 0x36	; 54
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	20 81       	ld	r18, Z
    1300:	2a 83       	std	Y+2, r18	; 0x02
    1302:	0b c0       	rjmp	.+22     	; 0x131a <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTC :
			return PINC;
    1304:	e3 e3       	ldi	r30, 0x33	; 51
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	30 81       	ld	r19, Z
    130a:	3a 83       	std	Y+2, r19	; 0x02
    130c:	06 c0       	rjmp	.+12     	; 0x131a <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTD :
			return PIND;
    130e:	e0 e3       	ldi	r30, 0x30	; 48
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8a 83       	std	Y+2, r24	; 0x02
    1316:	01 c0       	rjmp	.+2      	; 0x131a <DIO_U8GetPortValue+0x78>
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_U8GetPortValue+0x7c>
			//do no thing
			break;

	}

}
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	9d 83       	std	Y+5, r25	; 0x05
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <DIO_VoidSetPortSpecificDirection>:
void DIO_VoidSetPortSpecificDirection(u8 Copy_U8PortName, u8 Copy_U8SpectificDirection)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DIO_VoidSetPortSpecificDirection+0x6>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3c 83       	std	Y+4, r19	; 0x04
    1348:	2b 83       	std	Y+3, r18	; 0x03
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	d1 f0       	breq	.+52     	; 0x1388 <DIO_VoidSetPortSpecificDirection+0x58>
    1354:	2b 81       	ldd	r18, Y+3	; 0x03
    1356:	3c 81       	ldd	r19, Y+4	; 0x04
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <DIO_VoidSetPortSpecificDirection+0x38>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	61 f0       	breq	.+24     	; 0x137e <DIO_VoidSetPortSpecificDirection+0x4e>
    1366:	1e c0       	rjmp	.+60     	; 0x13a4 <DIO_VoidSetPortSpecificDirection+0x74>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <DIO_VoidSetPortSpecificDirection+0x62>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	81 f0       	breq	.+32     	; 0x139c <DIO_VoidSetPortSpecificDirection+0x6c>
    137c:	13 c0       	rjmp	.+38     	; 0x13a4 <DIO_VoidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(DDRA,Copy_U8SpectificDirection);
    137e:	ea e3       	ldi	r30, 0x3A	; 58
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(DDRB,Copy_U8SpectificDirection);
    1388:	e7 e3       	ldi	r30, 0x37	; 55
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(DDRC,Copy_U8SpectificDirection);
    1392:	e4 e3       	ldi	r30, 0x34	; 52
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(DDRD,Copy_U8SpectificDirection);
    139c:	e1 e3       	ldi	r30, 0x31	; 49
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_voidInit>:




void LCD_voidInit(void)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	2e 97       	sbiw	r28, 0x0e	; 14
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    #if LCD_INIT_MODE == EIGHT_BIT_MODE
    /*Initialize Data Port*/
    DIO_VoidSetPortSpecificDirection(LCD_DATA_PORT, LCD_ALL_OUTPUT);
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	6f ef       	ldi	r22, 0xFF	; 255
    13ca:	0e 94 98 09 	call	0x1330	; 0x1330 <DIO_VoidSetPortSpecificDirection>
    /*Initialize Control Pins*/
    DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT);
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	62 e0       	ldi	r22, 0x02	; 2
    13e6:	41 e0       	ldi	r20, 0x01	; 1
    13e8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DIO_voidSetPinDirection>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e2       	ldi	r26, 0x20	; 32
    13f2:	b2 e4       	ldi	r27, 0x42	; 66
    13f4:	8b 87       	std	Y+11, r24	; 0x0b
    13f6:	9c 87       	std	Y+12, r25	; 0x0c
    13f8:	ad 87       	std	Y+13, r26	; 0x0d
    13fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	9e 85       	ldd	r25, Y+14	; 0x0e
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a ef       	ldi	r20, 0xFA	; 250
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 57 02 	call	0x4ae	; 0x4ae <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8f 83       	std	Y+7, r24	; 0x07
    1416:	98 87       	std	Y+8, r25	; 0x08
    1418:	a9 87       	std	Y+9, r26	; 0x09
    141a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    141c:	6f 81       	ldd	r22, Y+7	; 0x07
    141e:	78 85       	ldd	r23, Y+8	; 0x08
    1420:	89 85       	ldd	r24, Y+9	; 0x09
    1422:	9a 85       	ldd	r25, Y+10	; 0x0a
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 b1 03 	call	0x762	; 0x762 <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <LCD_voidInit+0x8c>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    143e:	6f 81       	ldd	r22, Y+7	; 0x07
    1440:	78 85       	ldd	r23, Y+8	; 0x08
    1442:	89 85       	ldd	r24, Y+9	; 0x09
    1444:	9a 85       	ldd	r25, Y+10	; 0x0a
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	6b 85       	ldd	r22, Y+11	; 0x0b
    1458:	7c 85       	ldd	r23, Y+12	; 0x0c
    145a:	8d 85       	ldd	r24, Y+13	; 0x0d
    145c:	9e 85       	ldd	r25, Y+14	; 0x0e
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 57 02 	call	0x4ae	; 0x4ae <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 81 00 	call	0x102	; 0x102 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	0f c0       	rjmp	.+30     	; 0x149e <LCD_voidInit+0xec>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_voidInit+0xda>
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <LCD_voidInit+0xce>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	6f 81       	ldd	r22, Y+7	; 0x07
    14aa:	78 85       	ldd	r23, Y+8	; 0x08
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	0e 94 81 00 	call	0x102	; 0x102 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCD_voidInit+0x116>
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01

    // Wait For More Than 30 ms
    _delay_ms(40);

    /*Send Function Set Command*/
    LCD_voidSendCommand(FUNCTION_SET_CMD);
    14d0:	88 e3       	ldi	r24, 0x38	; 56
    14d2:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_voidSendCommand>
    /*Send Display On/Off Control Command*/
    LCD_voidSendCommand(DISPLAY_ON_OFF_CMD);
    14d6:	8f e0       	ldi	r24, 0x0F	; 15
    14d8:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_voidSendCommand>
    /*Send Display Clear Command*/
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_voidSendCommand>
    #elif LCD_INIT_MODE == FOUR_BIT_MODE

    #else
        #error("LCD_INIT_MODE Configuration Error")
    #endif
}
    14e2:	2e 96       	adiw	r28, 0x0e	; 14
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	2f 97       	sbiw	r28, 0x0f	; 15
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	8f 87       	std	Y+15, r24	; 0x0f
    // Set The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    // Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1514:	83 e0       	ldi	r24, 0x03	; 3
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    // Set The Command On The Data/Command Port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT, Copy_u8Data);
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	6f 85       	ldd	r22, Y+15	; 0x0f
    1522:	0e 94 10 09 	call	0x1220	; 0x1220 <DIO_VoidSetSpacificvalue>

    /*Send Enable Pulse*/
    /*Low*/
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	62 e0       	ldi	r22, 0x02	; 2
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    /*High For 2msec*/
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	62 e0       	ldi	r22, 0x02	; 2
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e4       	ldi	r27, 0x40	; 64
    1542:	8b 87       	std	Y+11, r24	; 0x0b
    1544:	9c 87       	std	Y+12, r25	; 0x0c
    1546:	ad 87       	std	Y+13, r26	; 0x0d
    1548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	6b 85       	ldd	r22, Y+11	; 0x0b
    154c:	7c 85       	ldd	r23, Y+12	; 0x0c
    154e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1550:	9e 85       	ldd	r25, Y+14	; 0x0e
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a ef       	ldi	r20, 0xFA	; 250
    1558:	54 e4       	ldi	r21, 0x44	; 68
    155a:	0e 94 57 02 	call	0x4ae	; 0x4ae <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8f 83       	std	Y+7, r24	; 0x07
    1564:	98 87       	std	Y+8, r25	; 0x08
    1566:	a9 87       	std	Y+9, r26	; 0x09
    1568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    156a:	6f 81       	ldd	r22, Y+7	; 0x07
    156c:	78 85       	ldd	r23, Y+8	; 0x08
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 b1 03 	call	0x762	; 0x762 <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	2c f4       	brge	.+10     	; 0x158c <LCD_voidSendData+0x98>
		__ticks = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	3f c0       	rjmp	.+126    	; 0x160a <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    158c:	6f 81       	ldd	r22, Y+7	; 0x07
    158e:	78 85       	ldd	r23, Y+8	; 0x08
    1590:	89 85       	ldd	r24, Y+9	; 0x09
    1592:	9a 85       	ldd	r25, Y+10	; 0x0a
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	4c f5       	brge	.+82     	; 0x15f6 <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	0e 94 57 02 	call	0x4ae	; 0x4ae <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 81 00 	call	0x102	; 0x102 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <LCD_voidSendData+0xf8>
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <LCD_voidSendData+0xe6>
    15de:	9c 83       	std	Y+4, r25	; 0x04
    15e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f7       	brne	.-38     	; 0x15ce <LCD_voidSendData+0xda>
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	6f 81       	ldd	r22, Y+7	; 0x07
    15f8:	78 85       	ldd	r23, Y+8	; 0x08
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	0e 94 81 00 	call	0x102	; 0x102 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <LCD_voidSendData+0x122>
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    /*Low*/
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
}
    1628:	2f 96       	adiw	r28, 0x0f	; 15
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <LCD_voidSendCommand>:

static void LCD_voidSendCommand(u8 Copy_u8Command)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	2f 97       	sbiw	r28, 0x0f	; 15
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	8f 87       	std	Y+15, r24	; 0x0f
    // Clear The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
	 DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    // Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
	 DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    // Set The Command On The Data/Command Port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT, Copy_u8Command);
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	6f 85       	ldd	r22, Y+15	; 0x0f
    1668:	0e 94 10 09 	call	0x1220	; 0x1220 <DIO_VoidSetSpacificvalue>

    /*Send Enable Pulse*/
    /*Low*/
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	62 e0       	ldi	r22, 0x02	; 2
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    /*High For 2msec*/
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e4       	ldi	r27, 0x40	; 64
    1688:	8b 87       	std	Y+11, r24	; 0x0b
    168a:	9c 87       	std	Y+12, r25	; 0x0c
    168c:	ad 87       	std	Y+13, r26	; 0x0d
    168e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6b 85       	ldd	r22, Y+11	; 0x0b
    1692:	7c 85       	ldd	r23, Y+12	; 0x0c
    1694:	8d 85       	ldd	r24, Y+13	; 0x0d
    1696:	9e 85       	ldd	r25, Y+14	; 0x0e
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a ef       	ldi	r20, 0xFA	; 250
    169e:	54 e4       	ldi	r21, 0x44	; 68
    16a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8f 83       	std	Y+7, r24	; 0x07
    16aa:	98 87       	std	Y+8, r25	; 0x08
    16ac:	a9 87       	std	Y+9, r26	; 0x09
    16ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 b1 03 	call	0x762	; 0x762 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 81 00 	call	0x102	; 0x102 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_voidSendCommand+0xf8>
    1714:	88 ec       	ldi	r24, 0xC8	; 200
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_voidSendCommand+0xe6>
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_voidSendCommand+0xda>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	0e 94 81 00 	call	0x102	; 0x102 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_voidSendCommand+0x122>
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    /*Low*/
    DIO_VoidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	62 e0       	ldi	r22, 0x02	; 2
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DIO_VoidSetPinValue>

}
    176e:	2f 96       	adiw	r28, 0x0f	; 15
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_voidSendCommand>
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <LCD_voidGoToXY+0x6>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8a 83       	std	Y+2, r24	; 0x02
    17a0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8CharacterAddress = 0;
    17a2:	19 82       	std	Y+1, r1	; 0x01
    /*Calculate The Address Of The Character On LCD*/
    if(Copy_u8XPos == 0)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 23       	and	r24, r24
    17a8:	19 f4       	brne	.+6      	; 0x17b0 <LCD_voidGoToXY+0x1c>
    {
        // @ x = 0 -> Address = Y-Position
        Local_u8CharacterAddress = Copy_u8YPos;
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <LCD_voidGoToXY+0x28>
    }
    else if (Copy_u8XPos == 1)
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	19 f4       	brne	.+6      	; 0x17bc <LCD_voidGoToXY+0x28>
    {
        // @ x = 1 -> Address = Y-Position + 0x40
        Local_u8CharacterAddress = Copy_u8YPos + 0x40;
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	80 5c       	subi	r24, 0xC0	; 192
    17ba:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        // Raise an error 
    }
    /*Set The 7th bit in the address variable*/
    SET_BIT(Local_u8CharacterAddress, 7);
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	89 83       	std	Y+1, r24	; 0x01
    /*Send the address variable as a command*/
    LCD_voidSendCommand(Local_u8CharacterAddress);  
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_voidSendCommand>
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <LCD_voidSendString+0x6>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9b 83       	std	Y+3, r25	; 0x03
    17e0:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8LoopCounter = 0 ;
    17e2:	19 82       	std	Y+1, r1	; 0x01
    17e4:	0e c0       	rjmp	.+28     	; 0x1802 <LCD_voidSendString+0x2e>
    /*Loop On The String till the null terminator*/
    while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    {
        /*Send The Array Element*/
        LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	9b 81       	ldd	r25, Y+3	; 0x03
    17f0:	fc 01       	movw	r30, r24
    17f2:	e2 0f       	add	r30, r18
    17f4:	f3 1f       	adc	r31, r19
    17f6:	80 81       	ld	r24, Z
    17f8:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_voidSendData>
        Local_u8LoopCounter++;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
    u8 Local_u8LoopCounter = 0 ;
    /*Loop On The String till the null terminator*/
    while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	fc 01       	movw	r30, r24
    180e:	e2 0f       	add	r30, r18
    1810:	f3 1f       	adc	r31, r19
    1812:	80 81       	ld	r24, Z
    1814:	88 23       	and	r24, r24
    1816:	39 f7       	brne	.-50     	; 0x17e6 <LCD_voidSendString+0x12>
    {
        /*Send The Array Element*/
        LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
        Local_u8LoopCounter++;
    }
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	2d 97       	sbiw	r28, 0x0d	; 13
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	9d 87       	std	Y+13, r25	; 0x0d
    183a:	8c 87       	std	Y+12, r24	; 0x0c
    u8 Local_u8ArrayNumber[10];
    s8 Local_s8LoopCounter = 0;
    183c:	19 82       	std	Y+1, r1	; 0x01
    183e:	1f c0       	rjmp	.+62     	; 0x187e <LCD_voidSendNumber+0x5a>
    while(Copy_u32Number != 0)
    {
        Local_u8ArrayNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	e8 2f       	mov	r30, r24
    1844:	ff 27       	eor	r31, r31
    1846:	e7 fd       	sbrc	r30, 7
    1848:	f0 95       	com	r31
    184a:	8c 85       	ldd	r24, Y+12	; 0x0c
    184c:	9d 85       	ldd	r25, Y+13	; 0x0d
    184e:	2a e0       	ldi	r18, 0x0A	; 10
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	b9 01       	movw	r22, r18
    1854:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__udivmodhi4>
    1858:	28 2f       	mov	r18, r24
    185a:	ce 01       	movw	r24, r28
    185c:	02 96       	adiw	r24, 0x02	; 2
    185e:	e8 0f       	add	r30, r24
    1860:	f9 1f       	adc	r31, r25
    1862:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
    1864:	8c 85       	ldd	r24, Y+12	; 0x0c
    1866:	9d 85       	ldd	r25, Y+13	; 0x0d
    1868:	2a e0       	ldi	r18, 0x0A	; 10
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	b9 01       	movw	r22, r18
    186e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__udivmodhi4>
    1872:	cb 01       	movw	r24, r22
    1874:	9d 87       	std	Y+13, r25	; 0x0d
    1876:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    u8 Local_u8ArrayNumber[10];
    s8 Local_s8LoopCounter = 0;
    while(Copy_u32Number != 0)
    187e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1880:	9d 85       	ldd	r25, Y+13	; 0x0d
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	e9 f6       	brne	.-70     	; 0x1840 <LCD_voidSendNumber+0x1c>
    {
        Local_u8ArrayNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	81 50       	subi	r24, 0x01	; 1
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	11 c0       	rjmp	.+34     	; 0x18b0 <LCD_voidSendNumber+0x8c>
    while(Local_s8LoopCounter >= 0)
    {
        LCD_voidSendData(Local_u8ArrayNumber[Local_s8LoopCounter] + '0');
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	33 27       	eor	r19, r19
    1894:	27 fd       	sbrc	r18, 7
    1896:	30 95       	com	r19
    1898:	ce 01       	movw	r24, r28
    189a:	02 96       	adiw	r24, 0x02	; 2
    189c:	fc 01       	movw	r30, r24
    189e:	e2 0f       	add	r30, r18
    18a0:	f3 1f       	adc	r31, r19
    18a2:	80 81       	ld	r24, Z
    18a4:	80 5d       	subi	r24, 0xD0	; 208
    18a6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_voidSendData>
        Local_s8LoopCounter--;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	81 50       	subi	r24, 0x01	; 1
    18ae:	89 83       	std	Y+1, r24	; 0x01
        Local_u8ArrayNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while(Local_s8LoopCounter >= 0)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	88 23       	and	r24, r24
    18b4:	64 f7       	brge	.-40     	; 0x188e <LCD_voidSendNumber+0x6a>
    {
        LCD_voidSendData(Local_u8ArrayNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }
}
    18b6:	2d 96       	adiw	r28, 0x0d	; 13
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <LCD_voidSendCustomCharacter>:

void LCD_voidSendCustomCharacter(u8 * Copy_pu8CharacterArray,
                                 u8 Copy_u8PatternNumber,
                                 u8 Copy_u8XPosition,
                                 u8 Copy_u8YPosition)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	27 97       	sbiw	r28, 0x07	; 7
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	9c 83       	std	Y+4, r25	; 0x04
    18de:	8b 83       	std	Y+3, r24	; 0x03
    18e0:	6d 83       	std	Y+5, r22	; 0x05
    18e2:	4e 83       	std	Y+6, r20	; 0x06
    18e4:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter;
    u8 Local_u8CGRAMAddress = 0;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    /*Calculate the CGRAM Address = Pattern Number * 8*/
    Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	89 83       	std	Y+1, r24	; 0x01
    /*Set The 6th bit in the CGRAM Address Command*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	80 64       	ori	r24, 0x40	; 64
    1900:	89 83       	std	Y+1, r24	; 0x01
    /*Send The CGRAM Address Command To The LCD*/
    LCD_voidSendCommand(Local_u8CGRAMAddress);
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_voidSendCommand>
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    1908:	1a 82       	std	Y+2, r1	; 0x02
    190a:	0e c0       	rjmp	.+28     	; 0x1928 <LCD_voidSendCustomCharacter+0x60>
    {
        /*Send Byte From The Character Array*/
        LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	fc 01       	movw	r30, r24
    1918:	e2 0f       	add	r30, r18
    191a:	f3 1f       	adc	r31, r19
    191c:	80 81       	ld	r24, Z
    191e:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_voidSendData>
    Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    /*Set The 6th bit in the CGRAM Address Command*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    /*Send The CGRAM Address Command To The LCD*/
    LCD_voidSendCommand(Local_u8CGRAMAddress);
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	8a 83       	std	Y+2, r24	; 0x02
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	88 30       	cpi	r24, 0x08	; 8
    192c:	78 f3       	brcs	.-34     	; 0x190c <LCD_voidSendCustomCharacter+0x44>
    {
        /*Send Byte From The Character Array*/
        LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
    }
    /*Send The Command to Set The DDRAM Address*/
    LCD_voidGoToXY(Copy_u8XPosition, Copy_u8YPosition);
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_voidGoToXY>
    /*Display The Pattern From CGRAM*/
    LCD_voidSendData(Copy_u8PatternNumber);
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_voidSendData>
}
    193c:	27 96       	adiw	r28, 0x07	; 7
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <main>:
#include "../HAL/LCD/LCD_interface.h"



u32 main (void)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62

	LCD_voidInit();
    1956:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_voidInit>
	LCD_voidSendNumber(50);
    195a:	82 e3       	ldi	r24, 0x32	; 50
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_voidSendNumber>
    1962:	ff cf       	rjmp	.-2      	; 0x1962 <main+0x14>

00001964 <__udivmodhi4>:
    1964:	aa 1b       	sub	r26, r26
    1966:	bb 1b       	sub	r27, r27
    1968:	51 e1       	ldi	r21, 0x11	; 17
    196a:	07 c0       	rjmp	.+14     	; 0x197a <__udivmodhi4_ep>

0000196c <__udivmodhi4_loop>:
    196c:	aa 1f       	adc	r26, r26
    196e:	bb 1f       	adc	r27, r27
    1970:	a6 17       	cp	r26, r22
    1972:	b7 07       	cpc	r27, r23
    1974:	10 f0       	brcs	.+4      	; 0x197a <__udivmodhi4_ep>
    1976:	a6 1b       	sub	r26, r22
    1978:	b7 0b       	sbc	r27, r23

0000197a <__udivmodhi4_ep>:
    197a:	88 1f       	adc	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	5a 95       	dec	r21
    1980:	a9 f7       	brne	.-22     	; 0x196c <__udivmodhi4_loop>
    1982:	80 95       	com	r24
    1984:	90 95       	com	r25
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	08 95       	ret

0000198c <__prologue_saves__>:
    198c:	2f 92       	push	r2
    198e:	3f 92       	push	r3
    1990:	4f 92       	push	r4
    1992:	5f 92       	push	r5
    1994:	6f 92       	push	r6
    1996:	7f 92       	push	r7
    1998:	8f 92       	push	r8
    199a:	9f 92       	push	r9
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	ca 1b       	sub	r28, r26
    19b6:	db 0b       	sbc	r29, r27
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	19 94       	eijmp

000019c4 <__epilogue_restores__>:
    19c4:	2a 88       	ldd	r2, Y+18	; 0x12
    19c6:	39 88       	ldd	r3, Y+17	; 0x11
    19c8:	48 88       	ldd	r4, Y+16	; 0x10
    19ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    19cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    19d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19d6:	b9 84       	ldd	r11, Y+9	; 0x09
    19d8:	c8 84       	ldd	r12, Y+8	; 0x08
    19da:	df 80       	ldd	r13, Y+7	; 0x07
    19dc:	ee 80       	ldd	r14, Y+6	; 0x06
    19de:	fd 80       	ldd	r15, Y+5	; 0x05
    19e0:	0c 81       	ldd	r16, Y+4	; 0x04
    19e2:	1b 81       	ldd	r17, Y+3	; 0x03
    19e4:	aa 81       	ldd	r26, Y+2	; 0x02
    19e6:	b9 81       	ldd	r27, Y+1	; 0x01
    19e8:	ce 0f       	add	r28, r30
    19ea:	d1 1d       	adc	r29, r1
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	ed 01       	movw	r28, r26
    19f8:	08 95       	ret

000019fa <_exit>:
    19fa:	f8 94       	cli

000019fc <__stop_program>:
    19fc:	ff cf       	rjmp	.-2      	; 0x19fc <__stop_program>
