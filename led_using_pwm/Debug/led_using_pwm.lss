
led_using_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002990  00002a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800080  00800080  00002a44  2**0
                  ALLOC
  3 .stab         00002a60  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000165b  00000000  00000000  000054a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000098e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a690  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b24b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_1>
       8:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_2>
       c:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 13 	call	0x263a	; 0x263a <main>
      8a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_voidInit>:

static void (*Global_pvOVFNotificationFunction)(void) = NULL;
static void (*Global_pvOCNotificationFunction)(void) = NULL;

void TIMER0_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/* Set CTC Mode for timer0 */
	//CLEAR_BIT(TCCR0,TCCR0_WGM00);
	//SET_BIT(TCCR0,TCCR0_WGM01);
    /* set fast mode */
    SET_BIT(TCCR0,TCCR0_WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
    //set non ver
    CLEAR_BIT(TCCR0 , TCCR0_COM00);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	8c 93       	st	X, r24
    SET_BIT(TCCR0 , TCCR0_COM01);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24

	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8Value)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
     bc2:	e2 e5       	ldi	r30, 0x52	; 82
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	80 83       	st	Z, r24
}
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <TIMER0_voidSetOCMatchValue>:
void TIMER0_voidSetOCMatchValue(u8 Copy_u8Value)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	0f 92       	push	r0
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
     bde:	ec e5       	ldi	r30, 0x5C	; 92
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	80 83       	st	Z, r24
}
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <TIMER0_voidSetOVFCallBack>:

void TIMER0_voidSetOVFCallBack(void(*pvNotificationFunction)(void))
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <TIMER0_voidSetOVFCallBack+0x6>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	9a 83       	std	Y+2, r25	; 0x02
     bfa:	89 83       	std	Y+1, r24	; 0x01
	Global_pvOVFNotificationFunction = pvNotificationFunction;
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	90 93 81 00 	sts	0x0081, r25
     c04:	80 93 80 00 	sts	0x0080, r24
}
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <TIMER0_voidSetOCCallBack>:
void TIMER0_voidSetOCCallBack(void(*pvNotificationFunction)(void))
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <TIMER0_voidSetOCCallBack+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	Global_pvOCNotificationFunction = pvNotificationFunction;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	90 93 83 00 	sts	0x0083, r25
     c28:	80 93 82 00 	sts	0x0082, r24
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <TIMER0_voidEnableInterrupt>:

void TIMER0_voidEnableInterrupt(u8 Copy_u8Mode)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	0f 92       	push	r0
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Mode == NORMAL_MODE)
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	88 23       	and	r24, r24
     c46:	41 f4       	brne	.+16     	; 0xc58 <TIMER0_voidEnableInterrupt+0x22>
	{
		SET_BIT(TIMSK,TIMSK_TOIE0);
     c48:	a9 e5       	ldi	r26, 0x59	; 89
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e9 e5       	ldi	r30, 0x59	; 89
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	8c 93       	st	X, r24
     c56:	0a c0       	rjmp	.+20     	; 0xc6c <TIMER0_voidEnableInterrupt+0x36>
	}
	else if(Copy_u8Mode == CTC_MODE)
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	39 f4       	brne	.+14     	; 0xc6c <TIMER0_voidEnableInterrupt+0x36>
	{
		SET_BIT(TIMSK,TIMSK_OCIE0);
     c5e:	a9 e5       	ldi	r26, 0x59	; 89
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e9 e5       	ldi	r30, 0x59	; 89
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	82 60       	ori	r24, 0x02	; 2
     c6a:	8c 93       	st	X, r24
	}
}
     c6c:	0f 90       	pop	r0
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <TIMER0_voidDisableInterrupt>:
void TIMER0_voidDisableInterrupt(u8 Copy_u8Mode)
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	0f 92       	push	r0
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Mode == NORMAL_MODE)
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	88 23       	and	r24, r24
     c84:	41 f4       	brne	.+16     	; 0xc96 <TIMER0_voidDisableInterrupt+0x22>
	{
		CLEAR_BIT(TIMSK,TIMSK_TOIE0);
     c86:	a9 e5       	ldi	r26, 0x59	; 89
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e9 e5       	ldi	r30, 0x59	; 89
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8e 7f       	andi	r24, 0xFE	; 254
     c92:	8c 93       	st	X, r24
     c94:	0a c0       	rjmp	.+20     	; 0xcaa <TIMER0_voidDisableInterrupt+0x36>
	}
	else if(Copy_u8Mode == CTC_MODE)
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	39 f4       	brne	.+14     	; 0xcaa <TIMER0_voidDisableInterrupt+0x36>
	{
		CLEAR_BIT(TIMSK,TIMSK_OCIE0);
     c9c:	a9 e5       	ldi	r26, 0x59	; 89
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e9 e5       	ldi	r30, 0x59	; 89
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	}
}
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <TIMER0_voidSetBusyWait_OVFMode>:

void TIMER0_voidSetBusyWait_OVFMode(u32 Copy_u32Time)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <TIMER0_voidSetBusyWait_OVFMode+0x6>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <TIMER0_voidSetBusyWait_OVFMode+0x8>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <TIMER0_voidSetBusyWait_OVFMode+0xa>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
     cc4:	a3 e5       	ldi	r26, 0x53	; 83
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e3 e5       	ldi	r30, 0x53	; 83
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
     cd2:	a3 e5       	ldi	r26, 0x53	; 83
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e3 e5       	ldi	r30, 0x53	; 83
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02);
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8b 7f       	andi	r24, 0xFB	; 251
     cec:	8c 93       	st	X, r24

	TIMER0_voidSetPreloadValue(6);
     cee:	86 e0       	ldi	r24, 0x06	; 6
     cf0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TIMER0_voidSetPreloadValue>
	u32 Number_of_OVF = ((u32)(Copy_u32Time*1000)) / 250;
     cf4:	2d 81       	ldd	r18, Y+5	; 0x05
     cf6:	3e 81       	ldd	r19, Y+6	; 0x06
     cf8:	88 ee       	ldi	r24, 0xE8	; 232
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	ac 01       	movw	r20, r24
     cfe:	24 9f       	mul	r18, r20
     d00:	c0 01       	movw	r24, r0
     d02:	25 9f       	mul	r18, r21
     d04:	90 0d       	add	r25, r0
     d06:	34 9f       	mul	r19, r20
     d08:	90 0d       	add	r25, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	2a ef       	ldi	r18, 0xFA	; 250
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	b9 01       	movw	r22, r18
     d12:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__udivmodhi4>
     d16:	cb 01       	movw	r24, r22
     d18:	9c 83       	std	Y+4, r25	; 0x04
     d1a:	8b 83       	std	Y+3, r24	; 0x03

	u32 Counter = 0;
     d1c:	1a 82       	std	Y+2, r1	; 0x02
     d1e:	19 82       	std	Y+1, r1	; 0x01
     d20:	19 c0       	rjmp	.+50     	; 0xd54 <TIMER0_voidSetBusyWait_OVFMode+0xa2>

	while(Counter < Number_of_OVF)
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
     d22:	e8 e5       	ldi	r30, 0x58	; 88
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	86 95       	lsr	r24
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	81 70       	andi	r24, 0x01	; 1
     d30:	90 70       	andi	r25, 0x00	; 0
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	b1 f3       	breq	.-20     	; 0xd22 <TIMER0_voidSetBusyWait_OVFMode+0x70>
		SET_BIT(TIFR , TIFR_OCF0);
     d36:	a8 e5       	ldi	r26, 0x58	; 88
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e8 e5       	ldi	r30, 0x58	; 88
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	8c 93       	st	X, r24
		Counter++;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_voidSetPreloadValue(6);
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TIMER0_voidSetPreloadValue>
	TIMER0_voidSetPreloadValue(6);
	u32 Number_of_OVF = ((u32)(Copy_u32Time*1000)) / 250;

	u32 Counter = 0;

	while(Counter < Number_of_OVF)
     d54:	29 81       	ldd	r18, Y+1	; 0x01
     d56:	3a 81       	ldd	r19, Y+2	; 0x02
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	28 17       	cp	r18, r24
     d5e:	39 07       	cpc	r19, r25
     d60:	00 f3       	brcs	.-64     	; 0xd22 <TIMER0_voidSetBusyWait_OVFMode+0x70>
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
		SET_BIT(TIFR , TIFR_OCF0);
		Counter++;
		TIMER0_voidSetPreloadValue(6);
	}
}
     d62:	26 96       	adiw	r28, 0x06	; 6
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <TIMER0_voidSetBusyWait_OCMode>:
void TIMER0_voidSetBusyWait_OCMode(u32 Copy_u32Time)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <TIMER0_voidSetBusyWait_OCMode+0x6>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <TIMER0_voidSetBusyWait_OCMode+0x8>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <TIMER0_voidSetBusyWait_OCMode+0xa>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
     d86:	a3 e5       	ldi	r26, 0x53	; 83
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e3 e5       	ldi	r30, 0x53	; 83
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8e 7f       	andi	r24, 0xFE	; 254
     d92:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
     d94:	a3 e5       	ldi	r26, 0x53	; 83
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e3 e5       	ldi	r30, 0x53	; 83
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02);
     da2:	a3 e5       	ldi	r26, 0x53	; 83
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e3 e5       	ldi	r30, 0x53	; 83
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	8c 93       	st	X, r24

	TIMER0_voidSetOCMatchValue(250);
     db0:	8a ef       	ldi	r24, 0xFA	; 250
     db2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <TIMER0_voidSetOCMatchValue>
	/*You should cast the constants, i.e., 1000 and 250 to unsigned long (u32) and compute the multiplication operation first before the division */
	//u32 Number_of_OCFlags = ((u32)(Copy_u32Time*1000)) / 250;
	u32 Number_Of_OCF = ((u32)Copy_u32Time * 1000UL) / 250UL;
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	cc 01       	movw	r24, r24
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	28 ee       	ldi	r18, 0xE8	; 232
     dc2:	33 e0       	ldi	r19, 0x03	; 3
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	bc 01       	movw	r22, r24
     dca:	cd 01       	movw	r24, r26
     dcc:	0e 94 3a 14 	call	0x2874	; 0x2874 <__mulsi3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	2a ef       	ldi	r18, 0xFA	; 250
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	0e 94 6d 14 	call	0x28da	; 0x28da <__udivmodsi4>
     de4:	da 01       	movw	r26, r20
     de6:	c9 01       	movw	r24, r18
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03

	u32 Local_u32Counter = 0;
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	16 c0       	rjmp	.+44     	; 0xe1e <TIMER0_voidSetBusyWait_OCMode+0xaa>

	while(Local_u32Counter <= Number_Of_OCF)
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
     df2:	e8 e5       	ldi	r30, 0x58	; 88
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	86 95       	lsr	r24
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	b1 f3       	breq	.-20     	; 0xdf2 <TIMER0_voidSetBusyWait_OCMode+0x7e>
		SET_BIT(TIFR , TIFR_OCF0);
     e06:	a8 e5       	ldi	r26, 0x58	; 88
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e8 e5       	ldi	r30, 0x58	; 88
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	82 60       	ori	r24, 0x02	; 2
     e12:	8c 93       	st	X, r24
		Local_u32Counter++;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
	//u32 Number_of_OCFlags = ((u32)(Copy_u32Time*1000)) / 250;
	u32 Number_Of_OCF = ((u32)Copy_u32Time * 1000UL) / 250UL;

	u32 Local_u32Counter = 0;

	while(Local_u32Counter <= Number_Of_OCF)
     e1e:	29 81       	ldd	r18, Y+1	; 0x01
     e20:	3a 81       	ldd	r19, Y+2	; 0x02
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	82 17       	cp	r24, r18
     e28:	93 07       	cpc	r25, r19
     e2a:	18 f7       	brcc	.-58     	; 0xdf2 <TIMER0_voidSetBusyWait_OCMode+0x7e>
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
		SET_BIT(TIFR , TIFR_OCF0);
		Local_u32Counter++;
	}
}
     e2c:	26 96       	adiw	r28, 0x06	; 6
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <GIE_VoidEnabledGlobalInterrupt>:

#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_VoidEnabledGlobalInterrupt(void)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG , SREG_BIT7);
     e46:	af e5       	ldi	r26, 0x5F	; 95
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ef e5       	ldi	r30, 0x5F	; 95
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	8c 93       	st	X, r24


}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <GIE_VoidDisabledGlobalInterrupt>:
void GIE_VoidDisabledGlobalInterrupt(void)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG , SREG_BIT7);
     e62:	af e5       	ldi	r26, 0x5F	; 95
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ef e5       	ldi	r30, 0x5F	; 95
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 77       	andi	r24, 0x7F	; 127
     e6e:	8c 93       	st	X, r24


}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <EXTI_VoidIntit>:
static void (*EXTI_PVoidINT1NotificationFunction) (void) = NULL ;
static void (*EXTI_PVoidINT2NotificationFunction) (void) = NULL ;


void EXTI_VoidIntit( u8 Copy_U8INTNum)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <EXTI_VoidIntit+0x6>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_U8INTNum)
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	3b 83       	std	Y+3, r19	; 0x03
     e8c:	2a 83       	std	Y+2, r18	; 0x02
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	a1 f0       	breq	.+40     	; 0xec0 <EXTI_VoidIntit+0x4a>
     e98:	2a 81       	ldd	r18, Y+2	; 0x02
     e9a:	3b 81       	ldd	r19, Y+3	; 0x03
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <EXTI_VoidIntit+0x60>
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	9b 81       	ldd	r25, Y+3	; 0x03
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	01 f5       	brne	.+64     	; 0xeea <EXTI_VoidIntit+0x74>
    {
    case EXTI_INT0:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	62 e0       	ldi	r22, 0x02	; 2
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI0_PORT,EXTI0_PIN,HIGH);
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
     ebe:	15 c0       	rjmp	.+42     	; 0xeea <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT1:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	63 e0       	ldi	r22, 0x03	; 3
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI1_PORT,EXTI1_PIN,HIGH);
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	63 e0       	ldi	r22, 0x03	; 3
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
     ed4:	0a c0       	rjmp	.+20     	; 0xeea <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT2:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI2_PORT,EXTI2_PIN,INPUT);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI2_PORT,EXTI2_PIN,HIGH);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	62 e0       	ldi	r22, 0x02	; 2
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
        break;
    
    default:
        break;
    }
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <EXTI_VoidEnable>:

void EXTI_VoidEnable(u8 Copy_U8Intnum)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <EXTI_VoidEnable+0x6>
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3b 83       	std	Y+3, r19	; 0x03
     f0c:	2a 83       	std	Y+2, r18	; 0x02
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	9b 81       	ldd	r25, Y+3	; 0x03
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	89 f0       	breq	.+34     	; 0xf3a <EXTI_VoidEnable+0x44>
     f18:	2a 81       	ldd	r18, Y+2	; 0x02
     f1a:	3b 81       	ldd	r19, Y+3	; 0x03
     f1c:	22 30       	cpi	r18, 0x02	; 2
     f1e:	31 05       	cpc	r19, r1
     f20:	a1 f0       	breq	.+40     	; 0xf4a <EXTI_VoidEnable+0x54>
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	9b 81       	ldd	r25, Y+3	; 0x03
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	b9 f4       	brne	.+46     	; 0xf58 <EXTI_VoidEnable+0x62>
    {
    case  EXTI_INT0  :
            SET_BIT(GICR,INT0);
     f2a:	ab e5       	ldi	r26, 0x5B	; 91
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e5       	ldi	r30, 0x5B	; 91
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	8c 93       	st	X, r24
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT1:
            SET_BIT(GICR,INT1);
     f3a:	ab e5       	ldi	r26, 0x5B	; 91
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	eb e5       	ldi	r30, 0x5B	; 91
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	8c 93       	st	X, r24
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT2 :
            SET_BIT(GICR,INT2);
     f4a:	ab e5       	ldi	r26, 0x5B	; 91
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	eb e5       	ldi	r30, 0x5B	; 91
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 62       	ori	r24, 0x20	; 32
     f56:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <EXTI_VoidDisable>:
void EXTI_VoidDisable(u8 Copy_U8Intnum)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <EXTI_VoidDisable+0x6>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	3b 83       	std	Y+3, r19	; 0x03
     f7a:	2a 83       	std	Y+2, r18	; 0x02
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	91 05       	cpc	r25, r1
     f84:	89 f0       	breq	.+34     	; 0xfa8 <EXTI_VoidDisable+0x44>
     f86:	2a 81       	ldd	r18, Y+2	; 0x02
     f88:	3b 81       	ldd	r19, Y+3	; 0x03
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	a1 f0       	breq	.+40     	; 0xfb8 <EXTI_VoidDisable+0x54>
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	9b 81       	ldd	r25, Y+3	; 0x03
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	b9 f4       	brne	.+46     	; 0xfc6 <EXTI_VoidDisable+0x62>
    {
    case  EXTI_INT0:
            CLEAR_BIT(GICR,INT0);
     f98:	ab e5       	ldi	r26, 0x5B	; 91
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	eb e5       	ldi	r30, 0x5B	; 91
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8f 7b       	andi	r24, 0xBF	; 191
     fa4:	8c 93       	st	X, r24
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT1:
            CLEAR_BIT(GICR,INT1);
     fa8:	ab e5       	ldi	r26, 0x5B	; 91
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e5       	ldi	r30, 0x5B	; 91
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 77       	andi	r24, 0x7F	; 127
     fb4:	8c 93       	st	X, r24
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT2:
            CLEAR_BIT(GICR,INT2);
     fb8:	ab e5       	ldi	r26, 0x5B	; 91
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb e5       	ldi	r30, 0x5B	; 91
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7d       	andi	r24, 0xDF	; 223
     fc4:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <EXTI_VoidTriggerEdge>:
void EXTI_VoidTriggerEdge(u8 Copy_U8Intnum , u8 Copy_U8Edge)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	2a 97       	sbiw	r28, 0x0a	; 10
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_U8Intnum)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3a 87       	std	Y+10, r19	; 0x0a
     ff2:	29 87       	std	Y+9, r18	; 0x09
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <EXTI_VoidTriggerEdge+0x2e>
     ffe:	66 c0       	rjmp	.+204    	; 0x10cc <EXTI_VoidTriggerEdge+0xfa>
    1000:	29 85       	ldd	r18, Y+9	; 0x09
    1002:	3a 85       	ldd	r19, Y+10	; 0x0a
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <EXTI_VoidTriggerEdge+0x3a>
    100a:	bb c0       	rjmp	.+374    	; 0x1182 <EXTI_VoidTriggerEdge+0x1b0>
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	09 f0       	breq	.+2      	; 0x1016 <EXTI_VoidTriggerEdge+0x44>
    1014:	dd c0       	rjmp	.+442    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
    {
    case  EXTI_INT0:
                switch (Copy_U8Edge)
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	38 87       	std	Y+8, r19	; 0x08
    101e:	2f 83       	std	Y+7, r18	; 0x07
    1020:	8f 81       	ldd	r24, Y+7	; 0x07
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	91 05       	cpc	r25, r1
    1028:	21 f1       	breq	.+72     	; 0x1072 <EXTI_VoidTriggerEdge+0xa0>
    102a:	2f 81       	ldd	r18, Y+7	; 0x07
    102c:	38 85       	ldd	r19, Y+8	; 0x08
    102e:	22 30       	cpi	r18, 0x02	; 2
    1030:	31 05       	cpc	r19, r1
    1032:	2c f4       	brge	.+10     	; 0x103e <EXTI_VoidTriggerEdge+0x6c>
    1034:	8f 81       	ldd	r24, Y+7	; 0x07
    1036:	98 85       	ldd	r25, Y+8	; 0x08
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	61 f0       	breq	.+24     	; 0x1054 <EXTI_VoidTriggerEdge+0x82>
    103c:	c9 c0       	rjmp	.+402    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
    103e:	2f 81       	ldd	r18, Y+7	; 0x07
    1040:	38 85       	ldd	r19, Y+8	; 0x08
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	21 f1       	breq	.+72     	; 0x1090 <EXTI_VoidTriggerEdge+0xbe>
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	98 85       	ldd	r25, Y+8	; 0x08
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	91 05       	cpc	r25, r1
    1050:	71 f1       	breq	.+92     	; 0x10ae <EXTI_VoidTriggerEdge+0xdc>
    1052:	be c0       	rjmp	.+380    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC00);
    1054:	a5 e5       	ldi	r26, 0x55	; 85
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e5 e5       	ldi	r30, 0x55	; 85
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8e 7f       	andi	r24, 0xFE	; 254
    1060:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    1062:	a5 e5       	ldi	r26, 0x55	; 85
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e5       	ldi	r30, 0x55	; 85
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8d 7f       	andi	r24, 0xFD	; 253
    106e:	8c 93       	st	X, r24
    1070:	af c0       	rjmp	.+350    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC00);
    1072:	a5 e5       	ldi	r26, 0x55	; 85
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e5       	ldi	r30, 0x55	; 85
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    1080:	a5 e5       	ldi	r26, 0x55	; 85
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e5 e5       	ldi	r30, 0x55	; 85
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8d 7f       	andi	r24, 0xFD	; 253
    108c:	8c 93       	st	X, r24
    108e:	a0 c0       	rjmp	.+320    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC00);
    1090:	a5 e5       	ldi	r26, 0x55	; 85
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e5       	ldi	r30, 0x55	; 85
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8e 7f       	andi	r24, 0xFE	; 254
    109c:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    109e:	a5 e5       	ldi	r26, 0x55	; 85
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	8c 93       	st	X, r24
    10ac:	91 c0       	rjmp	.+290    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC00);
    10ae:	a5 e5       	ldi	r26, 0x55	; 85
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e5       	ldi	r30, 0x55	; 85
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    10bc:	a5 e5       	ldi	r26, 0x55	; 85
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e5       	ldi	r30, 0x55	; 85
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	8c 93       	st	X, r24
    10ca:	82 c0       	rjmp	.+260    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT1:
                switch (Copy_U8Edge)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3e 83       	std	Y+6, r19	; 0x06
    10d4:	2d 83       	std	Y+5, r18	; 0x05
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	21 f1       	breq	.+72     	; 0x1128 <EXTI_VoidTriggerEdge+0x156>
    10e0:	2d 81       	ldd	r18, Y+5	; 0x05
    10e2:	3e 81       	ldd	r19, Y+6	; 0x06
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <EXTI_VoidTriggerEdge+0x122>
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	61 f0       	breq	.+24     	; 0x110a <EXTI_VoidTriggerEdge+0x138>
    10f2:	6e c0       	rjmp	.+220    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	21 f1       	breq	.+72     	; 0x1146 <EXTI_VoidTriggerEdge+0x174>
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	71 f1       	breq	.+92     	; 0x1164 <EXTI_VoidTriggerEdge+0x192>
    1108:	63 c0       	rjmp	.+198    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC10);
    110a:	a5 e5       	ldi	r26, 0x55	; 85
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e5       	ldi	r30, 0x55	; 85
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8b 7f       	andi	r24, 0xFB	; 251
    1116:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	87 7f       	andi	r24, 0xF7	; 247
    1124:	8c 93       	st	X, r24
    1126:	54 c0       	rjmp	.+168    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC10);
    1128:	a5 e5       	ldi	r26, 0x55	; 85
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e5 e5       	ldi	r30, 0x55	; 85
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    1136:	a5 e5       	ldi	r26, 0x55	; 85
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e5       	ldi	r30, 0x55	; 85
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	87 7f       	andi	r24, 0xF7	; 247
    1142:	8c 93       	st	X, r24
    1144:	45 c0       	rjmp	.+138    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC10);
    1146:	a5 e5       	ldi	r26, 0x55	; 85
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e5       	ldi	r30, 0x55	; 85
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8b 7f       	andi	r24, 0xFB	; 251
    1152:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    1154:	a5 e5       	ldi	r26, 0x55	; 85
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e5       	ldi	r30, 0x55	; 85
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 60       	ori	r24, 0x08	; 8
    1160:	8c 93       	st	X, r24
    1162:	36 c0       	rjmp	.+108    	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC10);
    1164:	a5 e5       	ldi	r26, 0x55	; 85
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e5       	ldi	r30, 0x55	; 85
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	84 60       	ori	r24, 0x04	; 4
    1170:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    1172:	a5 e5       	ldi	r26, 0x55	; 85
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e5       	ldi	r30, 0x55	; 85
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 60       	ori	r24, 0x08	; 8
    117e:	8c 93       	st	X, r24
    1180:	27 c0       	rjmp	.+78     	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT2:
                switch (Copy_U8Edge)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3c 83       	std	Y+4, r19	; 0x04
    118a:	2b 83       	std	Y+3, r18	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	91 05       	cpc	r25, r1
    1194:	31 f0       	breq	.+12     	; 0x11a2 <EXTI_VoidTriggerEdge+0x1d0>
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	23 30       	cpi	r18, 0x03	; 3
    119c:	31 05       	cpc	r19, r1
    119e:	49 f0       	breq	.+18     	; 0x11b2 <EXTI_VoidTriggerEdge+0x1e0>
    11a0:	10 c0       	rjmp	.+32     	; 0x11c2 <EXTI_VoidTriggerEdge+0x1f0>
                {
            
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCSR,ISC2);
    11a2:	a4 e5       	ldi	r26, 0x54	; 84
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e4 e5       	ldi	r30, 0x54	; 84
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 7b       	andi	r24, 0xBF	; 191
    11ae:	8c 93       	st	X, r24
    11b0:	0f c0       	rjmp	.+30     	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                        
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCSR,ISC2);
    11b2:	a4 e5       	ldi	r26, 0x54	; 84
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e4 e5       	ldi	r30, 0x54	; 84
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	80 64       	ori	r24, 0x40	; 64
    11be:	8c 93       	st	X, r24
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                
                     default:
                            CLEAR_BIT(MCUCSR,ISC2);
    11c2:	a4 e5       	ldi	r26, 0x54	; 84
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e4 e5       	ldi	r30, 0x54	; 84
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7b       	andi	r24, 0xBF	; 191
    11ce:	8c 93       	st	X, r24
            break;
    
        default:
        break;
    }
}
    11d0:	2a 96       	adiw	r28, 0x0a	; 10
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <EXTI_VoidINT0SetCallBack>:

//function to take adress of user function  for EXTI0
void EXTI_VoidINT0SetCallBack(void (*NotificationFunction) (void))
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <EXTI_VoidINT0SetCallBack+0x6>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user 
    EXTI_PVoidINT0NotificationFunction=NotificationFunction ;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	90 93 85 00 	sts	0x0085, r25
    11f8:	80 93 84 00 	sts	0x0084, r24
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <__vector_1>:
//TELL LINKER OPTMIZER that function change within hardware donts delete it  
void __vector_1 (void)  __attribute__ ((signal)) ; 
//function implemention that takes global pointer to function and execute it  
// we can make macro to #define EXTI0_vector    __vector_1
void __vector_1 (void)
{   
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    //execute function 
    EXTI_PVoidINT0NotificationFunction();
    1230:	e0 91 84 00 	lds	r30, 0x0084
    1234:	f0 91 85 00 	lds	r31, 0x0085
    1238:	09 95       	icall
}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	bf 91       	pop	r27
    1244:	af 91       	pop	r26
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	7f 91       	pop	r23
    124c:	6f 91       	pop	r22
    124e:	5f 91       	pop	r21
    1250:	4f 91       	pop	r20
    1252:	3f 91       	pop	r19
    1254:	2f 91       	pop	r18
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <EXTI_VoidINT1SetCallBack>:

//function to take adress of user function  for EXTI1
void EXTI_VoidINT1SetCallBack(void (*NotificationFunction) (void))
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <EXTI_VoidINT1SetCallBack+0x6>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user
    EXTI_PVoidINT1NotificationFunction=NotificationFunction ;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	90 93 87 00 	sts	0x0087, r25
    1276:	80 93 86 00 	sts	0x0086, r24
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <__vector_2>:
//ISR for INT1
//TELL LINKER OPTMIZER that function change within hardware donts delete it
void __vector_2(void) __attribute__((signal));
//function implemention that takes global pointer to function and execute it 
void __vector_2(void)
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    //execute function
    EXTI_PVoidINT1NotificationFunction();
    12ae:	e0 91 86 00 	lds	r30, 0x0086
    12b2:	f0 91 87 00 	lds	r31, 0x0087
    12b6:	09 95       	icall
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <EXTI_VoidINT2SetCallBack>:

void EXTI_VoidINT2SetCallBack (void (*NotificationFunction) (void))
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <EXTI_VoidINT2SetCallBack+0x6>
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
    EXTI_PVoidINT2NotificationFunction=NotificationFunction;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	90 93 89 00 	sts	0x0089, r25
    12f4:	80 93 88 00 	sts	0x0088, r24
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <__vector_3>:

void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	2f 93       	push	r18
    130e:	3f 93       	push	r19
    1310:	4f 93       	push	r20
    1312:	5f 93       	push	r21
    1314:	6f 93       	push	r22
    1316:	7f 93       	push	r23
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	ef 93       	push	r30
    1322:	ff 93       	push	r31
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    EXTI_PVoidINT2NotificationFunction();
    132c:	e0 91 88 00 	lds	r30, 0x0088
    1330:	f0 91 89 00 	lds	r31, 0x0089
    1334:	09 95       	icall
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <DIO_voidSetPinDirection>:
/*Self files INclusions in the same sequence  */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void 	DIO_voidSetPinDirection(u8 Copy_U8PortNmame , u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_voidSetPinDirection+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <DIO_voidSetPinDirection+0x8>
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	6a 83       	std	Y+2, r22	; 0x02
    136e:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8PortNmame)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3d 83       	std	Y+5, r19	; 0x05
    1378:	2c 83       	std	Y+4, r18	; 0x04
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <DIO_voidSetPinDirection+0x2a>
    1384:	47 c0       	rjmp	.+142    	; 0x1414 <DIO_voidSetPinDirection+0xb8>
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <DIO_voidSetPinDirection+0x3e>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	71 f0       	breq	.+28     	; 0x13b4 <DIO_voidSetPinDirection+0x58>
    1398:	cb c0       	rjmp	.+406    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <DIO_voidSetPinDirection+0x4a>
    13a4:	67 c0       	rjmp	.+206    	; 0x1474 <DIO_voidSetPinDirection+0x118>
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <DIO_voidSetPinDirection+0x56>
    13b0:	91 c0       	rjmp	.+290    	; 0x14d4 <DIO_voidSetPinDirection+0x178>
    13b2:	be c0       	rjmp	.+380    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	a1 f4       	brne	.+40     	; 0x13e2 <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA , Copy_u8PinNumber);
    13ba:	aa e3       	ldi	r26, 0x3A	; 58
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ea e3       	ldi	r30, 0x3A	; 58
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_voidSetPinDirection+0x7c>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_voidSetPinDirection+0x78>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	a7 c0       	rjmp	.+334    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 23       	and	r24, r24
    13e6:	09 f0       	breq	.+2      	; 0x13ea <DIO_voidSetPinDirection+0x8e>
    13e8:	a3 c0       	rjmp	.+326    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRA , Copy_u8PinNumber);
    13ea:	aa e3       	ldi	r26, 0x3A	; 58
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ea e3       	ldi	r30, 0x3A	; 58
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_voidSetPinDirection+0xac>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_voidSetPinDirection+0xa8>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	8e c0       	rjmp	.+284    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	a1 f4       	brne	.+40     	; 0x1442 <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB , Copy_u8PinNumber);
    141a:	a7 e3       	ldi	r26, 0x37	; 55
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e7 e3       	ldi	r30, 0x37	; 55
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_voidSetPinDirection+0xdc>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_voidSetPinDirection+0xd8>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	77 c0       	rjmp	.+238    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	88 23       	and	r24, r24
    1446:	09 f0       	breq	.+2      	; 0x144a <DIO_voidSetPinDirection+0xee>
    1448:	73 c0       	rjmp	.+230    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRB , Copy_u8PinNumber);
    144a:	a7 e3       	ldi	r26, 0x37	; 55
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e7 e3       	ldi	r30, 0x37	; 55
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_voidSetPinDirection+0x10c>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_voidSetPinDirection+0x108>
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	5e c0       	rjmp	.+188    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	a1 f4       	brne	.+40     	; 0x14a2 <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC , Copy_u8PinNumber);
    147a:	a4 e3       	ldi	r26, 0x34	; 52
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e4 e3       	ldi	r30, 0x34	; 52
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_voidSetPinDirection+0x13c>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_voidSetPinDirection+0x138>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	47 c0       	rjmp	.+142    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 23       	and	r24, r24
    14a6:	09 f0       	breq	.+2      	; 0x14aa <DIO_voidSetPinDirection+0x14e>
    14a8:	43 c0       	rjmp	.+134    	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRC , Copy_u8PinNumber);
    14aa:	a4 e3       	ldi	r26, 0x34	; 52
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e4 e3       	ldi	r30, 0x34	; 52
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_voidSetPinDirection+0x16c>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_voidSetPinDirection+0x168>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	2e c0       	rjmp	.+92     	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	a1 f4       	brne	.+40     	; 0x1502 <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD , Copy_u8PinNumber);
    14da:	a1 e3       	ldi	r26, 0x31	; 49
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e1 e3       	ldi	r30, 0x31	; 49
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_voidSetPinDirection+0x19c>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_voidSetPinDirection+0x198>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	17 c0       	rjmp	.+46     	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 23       	and	r24, r24
    1506:	a1 f4       	brne	.+40     	; 0x1530 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRD , Copy_u8PinNumber);
    1508:	a1 e3       	ldi	r26, 0x31	; 49
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_voidSetPinDirection+0x1ca>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_voidSetPinDirection+0x1c6>
    152a:	80 95       	com	r24
    152c:	84 23       	and	r24, r20
    152e:	8c 93       	st	X, r24
	
	default:
			//do no thing 
		break;
	}
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_U8PinState)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	2d 97       	sbiw	r28, 0x0d	; 13
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	6a 83       	std	Y+2, r22	; 0x02
    1558:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8PortNumber)
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3d 87       	std	Y+13, r19	; 0x0d
    1562:	2c 87       	std	Y+12, r18	; 0x0c
    1564:	8c 85       	ldd	r24, Y+12	; 0x0c
    1566:	9d 85       	ldd	r25, Y+13	; 0x0d
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	91 05       	cpc	r25, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <DIO_VoidSetPinValue+0x30>
    156e:	4f c0       	rjmp	.+158    	; 0x160e <DIO_VoidSetPinValue+0xce>
    1570:	2c 85       	ldd	r18, Y+12	; 0x0c
    1572:	3d 85       	ldd	r19, Y+13	; 0x0d
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	2c f4       	brge	.+10     	; 0x1584 <DIO_VoidSetPinValue+0x44>
    157a:	8c 85       	ldd	r24, Y+12	; 0x0c
    157c:	9d 85       	ldd	r25, Y+13	; 0x0d
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	71 f0       	breq	.+28     	; 0x159e <DIO_VoidSetPinValue+0x5e>
    1582:	ec c0       	rjmp	.+472    	; 0x175c <DIO_VoidSetPinValue+0x21c>
    1584:	2c 85       	ldd	r18, Y+12	; 0x0c
    1586:	3d 85       	ldd	r19, Y+13	; 0x0d
    1588:	22 30       	cpi	r18, 0x02	; 2
    158a:	31 05       	cpc	r19, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_VoidSetPinValue+0x50>
    158e:	77 c0       	rjmp	.+238    	; 0x167e <DIO_VoidSetPinValue+0x13e>
    1590:	8c 85       	ldd	r24, Y+12	; 0x0c
    1592:	9d 85       	ldd	r25, Y+13	; 0x0d
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <DIO_VoidSetPinValue+0x5c>
    159a:	a9 c0       	rjmp	.+338    	; 0x16ee <DIO_VoidSetPinValue+0x1ae>
    159c:	df c0       	rjmp	.+446    	; 0x175c <DIO_VoidSetPinValue+0x21c>
	{
		case DIO_PORTA :
			switch(Copy_U8PinState)
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3b 87       	std	Y+11, r19	; 0x0b
    15a6:	2a 87       	std	Y+10, r18	; 0x0a
    15a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	31 f0       	breq	.+12     	; 0x15bc <DIO_VoidSetPinValue+0x7c>
    15b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    15b2:	3b 85       	ldd	r19, Y+11	; 0x0b
    15b4:	21 30       	cpi	r18, 0x01	; 1
    15b6:	31 05       	cpc	r19, r1
    15b8:	b1 f0       	breq	.+44     	; 0x15e6 <DIO_VoidSetPinValue+0xa6>
    15ba:	d0 c0       	rjmp	.+416    	; 0x175c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTA , Copy_u8PinNumber );
    15bc:	ab e3       	ldi	r26, 0x3B	; 59
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_VoidSetPinValue+0x9a>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_VoidSetPinValue+0x96>
    15de:	80 95       	com	r24
    15e0:	84 23       	and	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	bb c0       	rjmp	.+374    	; 0x175c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTA , Copy_u8PinNumber );
    15e6:	ab e3       	ldi	r26, 0x3B	; 59
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e3       	ldi	r30, 0x3B	; 59
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_VoidSetPinValue+0xc4>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_VoidSetPinValue+0xc0>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	a7 c0       	rjmp	.+334    	; 0x175c <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTB :
			switch(Copy_U8PinState)
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	39 87       	std	Y+9, r19	; 0x09
    1616:	28 87       	std	Y+8, r18	; 0x08
    1618:	88 85       	ldd	r24, Y+8	; 0x08
    161a:	99 85       	ldd	r25, Y+9	; 0x09
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	31 f0       	breq	.+12     	; 0x162c <DIO_VoidSetPinValue+0xec>
    1620:	28 85       	ldd	r18, Y+8	; 0x08
    1622:	39 85       	ldd	r19, Y+9	; 0x09
    1624:	21 30       	cpi	r18, 0x01	; 1
    1626:	31 05       	cpc	r19, r1
    1628:	b1 f0       	breq	.+44     	; 0x1656 <DIO_VoidSetPinValue+0x116>
    162a:	98 c0       	rjmp	.+304    	; 0x175c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTB , Copy_u8PinNumber );
    162c:	a8 e3       	ldi	r26, 0x38	; 56
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e8 e3       	ldi	r30, 0x38	; 56
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_VoidSetPinValue+0x10a>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_VoidSetPinValue+0x106>
    164e:	80 95       	com	r24
    1650:	84 23       	and	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	83 c0       	rjmp	.+262    	; 0x175c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTB , Copy_u8PinNumber );
    1656:	a8 e3       	ldi	r26, 0x38	; 56
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 e3       	ldi	r30, 0x38	; 56
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_VoidSetPinValue+0x134>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_VoidSetPinValue+0x130>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	6f c0       	rjmp	.+222    	; 0x175c <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTC :
			switch(Copy_U8PinState)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3f 83       	std	Y+7, r19	; 0x07
    1686:	2e 83       	std	Y+6, r18	; 0x06
    1688:	8e 81       	ldd	r24, Y+6	; 0x06
    168a:	9f 81       	ldd	r25, Y+7	; 0x07
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	31 f0       	breq	.+12     	; 0x169c <DIO_VoidSetPinValue+0x15c>
    1690:	2e 81       	ldd	r18, Y+6	; 0x06
    1692:	3f 81       	ldd	r19, Y+7	; 0x07
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	31 05       	cpc	r19, r1
    1698:	b1 f0       	breq	.+44     	; 0x16c6 <DIO_VoidSetPinValue+0x186>
    169a:	60 c0       	rjmp	.+192    	; 0x175c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTC , Copy_u8PinNumber );
    169c:	a5 e3       	ldi	r26, 0x35	; 53
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e3       	ldi	r30, 0x35	; 53
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_VoidSetPinValue+0x17a>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_VoidSetPinValue+0x176>
    16be:	80 95       	com	r24
    16c0:	84 23       	and	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	4b c0       	rjmp	.+150    	; 0x175c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTC , Copy_u8PinNumber );
    16c6:	a5 e3       	ldi	r26, 0x35	; 53
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e3       	ldi	r30, 0x35	; 53
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_VoidSetPinValue+0x1a4>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_VoidSetPinValue+0x1a0>
    16e8:	84 2b       	or	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	37 c0       	rjmp	.+110    	; 0x175c <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTD :
			switch(Copy_U8PinState)
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3d 83       	std	Y+5, r19	; 0x05
    16f6:	2c 83       	std	Y+4, r18	; 0x04
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	31 f0       	breq	.+12     	; 0x170c <DIO_VoidSetPinValue+0x1cc>
    1700:	2c 81       	ldd	r18, Y+4	; 0x04
    1702:	3d 81       	ldd	r19, Y+5	; 0x05
    1704:	21 30       	cpi	r18, 0x01	; 1
    1706:	31 05       	cpc	r19, r1
    1708:	b1 f0       	breq	.+44     	; 0x1736 <DIO_VoidSetPinValue+0x1f6>
    170a:	28 c0       	rjmp	.+80     	; 0x175c <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTD , Copy_u8PinNumber );
    170c:	a2 e3       	ldi	r26, 0x32	; 50
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e2 e3       	ldi	r30, 0x32	; 50
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_VoidSetPinValue+0x1ea>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_VoidSetPinValue+0x1e6>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	13 c0       	rjmp	.+38     	; 0x175c <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTD , Copy_u8PinNumber );
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_VoidSetPinValue+0x214>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_VoidSetPinValue+0x210>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
	
	default:
			// Do nothing 
		break;
	}
}
    175c:	2d 96       	adiw	r28, 0x0d	; 13
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_VoidGetPinValue>:

u8  DIO_VoidGetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_VoidGetPinValue+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_VoidGetPinValue+0x8>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8a 83       	std	Y+2, r24	; 0x02
    177e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue =0 ;
    1780:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PortName)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3d 83       	std	Y+5, r19	; 0x05
    178a:	2c 83       	std	Y+4, r18	; 0x04
    178c:	4c 81       	ldd	r20, Y+4	; 0x04
    178e:	5d 81       	ldd	r21, Y+5	; 0x05
    1790:	41 30       	cpi	r20, 0x01	; 1
    1792:	51 05       	cpc	r21, r1
    1794:	41 f1       	breq	.+80     	; 0x17e6 <DIO_VoidGetPinValue+0x78>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	91 05       	cpc	r25, r1
    179e:	34 f4       	brge	.+12     	; 0x17ac <DIO_VoidGetPinValue+0x3e>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	21 15       	cp	r18, r1
    17a6:	31 05       	cpc	r19, r1
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <DIO_VoidGetPinValue+0x54>
    17aa:	52 c0       	rjmp	.+164    	; 0x1850 <DIO_VoidGetPinValue+0xe2>
    17ac:	4c 81       	ldd	r20, Y+4	; 0x04
    17ae:	5d 81       	ldd	r21, Y+5	; 0x05
    17b0:	42 30       	cpi	r20, 0x02	; 2
    17b2:	51 05       	cpc	r21, r1
    17b4:	51 f1       	breq	.+84     	; 0x180a <DIO_VoidGetPinValue+0x9c>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	b9 f1       	breq	.+110    	; 0x182e <DIO_VoidGetPinValue+0xc0>
    17c0:	47 c0       	rjmp	.+142    	; 0x1850 <DIO_VoidGetPinValue+0xe2>
	{
		case DIO_PORTA :
			Local_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a9 01       	movw	r20, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_VoidGetPinValue+0x6c>
    17d6:	55 95       	asr	r21
    17d8:	47 95       	ror	r20
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_VoidGetPinValue+0x68>
    17de:	ca 01       	movw	r24, r20
    17e0:	81 70       	andi	r24, 0x01	; 1
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	35 c0       	rjmp	.+106    	; 0x1850 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTB :
			Local_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    17e6:	e8 e3       	ldi	r30, 0x38	; 56
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a9 01       	movw	r20, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_VoidGetPinValue+0x90>
    17fa:	55 95       	asr	r21
    17fc:	47 95       	ror	r20
    17fe:	8a 95       	dec	r24
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_VoidGetPinValue+0x8c>
    1802:	ca 01       	movw	r24, r20
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	23 c0       	rjmp	.+70     	; 0x1850 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTC :
			Local_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    180a:	e5 e3       	ldi	r30, 0x35	; 53
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_VoidGetPinValue+0xb4>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_VoidGetPinValue+0xb0>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	11 c0       	rjmp	.+34     	; 0x1850 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTD :
			Local_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    182e:	e2 e3       	ldi	r30, 0x32	; 50
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a9 01       	movw	r20, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_VoidGetPinValue+0xd8>
    1842:	55 95       	asr	r21
    1844:	47 95       	ror	r20
    1846:	8a 95       	dec	r24
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_VoidGetPinValue+0xd4>
    184a:	ca 01       	movw	r24, r20
    184c:	81 70       	andi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
	
		default:
				//Do nothing
			break;
	}
	return Local_u8PinValue;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_U8PortName , u8  Copy_U8PortState)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_VoidSetPortDirection+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <DIO_VoidSetPortDirection+0x8>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3c 83       	std	Y+4, r19	; 0x04
    187a:	2b 83       	std	Y+3, r18	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	21 f1       	breq	.+72     	; 0x18ce <DIO_VoidSetPortDirection+0x6c>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	2c f4       	brge	.+10     	; 0x189a <DIO_VoidSetPortDirection+0x38>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	61 f0       	breq	.+24     	; 0x18b0 <DIO_VoidSetPortDirection+0x4e>
    1898:	46 c0       	rjmp	.+140    	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	21 f1       	breq	.+72     	; 0x18ec <DIO_VoidSetPortDirection+0x8a>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	91 05       	cpc	r25, r1
    18ac:	71 f1       	breq	.+92     	; 0x190a <DIO_VoidSetPortDirection+0xa8>
    18ae:	3b c0       	rjmp	.+118    	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
	{
		case DIO_PORTA :
			if(Copy_U8PortState==OUTPUT)
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	29 f4       	brne	.+10     	; 0x18c0 <DIO_VoidSetPortDirection+0x5e>
			{
				SET_REG(DDRA);
    18b6:	ea e3       	ldi	r30, 0x3A	; 58
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	80 83       	st	Z, r24
    18be:	33 c0       	rjmp	.+102    	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 23       	and	r24, r24
    18c4:	81 f5       	brne	.+96     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRA);
    18c6:	ea e3       	ldi	r30, 0x3A	; 58
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1
    18cc:	2c c0       	rjmp	.+88     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTB :
			if(Copy_U8PortState==OUTPUT)
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	29 f4       	brne	.+10     	; 0x18de <DIO_VoidSetPortDirection+0x7c>
			{
				SET_REG(DDRB);
    18d4:	e7 e3       	ldi	r30, 0x37	; 55
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	80 83       	st	Z, r24
    18dc:	24 c0       	rjmp	.+72     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	88 23       	and	r24, r24
    18e2:	09 f5       	brne	.+66     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRB);
    18e4:	e7 e3       	ldi	r30, 0x37	; 55
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	10 82       	st	Z, r1
    18ea:	1d c0       	rjmp	.+58     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTC :
			if(Copy_U8PortState==OUTPUT)
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	29 f4       	brne	.+10     	; 0x18fc <DIO_VoidSetPortDirection+0x9a>
			{
				SET_REG(DDRC);
    18f2:	e4 e3       	ldi	r30, 0x34	; 52
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	80 83       	st	Z, r24
    18fa:	15 c0       	rjmp	.+42     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 23       	and	r24, r24
    1900:	91 f4       	brne	.+36     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRC);
    1902:	e4 e3       	ldi	r30, 0x34	; 52
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	10 82       	st	Z, r1
    1908:	0e c0       	rjmp	.+28     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTD :
			if(Copy_U8PortState==OUTPUT)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	29 f4       	brne	.+10     	; 0x191a <DIO_VoidSetPortDirection+0xb8>
			{
				SET_REG(DDRD);
    1910:	e1 e3       	ldi	r30, 0x31	; 49
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	80 83       	st	Z, r24
    1918:	06 c0       	rjmp	.+12     	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	88 23       	and	r24, r24
    191e:	19 f4       	brne	.+6      	; 0x1926 <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRD);
    1920:	e1 e3       	ldi	r30, 0x31	; 49
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	10 82       	st	Z, r1
		default:
			//do no thing
			break;

	}
}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <DIO_VOidTogglePortValue>:
void DIO_VOidTogglePortValue(u8 Copy_U8PortName)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <DIO_VOidTogglePortValue+0x6>
    193a:	0f 92       	push	r0
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3b 83       	std	Y+3, r19	; 0x03
    194a:	2a 83       	std	Y+2, r18	; 0x02
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	9b 81       	ldd	r25, Y+3	; 0x03
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	e9 f0       	breq	.+58     	; 0x1990 <DIO_VOidTogglePortValue+0x5c>
    1956:	2a 81       	ldd	r18, Y+2	; 0x02
    1958:	3b 81       	ldd	r19, Y+3	; 0x03
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	2c f4       	brge	.+10     	; 0x196a <DIO_VOidTogglePortValue+0x36>
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	9b 81       	ldd	r25, Y+3	; 0x03
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 f0       	breq	.+24     	; 0x1980 <DIO_VOidTogglePortValue+0x4c>
    1968:	2a c0       	rjmp	.+84     	; 0x19be <DIO_VOidTogglePortValue+0x8a>
    196a:	2a 81       	ldd	r18, Y+2	; 0x02
    196c:	3b 81       	ldd	r19, Y+3	; 0x03
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	b1 f0       	breq	.+44     	; 0x19a0 <DIO_VOidTogglePortValue+0x6c>
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	c9 f0       	breq	.+50     	; 0x19b0 <DIO_VOidTogglePortValue+0x7c>
    197e:	1f c0       	rjmp	.+62     	; 0x19be <DIO_VOidTogglePortValue+0x8a>
	{
		case DIO_PORTA :
			TOGGLE_REG(PORTA);
    1980:	ab e3       	ldi	r26, 0x3B	; 59
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	eb e3       	ldi	r30, 0x3B	; 59
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	80 95       	com	r24
    198c:	8c 93       	st	X, r24
    198e:	17 c0       	rjmp	.+46     	; 0x19be <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTB :
			TOGGLE_REG(PORTB);
    1990:	a8 e3       	ldi	r26, 0x38	; 56
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e3       	ldi	r30, 0x38	; 56
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	80 95       	com	r24
    199c:	8c 93       	st	X, r24
    199e:	0f c0       	rjmp	.+30     	; 0x19be <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTC :
			TOGGLE_REG(PORTC);
    19a0:	a5 e3       	ldi	r26, 0x35	; 53
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e5 e3       	ldi	r30, 0x35	; 53
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	80 95       	com	r24
    19ac:	8c 93       	st	X, r24
    19ae:	07 c0       	rjmp	.+14     	; 0x19be <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTD :
			TOGGLE_REG(PORTD);
    19b0:	a2 e3       	ldi	r26, 0x32	; 50
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 95       	com	r24
    19bc:	8c 93       	st	X, r24
			//do no thing
			break;

	}

}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <DIO_VoidSetSpacificvalue>:
void DIO_VoidSetSpacificvalue(u8 Copy_U8PortName , u8 Copy_U8Value)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <DIO_VoidSetSpacificvalue+0x6>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <DIO_VoidSetSpacificvalue+0x8>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3c 83       	std	Y+4, r19	; 0x04
    19e2:	2b 83       	std	Y+3, r18	; 0x03
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	91 05       	cpc	r25, r1
    19ec:	d1 f0       	breq	.+52     	; 0x1a22 <DIO_VoidSetSpacificvalue+0x58>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <DIO_VoidSetSpacificvalue+0x38>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	61 f0       	breq	.+24     	; 0x1a18 <DIO_VoidSetSpacificvalue+0x4e>
    1a00:	1e c0       	rjmp	.+60     	; 0x1a3e <DIO_VoidSetSpacificvalue+0x74>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <DIO_VoidSetSpacificvalue+0x62>
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	91 05       	cpc	r25, r1
    1a14:	81 f0       	breq	.+32     	; 0x1a36 <DIO_VoidSetSpacificvalue+0x6c>
    1a16:	13 c0       	rjmp	.+38     	; 0x1a3e <DIO_VoidSetSpacificvalue+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(PORTA,Copy_U8Value);
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(PORTB,Copy_U8Value);
    1a22:	e8 e3       	ldi	r30, 0x38	; 56
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	80 83       	st	Z, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(PORTC,Copy_U8Value);
    1a2c:	e5 e3       	ldi	r30, 0x35	; 53
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(PORTD,Copy_U8Value);
    1a36:	e2 e3       	ldi	r30, 0x32	; 50
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <DIO_U8GetPortValue>:
u8 DIO_U8GetPortValue(u8 Copy_U8PortName )
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <DIO_U8GetPortValue+0x6>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <DIO_U8GetPortValue+0x8>
    1a54:	0f 92       	push	r0
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	3c 83       	std	Y+4, r19	; 0x04
    1a64:	2b 83       	std	Y+3, r18	; 0x03
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	d1 f0       	breq	.+52     	; 0x1aa4 <DIO_U8GetPortValue+0x58>
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <DIO_U8GetPortValue+0x38>
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	61 f0       	breq	.+24     	; 0x1a9a <DIO_U8GetPortValue+0x4e>
    1a82:	1f c0       	rjmp	.+62     	; 0x1ac2 <DIO_U8GetPortValue+0x76>
    1a84:	2b 81       	ldd	r18, Y+3	; 0x03
    1a86:	3c 81       	ldd	r19, Y+4	; 0x04
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	81 f0       	breq	.+32     	; 0x1aae <DIO_U8GetPortValue+0x62>
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	83 30       	cpi	r24, 0x03	; 3
    1a94:	91 05       	cpc	r25, r1
    1a96:	81 f0       	breq	.+32     	; 0x1ab8 <DIO_U8GetPortValue+0x6c>
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <DIO_U8GetPortValue+0x76>
	{
		case DIO_PORTA :
			return PINA;
    1a9a:	e9 e3       	ldi	r30, 0x39	; 57
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	90 81       	ld	r25, Z
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	10 c0       	rjmp	.+32     	; 0x1ac4 <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTB :
			return PINB ;
    1aa4:	e6 e3       	ldi	r30, 0x36	; 54
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	20 81       	ld	r18, Z
    1aaa:	2a 83       	std	Y+2, r18	; 0x02
    1aac:	0b c0       	rjmp	.+22     	; 0x1ac4 <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTC :
			return PINC;
    1aae:	e3 e3       	ldi	r30, 0x33	; 51
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	30 81       	ld	r19, Z
    1ab4:	3a 83       	std	Y+2, r19	; 0x02
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTD :
			return PIND;
    1ab8:	e0 e3       	ldi	r30, 0x30	; 48
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8a 83       	std	Y+2, r24	; 0x02
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <DIO_U8GetPortValue+0x78>
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <DIO_U8GetPortValue+0x7c>
			//do no thing
			break;

	}

}
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	9d 83       	std	Y+5, r25	; 0x05
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <DIO_VoidSetPortSpecificDirection>:
void DIO_VoidSetPortSpecificDirection(u8 Copy_U8PortName, u8 Copy_U8SpectificDirection)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <DIO_VoidSetPortSpecificDirection+0x6>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <DIO_VoidSetPortSpecificDirection+0x8>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3c 83       	std	Y+4, r19	; 0x04
    1af2:	2b 83       	std	Y+3, r18	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	91 05       	cpc	r25, r1
    1afc:	d1 f0       	breq	.+52     	; 0x1b32 <DIO_VoidSetPortSpecificDirection+0x58>
    1afe:	2b 81       	ldd	r18, Y+3	; 0x03
    1b00:	3c 81       	ldd	r19, Y+4	; 0x04
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <DIO_VoidSetPortSpecificDirection+0x38>
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	61 f0       	breq	.+24     	; 0x1b28 <DIO_VoidSetPortSpecificDirection+0x4e>
    1b10:	1e c0       	rjmp	.+60     	; 0x1b4e <DIO_VoidSetPortSpecificDirection+0x74>
    1b12:	2b 81       	ldd	r18, Y+3	; 0x03
    1b14:	3c 81       	ldd	r19, Y+4	; 0x04
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	81 f0       	breq	.+32     	; 0x1b3c <DIO_VoidSetPortSpecificDirection+0x62>
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	91 05       	cpc	r25, r1
    1b24:	81 f0       	breq	.+32     	; 0x1b46 <DIO_VoidSetPortSpecificDirection+0x6c>
    1b26:	13 c0       	rjmp	.+38     	; 0x1b4e <DIO_VoidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(DDRA,Copy_U8SpectificDirection);
    1b28:	ea e3       	ldi	r30, 0x3A	; 58
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	80 83       	st	Z, r24
    1b30:	0e c0       	rjmp	.+28     	; 0x1b4e <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(DDRB,Copy_U8SpectificDirection);
    1b32:	e7 e3       	ldi	r30, 0x37	; 55
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	80 83       	st	Z, r24
    1b3a:	09 c0       	rjmp	.+18     	; 0x1b4e <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(DDRC,Copy_U8SpectificDirection);
    1b3c:	e4 e3       	ldi	r30, 0x34	; 52
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	80 83       	st	Z, r24
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(DDRD,Copy_U8SpectificDirection);
    1b46:	e1 e3       	ldi	r30, 0x31	; 49
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <DIO_VoidTogglePinValu>:
void DIO_VoidTogglePinValu(u8 Copy_U8PortName ,u8 Copy_u8PinNumber ) 
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <DIO_VoidTogglePinValu+0x6>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <DIO_VoidTogglePinValu+0x8>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8PortName)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3c 83       	std	Y+4, r19	; 0x04
    1b74:	2b 83       	std	Y+3, r18	; 0x03
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	49 f1       	breq	.+82     	; 0x1bd2 <DIO_VoidTogglePinValu+0x76>
    1b80:	2b 81       	ldd	r18, Y+3	; 0x03
    1b82:	3c 81       	ldd	r19, Y+4	; 0x04
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <DIO_VoidTogglePinValu+0x38>
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	61 f0       	breq	.+24     	; 0x1baa <DIO_VoidTogglePinValu+0x4e>
    1b92:	5a c0       	rjmp	.+180    	; 0x1c48 <DIO_VoidTogglePinValu+0xec>
    1b94:	2b 81       	ldd	r18, Y+3	; 0x03
    1b96:	3c 81       	ldd	r19, Y+4	; 0x04
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	71 f1       	breq	.+92     	; 0x1bfa <DIO_VoidTogglePinValu+0x9e>
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	e9 f1       	breq	.+122    	; 0x1c22 <DIO_VoidTogglePinValu+0xc6>
    1ba8:	4f c0       	rjmp	.+158    	; 0x1c48 <DIO_VoidTogglePinValu+0xec>
	{
	case DIO_PORTA:
			TOGGLE_BIT(PORTA ,Copy_u8PinNumber);
    1baa:	ab e3       	ldi	r26, 0x3B	; 59
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e3       	ldi	r30, 0x3B	; 59
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_VoidTogglePinValu+0x6c>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_VoidTogglePinValu+0x68>
    1bcc:	84 27       	eor	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	3b c0       	rjmp	.+118    	; 0x1c48 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB ,Copy_u8PinNumber);
    1bd2:	a8 e3       	ldi	r26, 0x38	; 56
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e8 e3       	ldi	r30, 0x38	; 56
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_VoidTogglePinValu+0x94>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_VoidTogglePinValu+0x90>
    1bf4:	84 27       	eor	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	27 c0       	rjmp	.+78     	; 0x1c48 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC ,Copy_u8PinNumber);
    1bfa:	a5 e3       	ldi	r26, 0x35	; 53
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e3       	ldi	r30, 0x35	; 53
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_VoidTogglePinValu+0xbc>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_VoidTogglePinValu+0xb8>
    1c1c:	84 27       	eor	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD ,Copy_u8PinNumber);
    1c22:	a2 e3       	ldi	r26, 0x32	; 50
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e2 e3       	ldi	r30, 0x32	; 50
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <DIO_VoidTogglePinValu+0xe4>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <DIO_VoidTogglePinValu+0xe0>
    1c44:	84 27       	eor	r24, r20
    1c46:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <ADC_VoidInit>:

static void (*ADC_pvoidNotificationFunction)(void) = NULL;
volatile   u16  ADC_Digital_Value ;

void ADC_VoidInit(void)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    // ADC ENABLE BIT 
    #if ADC_ENABLE == ENABLE
        SET_BIT(ADCSRA,ADEN);
    1c5e:	a6 e2       	ldi	r26, 0x26	; 38
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e6 e2       	ldi	r30, 0x26	; 38
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 68       	ori	r24, 0x80	; 128
    1c6a:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ENABLE Configuration Error"
    #endif
    //ADC ENABLE FLAG 
    #if ADC_INTERRUPT_STATUS  ==  ENABLE
        SET_BIT(ADCSRA,ADIE);
    1c6c:	a6 e2       	ldi	r26, 0x26	; 38
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e6 e2       	ldi	r30, 0x26	; 38
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	88 60       	ori	r24, 0x08	; 8
    1c78:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_INTERRUPT_ENABLE Configuration Error"
    #endif
    //
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        SET_BIT(ADMUX,ADLAR);
    1c7a:	a7 e2       	ldi	r26, 0x27	; 39
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e7 e2       	ldi	r30, 0x27	; 39
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ADJUST Configuration Error"
    #endif


    ADMUX &= REFERENCE_SELECTION_MASK ;
    1c88:	a7 e2       	ldi	r26, 0x27	; 39
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e7 e2       	ldi	r30, 0x27	; 39
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 73       	andi	r24, 0x3F	; 63
    1c94:	8c 93       	st	X, r24
    ADMUX |= Reference_Selection ;
    1c96:	a7 e2       	ldi	r26, 0x27	; 39
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e7 e2       	ldi	r30, 0x27	; 39
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8c 93       	st	X, r24

    ADCSRA &= PRESCALER_SELECTION_MASK ;
    1ca2:	a6 e2       	ldi	r26, 0x26	; 38
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e6 e2       	ldi	r30, 0x26	; 38
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	88 7f       	andi	r24, 0xF8	; 248
    1cae:	8c 93       	st	X, r24
    ADCSRA |=  PRESCALER_SELECTION ;
    1cb0:	a6 e2       	ldi	r26, 0x26	; 38
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e6 e2       	ldi	r30, 0x26	; 38
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	82 60       	ori	r24, 0x02	; 2
    1cbc:	8c 93       	st	X, r24

}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <ADC_VoidInterruptControl>:
 void ADC_VoidInterruptControl(u8 Copy_InterruptStatus)
 {
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <ADC_VoidInterruptControl+0x6>
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_InterruptStatus)
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	3b 83       	std	Y+3, r19	; 0x03
    1cda:	2a 83       	std	Y+2, r18	; 0x02
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	31 f0       	breq	.+12     	; 0x1cf0 <ADC_VoidInterruptControl+0x2c>
    1ce4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce8:	21 30       	cpi	r18, 0x01	; 1
    1cea:	31 05       	cpc	r19, r1
    1cec:	49 f0       	breq	.+18     	; 0x1d00 <ADC_VoidInterruptControl+0x3c>
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <ADC_VoidInterruptControl+0x4a>
    {
    case DISABLE :
            CLEAR_BIT(ADCSRA,ADIE);
    1cf0:	a6 e2       	ldi	r26, 0x26	; 38
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e6 e2       	ldi	r30, 0x26	; 38
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	87 7f       	andi	r24, 0xF7	; 247
    1cfc:	8c 93       	st	X, r24
    1cfe:	07 c0       	rjmp	.+14     	; 0x1d0e <ADC_VoidInterruptControl+0x4a>
        break;
    case ENABLE :
        CLEAR_BIT(ADCSRA,ADIE);
    1d00:	a6 e2       	ldi	r26, 0x26	; 38
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e6 e2       	ldi	r30, 0x26	; 38
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	87 7f       	andi	r24, 0xF7	; 247
    1d0c:	8c 93       	st	X, r24
        break ;
    default:
        break;
    }
 }
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <ADC_U8StartConversionSynchronous>:

 u8 ADC_U8StartConversionSynchronous(u8 Copy_U8ChannelNumber)
 {
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <ADC_U8StartConversionSynchronous+0x6>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	8a 83       	std	Y+2, r24	; 0x02
    // VARIABLE TO STORE THE DIGITAL DATA FROM ADC
    u8 Local_U8DigitalValue ;
    //SELECT THE CHANNEL FOR DOING CONVERSION 
    ADMUX &= CHANEL_SELECTION_MASK ;
    1d26:	a7 e2       	ldi	r26, 0x27	; 39
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e7 e2       	ldi	r30, 0x27	; 39
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 7e       	andi	r24, 0xE0	; 224
    1d32:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    1d34:	a7 e2       	ldi	r26, 0x27	; 39
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e7 e2       	ldi	r30, 0x27	; 39
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	90 81       	ld	r25, Z
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	89 2b       	or	r24, r25
    1d42:	8c 93       	st	X, r24
    //START THE CONVERSION
    SET_BIT(ADCSRA , ADSC);
    1d44:	a6 e2       	ldi	r26, 0x26	; 38
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e6 e2       	ldi	r30, 0x26	; 38
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 64       	ori	r24, 0x40	; 64
    1d50:	8c 93       	st	X, r24
    //POLLING UNTILL CONVERSION END , PROCESSOR STOP UNTILL CONVERSION END 
    while(GET_BIT(ADCSRA,ADIF) == FALSE);
    1d52:	e6 e2       	ldi	r30, 0x26	; 38
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	82 95       	swap	r24
    1d5a:	8f 70       	andi	r24, 0x0F	; 15
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	81 70       	andi	r24, 0x01	; 1
    1d62:	90 70       	andi	r25, 0x00	; 0
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	a9 f3       	breq	.-22     	; 0x1d52 <ADC_U8StartConversionSynchronous+0x38>
    //RESET THE ADC FLAG AFTER CONVERSION DONE
    SET_BIT(ADCSRA,ADIF);
    1d68:	a6 e2       	ldi	r26, 0x26	; 38
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e6 e2       	ldi	r30, 0x26	; 38
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 61       	ori	r24, 0x10	; 16
    1d74:	8c 93       	st	X, r24
    //TO READ VALUE FORM HIG REGISTER OR LOW
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        Local_U8DigitalValue = ADCH ;
    1d76:	e5 e2       	ldi	r30, 0x25	; 37
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    #elif ADC_AJUST_RESULT  ==    RIGHT_ADJUST  
        Local_U8DigitalValue = ADCL;
    #endif
    //RETURN THE DIGITAL VALUE FROM ADC 
    return Local_U8DigitalValue ;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <ADC_U8StartConversionAsynchronous>:
 void ADC_U8StartConversionAsynchronous(u8 Copy_U8ChannelNumber  ,  void (* Notification ) (void))
 {
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <ADC_U8StartConversionAsynchronous+0x6>
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	7b 83       	std	Y+3, r23	; 0x03
    1d9a:	6a 83       	std	Y+2, r22	; 0x02
    //set channel 
    ADMUX &= CHANEL_SELECTION_MASK ;
    1d9c:	a7 e2       	ldi	r26, 0x27	; 39
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e7 e2       	ldi	r30, 0x27	; 39
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 7e       	andi	r24, 0xE0	; 224
    1da8:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    1daa:	a7 e2       	ldi	r26, 0x27	; 39
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e7 e2       	ldi	r30, 0x27	; 39
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	90 81       	ld	r25, Z
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	89 2b       	or	r24, r25
    1db8:	8c 93       	st	X, r24

    ADC_pvoidNotificationFunction = Notification;
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	90 93 8b 00 	sts	0x008B, r25
    1dc2:	80 93 8a 00 	sts	0x008A, r24

    SET_BIT(ADCSRA , ADSC);
    1dc6:	a6 e2       	ldi	r26, 0x26	; 38
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e6 e2       	ldi	r30, 0x26	; 38
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 64       	ori	r24, 0x40	; 64
    1dd2:	8c 93       	st	X, r24

 }
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <__vector_16>:
 void __vector_16 (void)  __attribute__ ((signal));
 void __vector_16 (void)
{
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	2f 93       	push	r18
    1dec:	3f 93       	push	r19
    1dee:	4f 93       	push	r20
    1df0:	5f 93       	push	r21
    1df2:	6f 93       	push	r22
    1df4:	7f 93       	push	r23
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	af 93       	push	r26
    1dfc:	bf 93       	push	r27
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
     ADC_VoidInterruptControl(DISABLE);
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <ADC_VoidInterruptControl>
    ADC_Digital_Value = ADCH;
    1e10:	e5 e2       	ldi	r30, 0x25	; 37
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	90 93 8d 00 	sts	0x008D, r25
    1e1e:	80 93 8c 00 	sts	0x008C, r24
    if(ADC_pvoidNotificationFunction != NULL)
    1e22:	80 91 8a 00 	lds	r24, 0x008A
    1e26:	90 91 8b 00 	lds	r25, 0x008B
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	29 f0       	breq	.+10     	; 0x1e38 <__vector_16+0x58>
    {
        ADC_pvoidNotificationFunction();
    1e2e:	e0 91 8a 00 	lds	r30, 0x008A
    1e32:	f0 91 8b 00 	lds	r31, 0x008B
    1e36:	09 95       	icall
    }
    else
    {
        /* Do Nothing*/
    }
    ADC_VoidInterruptControl(ENABLE);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <ADC_VoidInterruptControl>
                    
                    #endif

    #endif
    */
}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	ff 91       	pop	r31
    1e44:	ef 91       	pop	r30
    1e46:	bf 91       	pop	r27
    1e48:	af 91       	pop	r26
    1e4a:	9f 91       	pop	r25
    1e4c:	8f 91       	pop	r24
    1e4e:	7f 91       	pop	r23
    1e50:	6f 91       	pop	r22
    1e52:	5f 91       	pop	r21
    1e54:	4f 91       	pop	r20
    1e56:	3f 91       	pop	r19
    1e58:	2f 91       	pop	r18
    1e5a:	0f 90       	pop	r0
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	0f 90       	pop	r0
    1e60:	1f 90       	pop	r1
    1e62:	18 95       	reti

00001e64 <LED_VoidInit>:
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

void LED_VoidInit(led_t * ledobj)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <LED_VoidInit+0x6>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidSetPinDirection(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,OUTPUT);
    1e72:	e9 81       	ldd	r30, Y+1	; 0x01
    1e74:	fa 81       	ldd	r31, Y+2	; 0x02
    1e76:	80 81       	ld	r24, Z
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	69 2f       	mov	r22, r25
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <LED_VoidTurnOn>:
void LED_VoidTurnOn(led_t * ledobj)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <LED_VoidTurnOn+0x6>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,HIGH);
    1e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea2:	80 81       	ld	r24, Z
    1ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	69 2f       	mov	r22, r25
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <LED_VoidTurnOff>:
void LED_VoidTurnOff(led_t * ledobj)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <LED_VoidTurnOff+0x6>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,LOW);
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	80 81       	ld	r24, Z
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	69 2f       	mov	r22, r25
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LED_VoidToggleLed>:
void LED_VoidToggleLed(led_t * ledobj)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <LED_VoidToggleLed+0x6>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidTogglePinValu(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin);
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	80 81       	ld	r24, Z
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	69 2f       	mov	r22, r25
    1f04:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_VoidTogglePinValu>
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <LCD_voidInit>:
#include "LCD_config.h"



void LCD_voidInit()
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    #if LCD_INIT_MODE==EIGHT_BIT_MODE
    /* Initialize  Data Port*/
     DIO_VoidSetPortSpecificDirection(LCD_DATA_PORT,OUTPUT);
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <DIO_VoidSetPortSpecificDirection>

     // set RS and R/W and ENABLE as output
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_RS_PIN,OUTPUT);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_RW_PIN,OUTPUT);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_EN_PIN,OUTPUT);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	62 e0       	ldi	r22, 0x02	; 2
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a8 e4       	ldi	r26, 0x48	; 72
    1f52:	b2 e4       	ldi	r27, 0x42	; 66
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_voidInit+0x8c>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_voidInit+0xec>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_voidInit+0xda>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_voidInit+0xce>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_voidInit+0x116>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01

     //wait for 30 ms
     _delay_ms(50);
     
     LCD_VoidSendCommand(FUNCTION_SET_CMD);
    2030:	88 e3       	ldi	r24, 0x38	; 56
    2032:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_VoidSendCommand>
     LCD_VoidSendCommand(DISPLAY_ON_OFF_CMD);
    2036:	8c e0       	ldi	r24, 0x0C	; 12
    2038:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_VoidSendCommand>
     LCD_VoidSendCommand(DISPLAY_CLEAR_CMD);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_VoidSendCommand>
    #else

        error("LCD CONFIGRATION ERROR ")

    #endif
}
    2042:	2e 96       	adiw	r28, 0x0e	; 14
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <LCD_VoidSendCommand>:

 static void LCD_VoidSendCommand(u8 Copy_Command)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	2f 97       	sbiw	r28, 0x0f	; 15
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	8f 87       	std	Y+15, r24	; 0x0f
    //clear the RS pin To sent Command 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,LOW);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    //clear the R/W pin to write 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    //set the command to data the data port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT,Copy_Command);
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	6f 85       	ldd	r22, Y+15	; 0x0f
    2082:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <DIO_VoidSetSpacificvalue>
    /* send enable pulse*/
    //low 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	62 e0       	ldi	r22, 0x02	; 2
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    //high
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,HIGH);
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e4       	ldi	r27, 0x40	; 64
    20a2:	8b 87       	std	Y+11, r24	; 0x0b
    20a4:	9c 87       	std	Y+12, r25	; 0x0c
    20a6:	ad 87       	std	Y+13, r26	; 0x0d
    20a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8f 83       	std	Y+7, r24	; 0x07
    20c4:	98 87       	std	Y+8, r25	; 0x08
    20c6:	a9 87       	std	Y+9, r26	; 0x09
    20c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <LCD_VoidSendCommand+0x98>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <LCD_VoidSendCommand+0x116>
	else if (__tmp > 65535)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <LCD_VoidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	0f c0       	rjmp	.+30     	; 0x214c <LCD_VoidSendCommand+0xf8>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	8b 83       	std	Y+3, r24	; 0x03
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_VoidSendCommand+0xe6>
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <LCD_VoidSendCommand+0xda>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <LCD_VoidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_VoidSendCommand+0x122>
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    //low
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>




}
    2188:	2f 96       	adiw	r28, 0x0f	; 15
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Copy_Data)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	2f 97       	sbiw	r28, 0x0f	; 15
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
    //clear the RS pin To sent data
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,HIGH);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    //clear the R/W pin to write 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    //set the command to data the data port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT,Copy_Data);
    21c4:	83 e0       	ldi	r24, 0x03	; 3
    21c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    21c8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <DIO_VoidSetSpacificvalue>
    /* send enable pulse*/
    //low 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	62 e0       	ldi	r22, 0x02	; 2
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    //high
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,HIGH);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	62 e0       	ldi	r22, 0x02	; 2
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e0       	ldi	r26, 0x00	; 0
    21e6:	b0 e4       	ldi	r27, 0x40	; 64
    21e8:	8b 87       	std	Y+11, r24	; 0x0b
    21ea:	9c 87       	std	Y+12, r25	; 0x0c
    21ec:	ad 87       	std	Y+13, r26	; 0x0d
    21ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a ef       	ldi	r20, 0xFA	; 250
    21fe:	54 e4       	ldi	r21, 0x44	; 68
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	8f 83       	std	Y+7, r24	; 0x07
    220a:	98 87       	std	Y+8, r25	; 0x08
    220c:	a9 87       	std	Y+9, r26	; 0x09
    220e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2210:	6f 81       	ldd	r22, Y+7	; 0x07
    2212:	78 85       	ldd	r23, Y+8	; 0x08
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	9a 85       	ldd	r25, Y+10	; 0x0a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	2c f4       	brge	.+10     	; 0x2232 <LCD_VoidSendData+0x98>
		__ticks = 1;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	3f c0       	rjmp	.+126    	; 0x22b0 <LCD_VoidSendData+0x116>
	else if (__tmp > 65535)
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	4c f5       	brge	.+82     	; 0x229c <LCD_VoidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224a:	6b 85       	ldd	r22, Y+11	; 0x0b
    224c:	7c 85       	ldd	r23, Y+12	; 0x0c
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <LCD_VoidSendData+0xf8>
    2274:	88 ec       	ldi	r24, 0xC8	; 200
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_VoidSendData+0xe6>
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <LCD_VoidSendData+0xda>
    229a:	14 c0       	rjmp	.+40     	; 0x22c4 <LCD_VoidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	9a 81       	ldd	r25, Y+2	; 0x02
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_VoidSendData+0x122>
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    //low
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>


}
    22ce:	2f 96       	adiw	r28, 0x0f	; 15
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <LCD_voidClearLcd>:

void LCD_voidClearLcd(void)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    LCD_VoidSendCommand(DISPLAY_CLEAR_CMD);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_VoidSendCommand>
}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <LCD_VoidGoToXY>:

void LCD_VoidGoToXY(u8 Copy_U8Xpostion  , u8 Copy_U8Ypostion)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <LCD_VoidGoToXY+0x6>
    22fa:	0f 92       	push	r0
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_U8CharacterAdress = 0;
    2304:	19 82       	std	Y+1, r1	; 0x01
    //calculate the address 

    if(Copy_U8Xpostion==0)
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	88 23       	and	r24, r24
    230a:	19 f4       	brne	.+6      	; 0x2312 <LCD_VoidGoToXY+0x1e>
    {
            //if x=0 so adrees = y 
            Local_U8CharacterAdress =Copy_U8Ypostion ;
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	06 c0       	rjmp	.+12     	; 0x231e <LCD_VoidGoToXY+0x2a>

    }
    else if (Copy_U8Xpostion==1)
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	81 30       	cpi	r24, 0x01	; 1
    2316:	19 f4       	brne	.+6      	; 0x231e <LCD_VoidGoToXY+0x2a>
    {
        //if x =1 so adress = y+40
        Local_U8CharacterAdress=Copy_U8Ypostion + 0x40 ;
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	80 5c       	subi	r24, 0xC0	; 192
    231c:	89 83       	std	Y+1, r24	; 0x01
    {
        //raise error 
    }
    // set bit8 to to 1 because address command has 1 in bit8

    SET_BIT(Local_U8CharacterAdress,7);
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	80 68       	ori	r24, 0x80	; 128
    2322:	89 83       	std	Y+1, r24	; 0x01
    LCD_VoidSendCommand(Local_U8CharacterAdress);
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_VoidSendCommand>

}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <LCD_VoidSendString>:
void LCD_VoidSendString ( u8 * Copy_pu8StringArray)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <LCD_VoidSendString+0x6>
    233c:	0f 92       	push	r0
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	9b 83       	std	Y+3, r25	; 0x03
    2344:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8LoopCounter =0 ;
    2346:	19 82       	std	Y+1, r1	; 0x01
    2348:	0e c0       	rjmp	.+28     	; 0x2366 <LCD_VoidSendString+0x30>
    while (Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    {
        LCD_VoidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	fc 01       	movw	r30, r24
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	80 81       	ld	r24, Z
    235c:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VoidSendData>
        Local_u8LoopCounter ++;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_VoidSendString ( u8 * Copy_pu8StringArray)
{
    u8 Local_u8LoopCounter =0 ;
    while (Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	fc 01       	movw	r30, r24
    2372:	e2 0f       	add	r30, r18
    2374:	f3 1f       	adc	r31, r19
    2376:	80 81       	ld	r24, Z
    2378:	88 23       	and	r24, r24
    237a:	39 f7       	brne	.-50     	; 0x234a <LCD_VoidSendString+0x14>
    {
        LCD_VoidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
        Local_u8LoopCounter ++;
    }

}
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32  Copy_U8number)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	2d 97       	sbiw	r28, 0x0d	; 13
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	9d 87       	std	Y+13, r25	; 0x0d
    239e:	8c 87       	std	Y+12, r24	; 0x0c
    u8 local_u8ArrayyNumber[10];
    u8 local_u8LoopCounter =0 ;
    23a0:	19 82       	std	Y+1, r1	; 0x01
    23a2:	1d c0       	rjmp	.+58     	; 0x23de <LCD_VoidSendNumber+0x56>
    while(Copy_U8number != 0)
    {
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	e8 2f       	mov	r30, r24
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    23ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    23ae:	2a e0       	ldi	r18, 0x0A	; 10
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	b9 01       	movw	r22, r18
    23b4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__udivmodhi4>
    23b8:	28 2f       	mov	r18, r24
    23ba:	ce 01       	movw	r24, r28
    23bc:	02 96       	adiw	r24, 0x02	; 2
    23be:	e8 0f       	add	r30, r24
    23c0:	f9 1f       	adc	r31, r25
    23c2:	20 83       	st	Z, r18
        Copy_U8number /= 10 ;
    23c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    23c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    23c8:	2a e0       	ldi	r18, 0x0A	; 10
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	b9 01       	movw	r22, r18
    23ce:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__udivmodhi4>
    23d2:	cb 01       	movw	r24, r22
    23d4:	9d 87       	std	Y+13, r25	; 0x0d
    23d6:	8c 87       	std	Y+12, r24	; 0x0c
        local_u8LoopCounter ++ ;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    23dc:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_VoidSendNumber(u32  Copy_U8number)
{
    u8 local_u8ArrayyNumber[10];
    u8 local_u8LoopCounter =0 ;
    while(Copy_U8number != 0)
    23de:	8c 85       	ldd	r24, Y+12	; 0x0c
    23e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	f9 f6       	brne	.-66     	; 0x23a4 <LCD_VoidSendNumber+0x1c>
    {
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
        Copy_U8number /= 10 ;
        local_u8LoopCounter ++ ;
    }
    local_u8LoopCounter -- ; // while increament and check condition
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	81 50       	subi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <LCD_VoidSendNumber+0x84>
    while(local_u8LoopCounter != 255) // beacuse loopcounter is unsigned so when we delver to - value == 255
    {
        //we want to send Asci code so add '0' 48 plus the number  if number is 5 so ascii code of 5 = 5+48('0') =53 
        LCD_VoidSendData(local_u8ArrayyNumber[local_u8LoopCounter]+ '0');
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	ce 01       	movw	r24, r28
    23f6:	02 96       	adiw	r24, 0x02	; 2
    23f8:	fc 01       	movw	r30, r24
    23fa:	e2 0f       	add	r30, r18
    23fc:	f3 1f       	adc	r31, r19
    23fe:	80 81       	ld	r24, Z
    2400:	80 5d       	subi	r24, 0xD0	; 208
    2402:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VoidSendData>
        local_u8LoopCounter -- ;
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	81 50       	subi	r24, 0x01	; 1
    240a:	89 83       	std	Y+1, r24	; 0x01
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
        Copy_U8number /= 10 ;
        local_u8LoopCounter ++ ;
    }
    local_u8LoopCounter -- ; // while increament and check condition
    while(local_u8LoopCounter != 255) // beacuse loopcounter is unsigned so when we delver to - value == 255
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	8f 3f       	cpi	r24, 0xFF	; 255
    2410:	71 f7       	brne	.-36     	; 0x23ee <LCD_VoidSendNumber+0x66>
    {
        //we want to send Asci code so add '0' 48 plus the number  if number is 5 so ascii code of 5 = 5+48('0') =53 
        LCD_VoidSendData(local_u8ArrayyNumber[local_u8LoopCounter]+ '0');
        local_u8LoopCounter -- ;
    }
}
    2412:	2d 96       	adiw	r28, 0x0d	; 13
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <LCD_VoidSendCustomCharacter>:
void LCD_VoidSendCustomCharacter( u8 * Copy_pU8CharacterArray ,u8 Copy_U8PatternNumber , u8 Copy_U8Xpostion ,  u8 Copy_U8Ypostion  )
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	27 97       	sbiw	r28, 0x07	; 7
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
    243c:	6d 83       	std	Y+5, r22	; 0x05
    243e:	4e 83       	std	Y+6, r20	; 0x06
    2440:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter ;
    u8 Local_u8CGRAMAdress = 0;
    2442:	19 82       	std	Y+1, r1	; 0x01
    //calcute the adress of CGRAM = pattern number *8  
    Local_u8CGRAMAdress = Copy_U8PatternNumber * 8 ;
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	89 83       	std	Y+1, r24	; 0x01
    //set bit 6 to 1 according to command in datasheet 
    SET_BIT(Local_u8CGRAMAdress , 6);
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	80 64       	ori	r24, 0x40	; 64
    245c:	89 83       	std	Y+1, r24	; 0x01
    //send the command that tell i call the CGRAM 
    LCD_VoidSendCommand(Local_u8CGRAMAdress);
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	0e 94 2a 10 	call	0x2054	; 0x2054 <LCD_VoidSendCommand>
    for(Local_u8LoopCounter =0 ; Local_u8LoopCounter < 8 ; Local_u8LoopCounter ++)
    2464:	1a 82       	std	Y+2, r1	; 0x02
    2466:	0e c0       	rjmp	.+28     	; 0x2484 <LCD_VoidSendCustomCharacter+0x60>
    {
        LCD_VoidSendData(Copy_pU8CharacterArray[Local_u8LoopCounter]);
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	fc 01       	movw	r30, r24
    2474:	e2 0f       	add	r30, r18
    2476:	f3 1f       	adc	r31, r19
    2478:	80 81       	ld	r24, Z
    247a:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VoidSendData>
    Local_u8CGRAMAdress = Copy_U8PatternNumber * 8 ;
    //set bit 6 to 1 according to command in datasheet 
    SET_BIT(Local_u8CGRAMAdress , 6);
    //send the command that tell i call the CGRAM 
    LCD_VoidSendCommand(Local_u8CGRAMAdress);
    for(Local_u8LoopCounter =0 ; Local_u8LoopCounter < 8 ; Local_u8LoopCounter ++)
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	8f 5f       	subi	r24, 0xFF	; 255
    2482:	8a 83       	std	Y+2, r24	; 0x02
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	88 30       	cpi	r24, 0x08	; 8
    2488:	78 f3       	brcs	.-34     	; 0x2468 <LCD_VoidSendCustomCharacter+0x44>
    {
        LCD_VoidSendData(Copy_pU8CharacterArray[Local_u8LoopCounter]);
    }
    // postion of start display and  sent data to DDRAM to display in lcd 
    LCD_VoidGoToXY(Copy_U8Xpostion , Copy_U8Ypostion);
    248a:	8e 81       	ldd	r24, Y+6	; 0x06
    248c:	6f 81       	ldd	r22, Y+7	; 0x07
    248e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_VoidGoToXY>
    LCD_VoidSendData(Copy_U8PatternNumber);
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	0e 94 cd 10 	call	0x219a	; 0x219a <LCD_VoidSendData>
    
}
    2498:	27 96       	adiw	r28, 0x07	; 7
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <KPD_VoidIntit>:
#include "KPD_private.h"



void KPD_VoidIntit(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    //set Rows pins to input pulled up
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,INPUT);
    24b2:	83 e0       	ldi	r24, 0x03	; 3
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,INPUT);
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,INPUT);
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	62 e0       	ldi	r22, 0x02	; 2
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,INPUT);
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	63 e0       	ldi	r22, 0x03	; 3
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    // PuLLED UP 
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW0_PIN,PULLUP);
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW1_PIN,PULLUP);
    24e4:	83 e0       	ldi	r24, 0x03	; 3
    24e6:	61 e0       	ldi	r22, 0x01	; 1
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW2_PIN,PULLUP);
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW3_PIN,PULLUP);
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	63 e0       	ldi	r22, 0x03	; 3
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    //set cols pins to output high
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,OUTPUT);
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	64 e0       	ldi	r22, 0x04	; 4
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,OUTPUT);
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	65 e0       	ldi	r22, 0x05	; 5
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,OUTPUT);
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	66 e0       	ldi	r22, 0x06	; 6
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,OUTPUT);
    2520:	83 e0       	ldi	r24, 0x03	; 3
    2522:	67 e0       	ldi	r22, 0x07	; 7
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
    //SET COLUMNS HIGH
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,HIGH);
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	64 e0       	ldi	r22, 0x04	; 4
    252e:	41 e0       	ldi	r20, 0x01	; 1
    2530:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,HIGH);
    2534:	83 e0       	ldi	r24, 0x03	; 3
    2536:	65 e0       	ldi	r22, 0x05	; 5
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,HIGH);
    253e:	83 e0       	ldi	r24, 0x03	; 3
    2540:	66 e0       	ldi	r22, 0x06	; 6
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,HIGH);
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	67 e0       	ldi	r22, 0x07	; 7
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>


}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <KPD_U8GetPressedKey>:
                                                 

u8 KPD_U8GetPressedKey(void)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <KPD_U8GetPressedKey+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <KPD_U8GetPressedKey+0x8>
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
   //array of colums pins
   static u8 Local_u8Array_of_columns[KPD_COLUMNS_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
   //array of rows pins
   static  u8 Local_U8Array_Of_Rows[KPD_ROWS_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    2566:	8f ef       	ldi	r24, 0xFF	; 255
    2568:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    256a:	1b 82       	std	Y+3, r1	; 0x03
    256c:	57 c0       	rjmp	.+174    	; 0x261c <KPD_U8GetPressedKey+0xc4>
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	fc 01       	movw	r30, r24
    2576:	e4 59       	subi	r30, 0x94	; 148
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	90 81       	ld	r25, Z
    257c:	83 e0       	ldi	r24, 0x03	; 3
    257e:	69 2f       	mov	r22, r25
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    2586:	1a 82       	std	Y+2, r1	; 0x02
    2588:	37 c0       	rjmp	.+110    	; 0x25f8 <KPD_U8GetPressedKey+0xa0>
        {
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	fc 01       	movw	r30, r24
    2592:	e8 59       	subi	r30, 0x98	; 152
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	90 81       	ld	r25, Z
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	69 2f       	mov	r22, r25
    259c:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VoidGetPinValue>
    25a0:	89 83       	std	Y+1, r24	; 0x01
           if(local_u8RowValue== LOW)
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	88 23       	and	r24, r24
    25a6:	29 f5       	brne	.+74     	; 0x25f2 <KPD_U8GetPressedKey+0x9a>
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	48 2f       	mov	r20, r24
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	ca 01       	movw	r24, r20
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	82 0f       	add	r24, r18
    25c0:	93 1f       	adc	r25, r19
    25c2:	fc 01       	movw	r30, r24
    25c4:	e0 59       	subi	r30, 0x90	; 144
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	8c 83       	std	Y+4, r24	; 0x04
    25cc:	0c c0       	rjmp	.+24     	; 0x25e6 <KPD_U8GetPressedKey+0x8e>
                while(local_u8RowValue==LOW)
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	fc 01       	movw	r30, r24
    25d6:	e8 59       	subi	r30, 0x98	; 152
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	90 81       	ld	r25, Z
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	69 2f       	mov	r22, r25
    25e0:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VoidGetPinValue>
    25e4:	89 83       	std	Y+1, r24	; 0x01
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
           if(local_u8RowValue== LOW)
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
                while(local_u8RowValue==LOW)
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	88 23       	and	r24, r24
    25ea:	89 f3       	breq	.-30     	; 0x25ce <KPD_U8GetPressedKey+0x76>
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
                }

                return  local_u8Key_pressed ;
    25ec:	8c 81       	ldd	r24, Y+4	; 0x04
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	1b c0       	rjmp	.+54     	; 0x2628 <KPD_U8GetPressedKey+0xd0>
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	8a 83       	std	Y+2, r24	; 0x02
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	84 30       	cpi	r24, 0x04	; 4
    25fc:	30 f2       	brcs	.-116    	; 0x258a <KPD_U8GetPressedKey+0x32>

           }

        }
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	fc 01       	movw	r30, r24
    2606:	e4 59       	subi	r30, 0x94	; 148
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	90 81       	ld	r25, Z
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	69 2f       	mov	r22, r25
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_VoidSetPinValue>
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	8b 83       	std	Y+3, r24	; 0x03
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	84 30       	cpi	r24, 0x04	; 4
    2620:	08 f4       	brcc	.+2      	; 0x2624 <KPD_U8GetPressedKey+0xcc>
    2622:	a5 cf       	rjmp	.-182    	; 0x256e <KPD_U8GetPressedKey+0x16>
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);

    }

    return local_u8Key_pressed ;
    2624:	8c 81       	ldd	r24, Y+4	; 0x04
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <main>:
#include "../MCAL/DIO/DIO_interface.h"
#include "../MCAL/TIMER/TIMER0_interface.h"


u32 main (void)
{
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	6e 97       	sbiw	r28, 0x1e	; 30
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16Counter =0 ;
    264e:	1e 8e       	std	Y+30, r1	; 0x1e
    2650:	1d 8e       	std	Y+29, r1	; 0x1d
	DIO_voidSetPinDirection(DIO_PORTB,PIN3,OUTPUT);
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	63 e0       	ldi	r22, 0x03	; 3
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_voidSetPinDirection>
	TIMER0_voidInit();
    265c:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_voidInit>

	while(1)
	{
		for(Local_u16Counter = 0 ; Local_u16Counter <= 255 ; Local_u16Counter++ )
    2660:	1e 8e       	std	Y+30, r1	; 0x1e
    2662:	1d 8e       	std	Y+29, r1	; 0x1d
    2664:	7a c0       	rjmp	.+244    	; 0x275a <main+0x120>
		{
				TIMER0_voidSetOCMatchValue(Local_u16Counter);
    2666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2668:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <TIMER0_voidSetOCMatchValue>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a8 ec       	ldi	r26, 0xC8	; 200
    2672:	b2 e4       	ldi	r27, 0x42	; 66
    2674:	89 8f       	std	Y+25, r24	; 0x19
    2676:	9a 8f       	std	Y+26, r25	; 0x1a
    2678:	ab 8f       	std	Y+27, r26	; 0x1b
    267a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	69 8d       	ldd	r22, Y+25	; 0x19
    267e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a ef       	ldi	r20, 0xFA	; 250
    268a:	54 e4       	ldi	r21, 0x44	; 68
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8d 8b       	std	Y+21, r24	; 0x15
    2696:	9e 8b       	std	Y+22, r25	; 0x16
    2698:	af 8b       	std	Y+23, r26	; 0x17
    269a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269c:	6d 89       	ldd	r22, Y+21	; 0x15
    269e:	7e 89       	ldd	r23, Y+22	; 0x16
    26a0:	8f 89       	ldd	r24, Y+23	; 0x17
    26a2:	98 8d       	ldd	r25, Y+24	; 0x18
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <main+0x84>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <main+0x102>
	else if (__tmp > 65535)
    26be:	6d 89       	ldd	r22, Y+21	; 0x15
    26c0:	7e 89       	ldd	r23, Y+22	; 0x16
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	69 8d       	ldd	r22, Y+25	; 0x19
    26d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <main+0xe4>
    2700:	88 ec       	ldi	r24, 0xC8	; 200
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9a 8b       	std	Y+18, r25	; 0x12
    2706:	89 8b       	std	Y+17, r24	; 0x11
    2708:	89 89       	ldd	r24, Y+17	; 0x11
    270a:	9a 89       	ldd	r25, Y+18	; 0x12
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <main+0xd2>
    2710:	9a 8b       	std	Y+18, r25	; 0x12
    2712:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8b 89       	ldd	r24, Y+19	; 0x13
    2720:	9c 89       	ldd	r25, Y+20	; 0x14
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <main+0xc6>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9c 8b       	std	Y+20, r25	; 0x14
    273a:	8b 8b       	std	Y+19, r24	; 0x13
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	9c 89       	ldd	r25, Y+20	; 0x14
    2740:	98 8b       	std	Y+16, r25	; 0x10
    2742:	8f 87       	std	Y+15, r24	; 0x0f
    2744:	8f 85       	ldd	r24, Y+15	; 0x0f
    2746:	98 89       	ldd	r25, Y+16	; 0x10
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <main+0x10e>
    274c:	98 8b       	std	Y+16, r25	; 0x10
    274e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinDirection(DIO_PORTB,PIN3,OUTPUT);
	TIMER0_voidInit();

	while(1)
	{
		for(Local_u16Counter = 0 ; Local_u16Counter <= 255 ; Local_u16Counter++ )
    2750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2754:	01 96       	adiw	r24, 0x01	; 1
    2756:	9e 8f       	std	Y+30, r25	; 0x1e
    2758:	8d 8f       	std	Y+29, r24	; 0x1d
    275a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275e:	8f 3f       	cpi	r24, 0xFF	; 255
    2760:	91 05       	cpc	r25, r1
    2762:	09 f0       	breq	.+2      	; 0x2766 <main+0x12c>
    2764:	08 f4       	brcc	.+2      	; 0x2768 <main+0x12e>
    2766:	7f cf       	rjmp	.-258    	; 0x2666 <main+0x2c>
		{
				TIMER0_voidSetOCMatchValue(Local_u16Counter);
				   _delay_ms(100);
		}
		for(Local_u16Counter = 0 ; Local_u16Counter <= 255 ; Local_u16Counter++ )
    2768:	1e 8e       	std	Y+30, r1	; 0x1e
    276a:	1d 8e       	std	Y+29, r1	; 0x1d
    276c:	7b c0       	rjmp	.+246    	; 0x2864 <main+0x22a>
		{
					TIMER0_voidSetOCMatchValue(255 - Local_u16Counter);
    276e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2770:	80 95       	com	r24
    2772:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <TIMER0_voidSetOCMatchValue>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a8 ec       	ldi	r26, 0xC8	; 200
    277c:	b2 e4       	ldi	r27, 0x42	; 66
    277e:	8b 87       	std	Y+11, r24	; 0x0b
    2780:	9c 87       	std	Y+12, r25	; 0x0c
    2782:	ad 87       	std	Y+13, r26	; 0x0d
    2784:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2786:	6b 85       	ldd	r22, Y+11	; 0x0b
    2788:	7c 85       	ldd	r23, Y+12	; 0x0c
    278a:	8d 85       	ldd	r24, Y+13	; 0x0d
    278c:	9e 85       	ldd	r25, Y+14	; 0x0e
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	4a ef       	ldi	r20, 0xFA	; 250
    2794:	54 e4       	ldi	r21, 0x44	; 68
    2796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	8f 83       	std	Y+7, r24	; 0x07
    27a0:	98 87       	std	Y+8, r25	; 0x08
    27a2:	a9 87       	std	Y+9, r26	; 0x09
    27a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e8       	ldi	r20, 0x80	; 128
    27b4:	5f e3       	ldi	r21, 0x3F	; 63
    27b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ba:	88 23       	and	r24, r24
    27bc:	2c f4       	brge	.+10     	; 0x27c8 <main+0x18e>
		__ticks = 1;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	3f c0       	rjmp	.+126    	; 0x2846 <main+0x20c>
	else if (__tmp > 65535)
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	78 85       	ldd	r23, Y+8	; 0x08
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	3f ef       	ldi	r19, 0xFF	; 255
    27d4:	4f e7       	ldi	r20, 0x7F	; 127
    27d6:	57 e4       	ldi	r21, 0x47	; 71
    27d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27dc:	18 16       	cp	r1, r24
    27de:	4c f5       	brge	.+82     	; 0x2832 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	51 e4       	ldi	r21, 0x41	; 65
    27f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
    2808:	0f c0       	rjmp	.+30     	; 0x2828 <main+0x1ee>
    280a:	88 ec       	ldi	r24, 0xC8	; 200
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <main+0x1dc>
    281a:	9c 83       	std	Y+4, r25	; 0x04
    281c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	69 f7       	brne	.-38     	; 0x280a <main+0x1d0>
    2830:	14 c0       	rjmp	.+40     	; 0x285a <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <main+0x218>
    2856:	9a 83       	std	Y+2, r25	; 0x02
    2858:	89 83       	std	Y+1, r24	; 0x01
		for(Local_u16Counter = 0 ; Local_u16Counter <= 255 ; Local_u16Counter++ )
		{
				TIMER0_voidSetOCMatchValue(Local_u16Counter);
				   _delay_ms(100);
		}
		for(Local_u16Counter = 0 ; Local_u16Counter <= 255 ; Local_u16Counter++ )
    285a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	9e 8f       	std	Y+30, r25	; 0x1e
    2862:	8d 8f       	std	Y+29, r24	; 0x1d
    2864:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2866:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2868:	8f 3f       	cpi	r24, 0xFF	; 255
    286a:	91 05       	cpc	r25, r1
    286c:	09 f0       	breq	.+2      	; 0x2870 <main+0x236>
    286e:	08 f4       	brcc	.+2      	; 0x2872 <main+0x238>
    2870:	7e cf       	rjmp	.-260    	; 0x276e <main+0x134>
    2872:	f6 ce       	rjmp	.-532    	; 0x2660 <main+0x26>

00002874 <__mulsi3>:
    2874:	62 9f       	mul	r22, r18
    2876:	d0 01       	movw	r26, r0
    2878:	73 9f       	mul	r23, r19
    287a:	f0 01       	movw	r30, r0
    287c:	82 9f       	mul	r24, r18
    287e:	e0 0d       	add	r30, r0
    2880:	f1 1d       	adc	r31, r1
    2882:	64 9f       	mul	r22, r20
    2884:	e0 0d       	add	r30, r0
    2886:	f1 1d       	adc	r31, r1
    2888:	92 9f       	mul	r25, r18
    288a:	f0 0d       	add	r31, r0
    288c:	83 9f       	mul	r24, r19
    288e:	f0 0d       	add	r31, r0
    2890:	74 9f       	mul	r23, r20
    2892:	f0 0d       	add	r31, r0
    2894:	65 9f       	mul	r22, r21
    2896:	f0 0d       	add	r31, r0
    2898:	99 27       	eor	r25, r25
    289a:	72 9f       	mul	r23, r18
    289c:	b0 0d       	add	r27, r0
    289e:	e1 1d       	adc	r30, r1
    28a0:	f9 1f       	adc	r31, r25
    28a2:	63 9f       	mul	r22, r19
    28a4:	b0 0d       	add	r27, r0
    28a6:	e1 1d       	adc	r30, r1
    28a8:	f9 1f       	adc	r31, r25
    28aa:	bd 01       	movw	r22, r26
    28ac:	cf 01       	movw	r24, r30
    28ae:	11 24       	eor	r1, r1
    28b0:	08 95       	ret

000028b2 <__udivmodhi4>:
    28b2:	aa 1b       	sub	r26, r26
    28b4:	bb 1b       	sub	r27, r27
    28b6:	51 e1       	ldi	r21, 0x11	; 17
    28b8:	07 c0       	rjmp	.+14     	; 0x28c8 <__udivmodhi4_ep>

000028ba <__udivmodhi4_loop>:
    28ba:	aa 1f       	adc	r26, r26
    28bc:	bb 1f       	adc	r27, r27
    28be:	a6 17       	cp	r26, r22
    28c0:	b7 07       	cpc	r27, r23
    28c2:	10 f0       	brcs	.+4      	; 0x28c8 <__udivmodhi4_ep>
    28c4:	a6 1b       	sub	r26, r22
    28c6:	b7 0b       	sbc	r27, r23

000028c8 <__udivmodhi4_ep>:
    28c8:	88 1f       	adc	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	5a 95       	dec	r21
    28ce:	a9 f7       	brne	.-22     	; 0x28ba <__udivmodhi4_loop>
    28d0:	80 95       	com	r24
    28d2:	90 95       	com	r25
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	08 95       	ret

000028da <__udivmodsi4>:
    28da:	a1 e2       	ldi	r26, 0x21	; 33
    28dc:	1a 2e       	mov	r1, r26
    28de:	aa 1b       	sub	r26, r26
    28e0:	bb 1b       	sub	r27, r27
    28e2:	fd 01       	movw	r30, r26
    28e4:	0d c0       	rjmp	.+26     	; 0x2900 <__udivmodsi4_ep>

000028e6 <__udivmodsi4_loop>:
    28e6:	aa 1f       	adc	r26, r26
    28e8:	bb 1f       	adc	r27, r27
    28ea:	ee 1f       	adc	r30, r30
    28ec:	ff 1f       	adc	r31, r31
    28ee:	a2 17       	cp	r26, r18
    28f0:	b3 07       	cpc	r27, r19
    28f2:	e4 07       	cpc	r30, r20
    28f4:	f5 07       	cpc	r31, r21
    28f6:	20 f0       	brcs	.+8      	; 0x2900 <__udivmodsi4_ep>
    28f8:	a2 1b       	sub	r26, r18
    28fa:	b3 0b       	sbc	r27, r19
    28fc:	e4 0b       	sbc	r30, r20
    28fe:	f5 0b       	sbc	r31, r21

00002900 <__udivmodsi4_ep>:
    2900:	66 1f       	adc	r22, r22
    2902:	77 1f       	adc	r23, r23
    2904:	88 1f       	adc	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	1a 94       	dec	r1
    290a:	69 f7       	brne	.-38     	; 0x28e6 <__udivmodsi4_loop>
    290c:	60 95       	com	r22
    290e:	70 95       	com	r23
    2910:	80 95       	com	r24
    2912:	90 95       	com	r25
    2914:	9b 01       	movw	r18, r22
    2916:	ac 01       	movw	r20, r24
    2918:	bd 01       	movw	r22, r26
    291a:	cf 01       	movw	r24, r30
    291c:	08 95       	ret

0000291e <__prologue_saves__>:
    291e:	2f 92       	push	r2
    2920:	3f 92       	push	r3
    2922:	4f 92       	push	r4
    2924:	5f 92       	push	r5
    2926:	6f 92       	push	r6
    2928:	7f 92       	push	r7
    292a:	8f 92       	push	r8
    292c:	9f 92       	push	r9
    292e:	af 92       	push	r10
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	ca 1b       	sub	r28, r26
    2948:	db 0b       	sbc	r29, r27
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	09 94       	ijmp

00002956 <__epilogue_restores__>:
    2956:	2a 88       	ldd	r2, Y+18	; 0x12
    2958:	39 88       	ldd	r3, Y+17	; 0x11
    295a:	48 88       	ldd	r4, Y+16	; 0x10
    295c:	5f 84       	ldd	r5, Y+15	; 0x0f
    295e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2960:	7d 84       	ldd	r7, Y+13	; 0x0d
    2962:	8c 84       	ldd	r8, Y+12	; 0x0c
    2964:	9b 84       	ldd	r9, Y+11	; 0x0b
    2966:	aa 84       	ldd	r10, Y+10	; 0x0a
    2968:	b9 84       	ldd	r11, Y+9	; 0x09
    296a:	c8 84       	ldd	r12, Y+8	; 0x08
    296c:	df 80       	ldd	r13, Y+7	; 0x07
    296e:	ee 80       	ldd	r14, Y+6	; 0x06
    2970:	fd 80       	ldd	r15, Y+5	; 0x05
    2972:	0c 81       	ldd	r16, Y+4	; 0x04
    2974:	1b 81       	ldd	r17, Y+3	; 0x03
    2976:	aa 81       	ldd	r26, Y+2	; 0x02
    2978:	b9 81       	ldd	r27, Y+1	; 0x01
    297a:	ce 0f       	add	r28, r30
    297c:	d1 1d       	adc	r29, r1
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	ed 01       	movw	r28, r26
    298a:	08 95       	ret

0000298c <_exit>:
    298c:	f8 94       	cli

0000298e <__stop_program>:
    298e:	ff cf       	rjmp	.-2      	; 0x298e <__stop_program>
