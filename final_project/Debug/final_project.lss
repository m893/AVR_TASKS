
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004eb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00004eb4  00004f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800180  00800180  00005068  2**0
                  ALLOC
  3 .stab         0000597c  00000000  00000000  00005068  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002920  00000000  00000000  0000a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000d304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000fcea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000111b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000124c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000126a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000129ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000133c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__vector_1>
       8:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__vector_2>
       c:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__vector_3>
      10:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__vector_4>
      14:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__vector_5>
      18:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__vector_6>
      1c:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__vector_7>
      20:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_8>
      24:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__vector_9>
      28:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_10>
      2c:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <main>
      8a:	0c 94 58 27 	jmp	0x4eb0	; 0x4eb0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 46 27 	jmp	0x4e8c	; 0x4e8c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 31 27 	jmp	0x4e62	; 0x4e62 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <POV_voidInit>:
volatile u8 POV_u8Position;

//Every Team Member should write his initailizations in This Function

void POV_voidInit(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	Timer0_voidInit(TIMER0_CTC_MODE,SCALER_64,OC0_DISCONECTED);
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	63 e0       	ldi	r22, 0x03	; 3
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	0e 94 89 09 	call	0x1312	; 0x1312 <Timer0_voidInit>
	Timer0_voidSetCompareMatchValue(200);
     efc:	88 ec       	ldi	r24, 0xC8	; 200
     efe:	0e 94 22 0a 	call	0x1444	; 0x1444 <Timer0_voidSetCompareMatchValue>
	Timer0_void_OCR_InterruptEnable();
     f02:	0e 94 96 0b 	call	0x172c	; 0x172c <Timer0_void_OCR_InterruptEnable>
	Timer0_voidOCRSetCallBack(&CalculateTime);
     f06:	81 e9       	ldi	r24, 0x91	; 145
     f08:	97 e0       	ldi	r25, 0x07	; 7
     f0a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <Timer0_voidOCRSetCallBack>
}
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <POV_voidStartDisplay>:

void POV_voidStartDisplay(void)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62

}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <CalculateTime>:
void CalculateTime(void)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	static counter ;
	counter ++ ;
     f2a:	80 91 80 01 	lds	r24, 0x0180
     f2e:	90 91 81 01 	lds	r25, 0x0181
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	90 93 81 01 	sts	0x0181, r25
     f38:	80 93 80 01 	sts	0x0180, r24
	if(counter == 625)
     f3c:	80 91 80 01 	lds	r24, 0x0180
     f40:	90 91 81 01 	lds	r25, 0x0181
     f44:	22 e0       	ldi	r18, 0x02	; 2
     f46:	81 37       	cpi	r24, 0x71	; 113
     f48:	92 07       	cpc	r25, r18
     f4a:	49 f4       	brne	.+18     	; 0xf5e <CalculateTime+0x3c>
	{
		seconds ++;
     f4c:	80 91 9d 01 	lds	r24, 0x019D
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 93 9d 01 	sts	0x019D, r24
		counter=0;
     f56:	10 92 81 01 	sts	0x0181, r1
     f5a:	10 92 80 01 	sts	0x0180, r1
	}
	else
	{}
	if(seconds == 60)
     f5e:	80 91 9d 01 	lds	r24, 0x019D
     f62:	8c 33       	cpi	r24, 0x3C	; 60
     f64:	39 f4       	brne	.+14     	; 0xf74 <CalculateTime+0x52>
	{
		minutes ++ ;
     f66:	80 91 9f 01 	lds	r24, 0x019F
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 93 9f 01 	sts	0x019F, r24
		seconds = 0 ;
     f70:	10 92 9d 01 	sts	0x019D, r1
	}
	else{}
	if(minutes == 60)
     f74:	80 91 9f 01 	lds	r24, 0x019F
     f78:	8c 33       	cpi	r24, 0x3C	; 60
     f7a:	39 f4       	brne	.+14     	; 0xf8a <CalculateTime+0x68>
	{
		hours ++ ;
     f7c:	80 91 a1 01 	lds	r24, 0x01A1
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 a1 01 	sts	0x01A1, r24
		minutes = 0 ;
     f86:	10 92 9f 01 	sts	0x019F, r1
	}
	else
	{}
	if(hours == 12 )
     f8a:	80 91 a1 01 	lds	r24, 0x01A1
     f8e:	8c 30       	cpi	r24, 0x0C	; 12
     f90:	11 f4       	brne	.+4      	; 0xf96 <CalculateTime+0x74>
	{
		hours = 0 ;
     f92:	10 92 a1 01 	sts	0x01A1, r1
	}
	else {

	}

}
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <Convert_ArrayToIntger>:
#include "Cal_config.h"



void Convert_ArrayToIntger(u8 * Copy_pu8Array, u8 Copy_u8ArraySize, s32 * Copy_ps32Number)
{
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	27 97       	sbiw	r28, 0x07	; 7
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	6d 83       	std	Y+5, r22	; 0x05
     fbe:	5f 83       	std	Y+7, r21	; 0x07
     fc0:	4e 83       	std	Y+6, r20	; 0x06
	s8 Local_s8LoopCounter = Copy_u8ArraySize - 1;
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	81 50       	subi	r24, 0x01	; 1
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Power = 0;
     fc8:	19 82       	std	Y+1, r1	; 0x01
	*Copy_ps32Number = 0;
     fca:	ee 81       	ldd	r30, Y+6	; 0x06
     fcc:	ff 81       	ldd	r31, Y+7	; 0x07
     fce:	11 82       	std	Z+1, r1	; 0x01
     fd0:	10 82       	st	Z, r1
     fd2:	2c c0       	rjmp	.+88     	; 0x102c <Convert_ArrayToIntger+0x90>

	while(Local_s8LoopCounter>=0)
	{
		*Copy_ps32Number += (Copy_pu8Array[Local_s8LoopCounter] - '0') * MyPower(10, Local_u8Power);
     fd4:	ee 81       	ldd	r30, Y+6	; 0x06
     fd6:	ff 81       	ldd	r31, Y+7	; 0x07
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	7c 01       	movw	r14, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	33 27       	eor	r19, r19
     fe4:	27 fd       	sbrc	r18, 7
     fe6:	30 95       	com	r19
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	fc 01       	movw	r30, r24
     fee:	e2 0f       	add	r30, r18
     ff0:	f3 1f       	adc	r31, r19
     ff2:	80 81       	ld	r24, Z
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	c0 97       	sbiw	r24, 0x30	; 48
     ffa:	8c 01       	movw	r16, r24
     ffc:	8a e0       	ldi	r24, 0x0A	; 10
     ffe:	69 81       	ldd	r22, Y+1	; 0x01
    1000:	0e 94 8d 08 	call	0x111a	; 0x111a <MyPower>
    1004:	9c 01       	movw	r18, r24
    1006:	02 9f       	mul	r16, r18
    1008:	c0 01       	movw	r24, r0
    100a:	03 9f       	mul	r16, r19
    100c:	90 0d       	add	r25, r0
    100e:	12 9f       	mul	r17, r18
    1010:	90 0d       	add	r25, r0
    1012:	11 24       	eor	r1, r1
    1014:	8e 0d       	add	r24, r14
    1016:	9f 1d       	adc	r25, r15
    1018:	ee 81       	ldd	r30, Y+6	; 0x06
    101a:	ff 81       	ldd	r31, Y+7	; 0x07
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	80 83       	st	Z, r24
		Local_u8Power++;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	89 83       	std	Y+1, r24	; 0x01
		Local_s8LoopCounter--;
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	81 50       	subi	r24, 0x01	; 1
    102a:	8a 83       	std	Y+2, r24	; 0x02
{
	s8 Local_s8LoopCounter = Copy_u8ArraySize - 1;
	u8 Local_u8Power = 0;
	*Copy_ps32Number = 0;

	while(Local_s8LoopCounter>=0)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	88 23       	and	r24, r24
    1030:	8c f6       	brge	.-94     	; 0xfd4 <Convert_ArrayToIntger+0x38>
		*Copy_ps32Number += (Copy_pu8Array[Local_s8LoopCounter] - '0') * MyPower(10, Local_u8Power);
		Local_u8Power++;
		Local_s8LoopCounter--;
	}

}
    1032:	27 96       	adiw	r28, 0x07	; 7
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	08 95       	ret

0000104c <Calculator_s32Calculate>:



s32 Calculator_s32Calculate(s32 Copy_s32Operand1, s32 Copy_s32Operand2, u8 Copy_u8Operator)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	29 97       	sbiw	r28, 0x09	; 9
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	7e 83       	std	Y+6, r23	; 0x06
    1066:	6d 83       	std	Y+5, r22	; 0x05
    1068:	4f 83       	std	Y+7, r20	; 0x07
	s32 Local_s32Result = 0;
    106a:	1a 82       	std	Y+2, r1	; 0x02
    106c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Operator)
    106e:	8f 81       	ldd	r24, Y+7	; 0x07
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	39 87       	std	Y+9, r19	; 0x09
    1076:	28 87       	std	Y+8, r18	; 0x08
    1078:	48 85       	ldd	r20, Y+8	; 0x08
    107a:	59 85       	ldd	r21, Y+9	; 0x09
    107c:	4b 32       	cpi	r20, 0x2B	; 43
    107e:	51 05       	cpc	r21, r1
    1080:	b1 f0       	breq	.+44     	; 0x10ae <Calculator_s32Calculate+0x62>
    1082:	88 85       	ldd	r24, Y+8	; 0x08
    1084:	99 85       	ldd	r25, Y+9	; 0x09
    1086:	8c 32       	cpi	r24, 0x2C	; 44
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <Calculator_s32Calculate+0x4c>
    108c:	28 85       	ldd	r18, Y+8	; 0x08
    108e:	39 85       	ldd	r19, Y+9	; 0x09
    1090:	2a 32       	cpi	r18, 0x2A	; 42
    1092:	31 05       	cpc	r19, r1
    1094:	f1 f0       	breq	.+60     	; 0x10d2 <Calculator_s32Calculate+0x86>
    1096:	36 c0       	rjmp	.+108    	; 0x1104 <Calculator_s32Calculate+0xb8>
    1098:	48 85       	ldd	r20, Y+8	; 0x08
    109a:	59 85       	ldd	r21, Y+9	; 0x09
    109c:	4d 32       	cpi	r20, 0x2D	; 45
    109e:	51 05       	cpc	r21, r1
    10a0:	79 f0       	breq	.+30     	; 0x10c0 <Calculator_s32Calculate+0x74>
    10a2:	88 85       	ldd	r24, Y+8	; 0x08
    10a4:	99 85       	ldd	r25, Y+9	; 0x09
    10a6:	8f 32       	cpi	r24, 0x2F	; 47
    10a8:	91 05       	cpc	r25, r1
    10aa:	11 f1       	breq	.+68     	; 0x10f0 <Calculator_s32Calculate+0xa4>
    10ac:	2b c0       	rjmp	.+86     	; 0x1104 <Calculator_s32Calculate+0xb8>
	{
		case '+':
			Local_s32Result = Copy_s32Operand1 + Copy_s32Operand2;
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	2d 81       	ldd	r18, Y+5	; 0x05
    10b4:	3e 81       	ldd	r19, Y+6	; 0x06
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	22 c0       	rjmp	.+68     	; 0x1104 <Calculator_s32Calculate+0xb8>
			break;
		case '-':
			Local_s32Result = Copy_s32Operand1 - Copy_s32Operand2;
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	2d 81       	ldd	r18, Y+5	; 0x05
    10c6:	3e 81       	ldd	r19, Y+6	; 0x06
    10c8:	82 1b       	sub	r24, r18
    10ca:	93 0b       	sbc	r25, r19
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	19 c0       	rjmp	.+50     	; 0x1104 <Calculator_s32Calculate+0xb8>
			break;
		case '*':
			Local_s32Result = Copy_s32Operand1 * Copy_s32Operand2;
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	2d 81       	ldd	r18, Y+5	; 0x05
    10d8:	3e 81       	ldd	r19, Y+6	; 0x06
    10da:	ac 01       	movw	r20, r24
    10dc:	42 9f       	mul	r20, r18
    10de:	c0 01       	movw	r24, r0
    10e0:	43 9f       	mul	r20, r19
    10e2:	90 0d       	add	r25, r0
    10e4:	52 9f       	mul	r21, r18
    10e6:	90 0d       	add	r25, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <Calculator_s32Calculate+0xb8>
			break;
		case '/':
			Local_s32Result = Copy_s32Operand1 / Copy_s32Operand2;
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	b9 01       	movw	r22, r18
    10fa:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__divmodhi4>
    10fe:	cb 01       	movw	r24, r22
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}

	return Local_s32Result;
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1108:	29 96       	adiw	r28, 0x09	; 9
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <MyPower>:



static u32 MyPower(u8 Copy_u8Base, u8 Copy_u8Power)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <MyPower+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <MyPower+0x8>
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	8c 83       	std	Y+4, r24	; 0x04
    112a:	6d 83       	std	Y+5, r22	; 0x05
	u32 Local_u32Result = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9b 83       	std	Y+3, r25	; 0x03
    1132:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    1134:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Power == 0)
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	88 23       	and	r24, r24
    113a:	29 f4       	brne	.+10     	; 0x1146 <MyPower+0x2c>
	{
		Local_u32Result = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9b 83       	std	Y+3, r25	; 0x03
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	18 c0       	rjmp	.+48     	; 0x1176 <MyPower+0x5c>
	}
	else
	{
		for(Local_u8LoopCounter=0; Local_u8LoopCounter<Copy_u8Power; Local_u8LoopCounter++)
    1146:	19 82       	std	Y+1, r1	; 0x01
    1148:	12 c0       	rjmp	.+36     	; 0x116e <MyPower+0x54>
		{
			Local_u32Result *= Copy_u8Base;
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	9b 81       	ldd	r25, Y+3	; 0x03
    1154:	ac 01       	movw	r20, r24
    1156:	42 9f       	mul	r20, r18
    1158:	c0 01       	movw	r24, r0
    115a:	43 9f       	mul	r20, r19
    115c:	90 0d       	add	r25, r0
    115e:	52 9f       	mul	r21, r18
    1160:	90 0d       	add	r25, r0
    1162:	11 24       	eor	r1, r1
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	8a 83       	std	Y+2, r24	; 0x02
	{
		Local_u32Result = 1;
	}
	else
	{
		for(Local_u8LoopCounter=0; Local_u8LoopCounter<Copy_u8Power; Local_u8LoopCounter++)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	98 17       	cp	r25, r24
    1174:	50 f3       	brcs	.-44     	; 0x114a <MyPower+0x30>
		{
			Local_u32Result *= Copy_u8Base;
		}
	}

	return Local_u32Result;
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <WDT_voidEnable>:
#include "WDT_interface.h"
#include "WDT_private.h"
#include "WDT_config.h"

void WDT_voidEnable(void)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR, WDTCR_WDE);
    1192:	a1 e4       	ldi	r26, 0x41	; 65
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e4       	ldi	r30, 0x41	; 65
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 60       	ori	r24, 0x08	; 8
    119e:	8c 93       	st	X, r24
}
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <WDT_voidSetTime>:

void WDT_voidSetTime(u8 Copy_u8Scaler)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
    WDTCR &= SCALER_CLEAR_MASK;
    11b2:	a1 e4       	ldi	r26, 0x41	; 65
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e1 e4       	ldi	r30, 0x41	; 65
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 7f       	andi	r24, 0xF8	; 248
    11be:	8c 93       	st	X, r24
    WDTCR |= Copy_u8Scaler;
    11c0:	a1 e4       	ldi	r26, 0x41	; 65
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e1 e4       	ldi	r30, 0x41	; 65
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	90 81       	ld	r25, Z
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	89 2b       	or	r24, r25
    11ce:	8c 93       	st	X, r24
}
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    WDTCR = DISABLE_MASK;
    11e0:	e1 e4       	ldi	r30, 0x41	; 65
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	88 e1       	ldi	r24, 0x18	; 24
    11e6:	80 83       	st	Z, r24
    WDTCR = ZERO;
    11e8:	e1 e4       	ldi	r30, 0x41	; 65
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	10 82       	st	Z, r1
}
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <UART_voidInit>:
#include "UART_private.h"
#include "UART_config.h"


void UART_voidInit(void)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8UCSRC = 0;
    11fe:	19 82       	std	Y+1, r1	; 0x01

    CLEAR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	8f 7b       	andi	r24, 0xBF	; 191
    1204:	89 83       	std	Y+1, r24	; 0x01

    SET_BIT(UCSRB, UCSRB_RXEN);
    1206:	aa e2       	ldi	r26, 0x2A	; 42
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ea e2       	ldi	r30, 0x2A	; 42
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 61       	ori	r24, 0x10	; 16
    1212:	8c 93       	st	X, r24
    SET_BIT(UCSRB, UCSRB_TXEN);
    1214:	aa e2       	ldi	r26, 0x2A	; 42
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ea e2       	ldi	r30, 0x2A	; 42
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	8c 93       	st	X, r24

    SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	84 60       	ori	r24, 0x04	; 4
    122c:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(UCSRB, UCSRB_UCSZ2);
    122e:	aa e2       	ldi	r26, 0x2A	; 42
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ea e2       	ldi	r30, 0x2A	; 42
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8b 7f       	andi	r24, 0xFB	; 251
    123a:	8c 93       	st	X, r24

    CLEAR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	8f 7e       	andi	r24, 0xEF	; 239
    1240:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	8f 7d       	andi	r24, 0xDF	; 223
    1246:	89 83       	std	Y+1, r24	; 0x01

    CLEAR_BIT(Local_u8UCSRC, UCSRC_USBS);
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	89 83       	std	Y+1, r24	; 0x01

    SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 68       	ori	r24, 0x80	; 128
    1252:	89 83       	std	Y+1, r24	; 0x01

    UCSRC = Local_u8UCSRC;
    1254:	e0 e4       	ldi	r30, 0x40	; 64
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	80 83       	st	Z, r24

    CLEAR_BIT(UBRRH, UBRRH_URSEL);
    125c:	a0 e4       	ldi	r26, 0x40	; 64
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e0 e4       	ldi	r30, 0x40	; 64
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 77       	andi	r24, 0x7F	; 127
    1268:	8c 93       	st	X, r24
    UBRRH = 0;
    126a:	e0 e4       	ldi	r30, 0x40	; 64
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	10 82       	st	Z, r1
    UBRRL = 51;
    1270:	e9 e2       	ldi	r30, 0x29	; 41
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	83 e3       	ldi	r24, 0x33	; 51
    1276:	80 83       	st	Z, r24
}
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <UART_voidTransmitData>:

void UART_voidTransmitData(u8 Copy_u8Data)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    while (GET_BIT(UCSRA, UCSRA_UDRE) == 0);
    128c:	eb e2       	ldi	r30, 0x2B	; 43
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	82 95       	swap	r24
    1294:	86 95       	lsr	r24
    1296:	87 70       	andi	r24, 0x07	; 7
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	90 70       	andi	r25, 0x00	; 0
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	a1 f3       	breq	.-24     	; 0x128c <UART_voidTransmitData+0xc>

    UDR = Copy_u8Data;
    12a4:	ec e2       	ldi	r30, 0x2C	; 44
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	80 83       	st	Z, r24

    while(GET_BIT(UCSRA, UCSRA_TXC) == 0);
    12ac:	eb e2       	ldi	r30, 0x2B	; 43
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	82 95       	swap	r24
    12b4:	86 95       	lsr	r24
    12b6:	86 95       	lsr	r24
    12b8:	83 70       	andi	r24, 0x03	; 3
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	99 f3       	breq	.-26     	; 0x12ac <UART_voidTransmitData+0x2c>
    SET_BIT(UCSRA, UCSRA_TXC);
    12c6:	ab e2       	ldi	r26, 0x2B	; 43
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	eb e2       	ldi	r30, 0x2B	; 43
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 64       	ori	r24, 0x40	; 64
    12d2:	8c 93       	st	X, r24
}
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <UART_voidRecieveData>:

void UART_voidRecieveData(u8 *pu8RecievedData)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <UART_voidRecieveData+0x6>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
    while(GET_BIT(UCSRA, UCSRA_RXC) == 0);
    12ea:	eb e2       	ldi	r30, 0x2B	; 43
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	88 23       	and	r24, r24
    12f2:	dc f7       	brge	.-10     	; 0x12ea <UART_voidRecieveData+0xe>

    if(pu8RecievedData)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	31 f0       	breq	.+12     	; 0x1308 <UART_voidRecieveData+0x2c>
    {
        *pu8RecievedData = UDR;
    12fc:	ec e2       	ldi	r30, 0x2C	; 44
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	e9 81       	ldd	r30, Y+1	; 0x01
    1304:	fa 81       	ldd	r31, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
    }
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <Timer0_voidInit>:
#include "Timer_config.h"



void Timer0_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OCRMode)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <Timer0_voidInit+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <Timer0_voidInit+0x8>
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	6a 83       	std	Y+2, r22	; 0x02
    1324:	4b 83       	std	Y+3, r20	; 0x03
    /*Set Timer0 Mode*/
    switch (Copy_u8Mode)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3d 83       	std	Y+5, r19	; 0x05
    132e:	2c 83       	std	Y+4, r18	; 0x04
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	09 f4       	brne	.+2      	; 0x133c <Timer0_voidInit+0x2a>
    133a:	42 c0       	rjmp	.+132    	; 0x13c0 <Timer0_voidInit+0xae>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	2c f4       	brge	.+10     	; 0x1350 <Timer0_voidInit+0x3e>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 f0       	breq	.+24     	; 0x1366 <Timer0_voidInit+0x54>
    134e:	46 c0       	rjmp	.+140    	; 0x13dc <Timer0_voidInit+0xca>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	21 f1       	breq	.+72     	; 0x13a2 <Timer0_voidInit+0x90>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <Timer0_voidInit+0x72>
    1364:	3b c0       	rjmp	.+118    	; 0x13dc <Timer0_voidInit+0xca>
    {
    case TIMER0_NORMAL_MODE:
        CLEAR_BIT(TCCR0, TCCR0_WGM00);
    1366:	a3 e5       	ldi	r26, 0x53	; 83
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e3 e5       	ldi	r30, 0x53	; 83
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8f 7b       	andi	r24, 0xBF	; 191
    1372:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR0, TCCR0_WGM01);
    1374:	a3 e5       	ldi	r26, 0x53	; 83
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e3 e5       	ldi	r30, 0x53	; 83
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	87 7f       	andi	r24, 0xF7	; 247
    1380:	8c 93       	st	X, r24
    1382:	2c c0       	rjmp	.+88     	; 0x13dc <Timer0_voidInit+0xca>
        break;
    case TIMER0_PHASE_CORRECT_MODE:
        SET_BIT(TCCR0, TCCR0_WGM00);
    1384:	a3 e5       	ldi	r26, 0x53	; 83
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e3 e5       	ldi	r30, 0x53	; 83
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	80 64       	ori	r24, 0x40	; 64
    1390:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR0, TCCR0_WGM01);
    1392:	a3 e5       	ldi	r26, 0x53	; 83
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e3 e5       	ldi	r30, 0x53	; 83
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	87 7f       	andi	r24, 0xF7	; 247
    139e:	8c 93       	st	X, r24
    13a0:	1d c0       	rjmp	.+58     	; 0x13dc <Timer0_voidInit+0xca>
        break;
    case TIMER0_CTC_MODE:
        CLEAR_BIT(TCCR0, TCCR0_WGM00);
    13a2:	a3 e5       	ldi	r26, 0x53	; 83
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e3 e5       	ldi	r30, 0x53	; 83
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7b       	andi	r24, 0xBF	; 191
    13ae:	8c 93       	st	X, r24
        SET_BIT(TCCR0, TCCR0_WGM01);
    13b0:	a3 e5       	ldi	r26, 0x53	; 83
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e3 e5       	ldi	r30, 0x53	; 83
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 60       	ori	r24, 0x08	; 8
    13bc:	8c 93       	st	X, r24
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <Timer0_voidInit+0xca>
        break;
    case TIMER0_FAST_MODE:
        SET_BIT(TCCR0, TCCR0_WGM00);
    13c0:	a3 e5       	ldi	r26, 0x53	; 83
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e3 e5       	ldi	r30, 0x53	; 83
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	8c 93       	st	X, r24
        SET_BIT(TCCR0, TCCR0_WGM01);
    13ce:	a3 e5       	ldi	r26, 0x53	; 83
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e3 e5       	ldi	r30, 0x53	; 83
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	88 60       	ori	r24, 0x08	; 8
    13da:	8c 93       	st	X, r24
    default:
        break;
    }

    /*Set OCR Mode*/
    TCCR0 &= OC0_CLEAR_MASK;
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 7c       	andi	r24, 0xCF	; 207
    13e8:	8c 93       	st	X, r24
    TCCR0 |= Copy_u8OCRMode;
    13ea:	a3 e5       	ldi	r26, 0x53	; 83
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e3 e5       	ldi	r30, 0x53	; 83
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	90 81       	ld	r25, Z
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	89 2b       	or	r24, r25
    13f8:	8c 93       	st	X, r24

    /*Set Timer0 Prescaler*/
    TCCR0 &= CLOCK_SELECT_MASK;
    13fa:	a3 e5       	ldi	r26, 0x53	; 83
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e5       	ldi	r30, 0x53	; 83
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 7f       	andi	r24, 0xF8	; 248
    1406:	8c 93       	st	X, r24
    TCCR0 |= Copy_u8Scaler;
    1408:	a3 e5       	ldi	r26, 0x53	; 83
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e3 e5       	ldi	r30, 0x53	; 83
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	90 81       	ld	r25, Z
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	89 2b       	or	r24, r25
    1416:	8c 93       	st	X, r24
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <Timer0_voidSetPreloadValue>:

void Timer0_voidSetPreloadValue(u8 Copy_u8Value)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	0f 92       	push	r0
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Copy_u8Value;
    1434:	e2 e5       	ldi	r30, 0x52	; 82
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	80 83       	st	Z, r24
}
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <Timer0_voidSetCompareMatchValue>:

void Timer0_voidSetCompareMatchValue(u8 Copy_u8Value)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_u8Value;
    1450:	ec e5       	ldi	r30, 0x5C	; 92
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	80 83       	st	Z, r24
}
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <Timer0_voidDelay_Sec>:

void Timer0_voidDelay_Sec(u8 Copy_u8Second)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	89 83       	std	Y+1, r24	; 0x01
    Timer0_voidDelay_ms(Copy_u8Second * MILLI_SECOND);
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	28 ee       	ldi	r18, 0xE8	; 232
    1478:	33 e0       	ldi	r19, 0x03	; 3
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsi3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <Timer0_voidDelay_ms>
}
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <Timer0_voidDelay_ms>:

void Timer0_voidDelay_ms(u32 Copy_u32MilliSec)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	2c 97       	sbiw	r28, 0x0c	; 12
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	9b 87       	std	Y+11, r25	; 0x0b
    14ac:	8a 87       	std	Y+10, r24	; 0x0a
    f32 Local_f32OVCounts = ((f32)Copy_u32MilliSec * 1000.0)/ 256.0;
    14ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b2:	cc 01       	movw	r24, r24
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a e7       	ldi	r20, 0x7A	; 122
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	bc 01       	movw	r22, r24
    14da:	cd 01       	movw	r24, r26
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	53 e4       	ldi	r21, 0x43	; 67
    14e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	8e 83       	std	Y+6, r24	; 0x06
    14ee:	9f 83       	std	Y+7, r25	; 0x07
    14f0:	a8 87       	std	Y+8, r26	; 0x08
    14f2:	b9 87       	std	Y+9, r27	; 0x09
    u32 Local_u32Counts = (u32)Local_f32OVCounts;
    14f4:	6e 81       	ldd	r22, Y+6	; 0x06
    14f6:	7f 81       	ldd	r23, Y+7	; 0x07
    14f8:	88 85       	ldd	r24, Y+8	; 0x08
    14fa:	99 85       	ldd	r25, Y+9	; 0x09
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9d 83       	std	Y+5, r25	; 0x05
    1506:	8c 83       	std	Y+4, r24	; 0x04
    u32 Local_u32Remender = Local_f32OVCounts - (u32)Local_f32OVCounts;
    1508:	6e 81       	ldd	r22, Y+6	; 0x06
    150a:	7f 81       	ldd	r23, Y+7	; 0x07
    150c:	88 85       	ldd	r24, Y+8	; 0x08
    150e:	99 85       	ldd	r25, Y+9	; 0x09
    1510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	cc 01       	movw	r24, r24
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	6e 81       	ldd	r22, Y+6	; 0x06
    152c:	7f 81       	ldd	r23, Y+7	; 0x07
    152e:	88 85       	ldd	r24, Y+8	; 0x08
    1530:	99 85       	ldd	r25, Y+9	; 0x09
    1532:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9b 83       	std	Y+3, r25	; 0x03
    1548:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PreloadValue = 0;
    154a:	19 82       	std	Y+1, r1	; 0x01

    if(Local_u32Remender != 0)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	81 f0       	breq	.+32     	; 0x1574 <Timer0_voidDelay_ms+0xde>
    {
        Local_u8PreloadValue = 256 * (1 - Local_u32Remender);
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	a9 01       	movw	r20, r18
    155e:	48 1b       	sub	r20, r24
    1560:	59 0b       	sbc	r21, r25
    1562:	ca 01       	movw	r24, r20
    1564:	98 2f       	mov	r25, r24
    1566:	88 27       	eor	r24, r24
    1568:	89 83       	std	Y+1, r24	; 0x01
        Local_u32Counts += 1;
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	9d 83       	std	Y+5, r25	; 0x05
    1572:	8c 83       	std	Y+4, r24	; 0x04
    }


    Timer0_voidSetPreloadValue(Local_u8PreloadValue);
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	0e 94 14 0a 	call	0x1428	; 0x1428 <Timer0_voidSetPreloadValue>
    157a:	10 c0       	rjmp	.+32     	; 0x159c <Timer0_voidDelay_ms+0x106>

    while(Local_u32Counts--)
    {
        while(GET_BIT(TIFR, TIFR_TOV0) == 0);
    157c:	e8 e5       	ldi	r30, 0x58	; 88
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	81 70       	andi	r24, 0x01	; 1
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	b9 f3       	breq	.-18     	; 0x157c <Timer0_voidDelay_ms+0xe6>
        SET_BIT(TIFR, TIFR_TOV0);
    158e:	a8 e5       	ldi	r26, 0x58	; 88
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e5       	ldi	r30, 0x58	; 88
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	8c 93       	st	X, r24
    }


    Timer0_voidSetPreloadValue(Local_u8PreloadValue);

    while(Local_u32Counts--)
    159c:	1c 86       	std	Y+12, r1	; 0x0c
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	11 f0       	breq	.+4      	; 0x15aa <Timer0_voidDelay_ms+0x114>
    15a6:	51 e0       	ldi	r21, 0x01	; 1
    15a8:	5c 87       	std	Y+12, r21	; 0x0c
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9d 83       	std	Y+5, r25	; 0x05
    15b2:	8c 83       	std	Y+4, r24	; 0x04
    15b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b6:	88 23       	and	r24, r24
    15b8:	09 f7       	brne	.-62     	; 0x157c <Timer0_voidDelay_ms+0xe6>
    {
        while(GET_BIT(TIFR, TIFR_TOV0) == 0);
        SET_BIT(TIFR, TIFR_TOV0);
    }
}
    15ba:	2c 96       	adiw	r28, 0x0c	; 12
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <Timer0_voidDelay_us>:

void Timer0_voidDelay_us(u32 Copy_u16MicroSec)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	2c 97       	sbiw	r28, 0x0c	; 12
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	9b 87       	std	Y+11, r25	; 0x0b
    15e2:	8a 87       	std	Y+10, r24	; 0x0a
    f32 Local_f32OVCounts = (f32)Copy_u16MicroSec/ 256.0;
    15e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e8:	cc 01       	movw	r24, r24
    15ea:	a0 e0       	ldi	r26, 0x00	; 0
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e8       	ldi	r20, 0x80	; 128
    1604:	53 e4       	ldi	r21, 0x43	; 67
    1606:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8e 83       	std	Y+6, r24	; 0x06
    1610:	9f 83       	std	Y+7, r25	; 0x07
    1612:	a8 87       	std	Y+8, r26	; 0x08
    1614:	b9 87       	std	Y+9, r27	; 0x09
    u16 Local_u16Counts = (u8) Local_f32OVCounts;
    1616:	6e 81       	ldd	r22, Y+6	; 0x06
    1618:	7f 81       	ldd	r23, Y+7	; 0x07
    161a:	88 85       	ldd	r24, Y+8	; 0x08
    161c:	99 85       	ldd	r25, Y+9	; 0x09
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9d 83       	std	Y+5, r25	; 0x05
    162c:	8c 83       	std	Y+4, r24	; 0x04
    u32 Local_u32Remender = Local_f32OVCounts - (s32)Local_f32OVCounts;
    162e:	6e 81       	ldd	r22, Y+6	; 0x06
    1630:	7f 81       	ldd	r23, Y+7	; 0x07
    1632:	88 85       	ldd	r24, Y+8	; 0x08
    1634:	99 85       	ldd	r25, Y+9	; 0x09
    1636:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	aa 27       	eor	r26, r26
    1640:	97 fd       	sbrc	r25, 7
    1642:	a0 95       	com	r26
    1644:	ba 2f       	mov	r27, r26
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	6e 81       	ldd	r22, Y+6	; 0x06
    1654:	7f 81       	ldd	r23, Y+7	; 0x07
    1656:	88 85       	ldd	r24, Y+8	; 0x08
    1658:	99 85       	ldd	r25, Y+9	; 0x09
    165a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9b 83       	std	Y+3, r25	; 0x03
    1670:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8PreloadValue = 0;
    1672:	19 82       	std	Y+1, r1	; 0x01

    if(Local_u32Remender != 0)
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	9b 81       	ldd	r25, Y+3	; 0x03
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	81 f0       	breq	.+32     	; 0x169c <Timer0_voidDelay_us+0xd0>
    {
        Local_u8PreloadValue = 256 * (1 - Local_u32Remender);
    167c:	21 e0       	ldi	r18, 0x01	; 1
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	a9 01       	movw	r20, r18
    1686:	48 1b       	sub	r20, r24
    1688:	59 0b       	sbc	r21, r25
    168a:	ca 01       	movw	r24, r20
    168c:	98 2f       	mov	r25, r24
    168e:	88 27       	eor	r24, r24
    1690:	89 83       	std	Y+1, r24	; 0x01
        Local_u16Counts += 1;
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	9d 83       	std	Y+5, r25	; 0x05
    169a:	8c 83       	std	Y+4, r24	; 0x04
    }
    
    
    Timer0_voidSetPreloadValue(Local_u8PreloadValue);
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	0e 94 14 0a 	call	0x1428	; 0x1428 <Timer0_voidSetPreloadValue>
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4 <Timer0_voidDelay_us+0xf8>

    while(Local_u16Counts--)
	{
		while(GET_BIT(TIFR, TIFR_TOV0) == 0);
    16a4:	e8 e5       	ldi	r30, 0x58	; 88
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	81 70       	andi	r24, 0x01	; 1
    16b0:	90 70       	andi	r25, 0x00	; 0
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	b9 f3       	breq	.-18     	; 0x16a4 <Timer0_voidDelay_us+0xd8>
		SET_BIT(TIFR, TIFR_TOV0);
    16b6:	a8 e5       	ldi	r26, 0x58	; 88
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e8 e5       	ldi	r30, 0x58	; 88
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	8c 93       	st	X, r24
    }
    
    
    Timer0_voidSetPreloadValue(Local_u8PreloadValue);

    while(Local_u16Counts--)
    16c4:	1c 86       	std	Y+12, r1	; 0x0c
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	11 f0       	breq	.+4      	; 0x16d2 <Timer0_voidDelay_us+0x106>
    16ce:	51 e0       	ldi	r21, 0x01	; 1
    16d0:	5c 87       	std	Y+12, r21	; 0x0c
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	9d 81       	ldd	r25, Y+5	; 0x05
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	9d 83       	std	Y+5, r25	; 0x05
    16da:	8c 83       	std	Y+4, r24	; 0x04
    16dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    16de:	88 23       	and	r24, r24
    16e0:	09 f7       	brne	.-62     	; 0x16a4 <Timer0_voidDelay_us+0xd8>
	{
		while(GET_BIT(TIFR, TIFR_TOV0) == 0);
		SET_BIT(TIFR, TIFR_TOV0);
	}
    
}
    16e2:	2c 96       	adiw	r28, 0x0c	; 12
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <Timer0_void_OVF_InterruptEnable>:

void Timer0_void_OVF_InterruptEnable(void)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TOIE0);
    16fc:	a9 e5       	ldi	r26, 0x59	; 89
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e9 e5       	ldi	r30, 0x59	; 89
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	8c 93       	st	X, r24
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <Timer0_void_OVF_InterruptDisable>:

void Timer0_void_OVF_InterruptDisable(void)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    1718:	a9 e5       	ldi	r26, 0x59	; 89
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e9 e5       	ldi	r30, 0x59	; 89
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	8c 93       	st	X, r24
}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <Timer0_void_OCR_InterruptEnable>:

void Timer0_void_OCR_InterruptEnable(void)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_OCIE0);
    1734:	a9 e5       	ldi	r26, 0x59	; 89
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e9 e5       	ldi	r30, 0x59	; 89
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	82 60       	ori	r24, 0x02	; 2
    1740:	8c 93       	st	X, r24
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <Timer0_void_OCR_InterruptDisable>:

void Timer0_void_OCR_InterruptDisable(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_OCIE0);
    1750:	a9 e5       	ldi	r26, 0x59	; 89
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 e5       	ldi	r30, 0x59	; 89
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8d 7f       	andi	r24, 0xFD	; 253
    175c:	8c 93       	st	X, r24
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <Timer0_voidTOVSetCallBack>:


void Timer0_voidTOVSetCallBack(void (*NotifiFunction)(void))
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <Timer0_voidTOVSetCallBack+0x6>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    Timer0_TOV_NotificationFunc = NotifiFunction;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	90 93 83 01 	sts	0x0183, r25
    177a:	80 93 82 01 	sts	0x0182, r24
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <Timer0_voidOCRSetCallBack>:

void Timer0_voidOCRSetCallBack(void (*NotifiFunction)(void))
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <Timer0_voidOCRSetCallBack+0x6>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
    Timer0_OCR_NotificationFunc = NotifiFunction;
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	90 93 85 01 	sts	0x0185, r25
    179e:	80 93 84 01 	sts	0x0184, r24
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    if(Timer0_TOV_NotificationFunc)
    17d6:	80 91 82 01 	lds	r24, 0x0182
    17da:	90 91 83 01 	lds	r25, 0x0183
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	29 f0       	breq	.+10     	; 0x17ec <__vector_11+0x40>
    {
        Timer0_TOV_NotificationFunc();
    17e2:	e0 91 82 01 	lds	r30, 0x0182
    17e6:	f0 91 83 01 	lds	r31, 0x0183
    17ea:	09 95       	icall
    }
}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	ff 91       	pop	r31
    17f2:	ef 91       	pop	r30
    17f4:	bf 91       	pop	r27
    17f6:	af 91       	pop	r26
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	7f 91       	pop	r23
    17fe:	6f 91       	pop	r22
    1800:	5f 91       	pop	r21
    1802:	4f 91       	pop	r20
    1804:	3f 91       	pop	r19
    1806:	2f 91       	pop	r18
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	2f 93       	push	r18
    181e:	3f 93       	push	r19
    1820:	4f 93       	push	r20
    1822:	5f 93       	push	r21
    1824:	6f 93       	push	r22
    1826:	7f 93       	push	r23
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    if(Timer0_OCR_NotificationFunc)
    183c:	80 91 84 01 	lds	r24, 0x0184
    1840:	90 91 85 01 	lds	r25, 0x0185
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	29 f0       	breq	.+10     	; 0x1852 <__vector_10+0x40>
    {
        Timer0_OCR_NotificationFunc();
    1848:	e0 91 84 01 	lds	r30, 0x0184
    184c:	f0 91 85 01 	lds	r31, 0x0185
    1850:	09 95       	icall
    }
}
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	ff 91       	pop	r31
    1858:	ef 91       	pop	r30
    185a:	bf 91       	pop	r27
    185c:	af 91       	pop	r26
    185e:	9f 91       	pop	r25
    1860:	8f 91       	pop	r24
    1862:	7f 91       	pop	r23
    1864:	6f 91       	pop	r22
    1866:	5f 91       	pop	r21
    1868:	4f 91       	pop	r20
    186a:	3f 91       	pop	r19
    186c:	2f 91       	pop	r18
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f 90       	pop	r0
    1874:	1f 90       	pop	r1
    1876:	18 95       	reti

00001878 <Timer1_voidInit>:



/************************************Timer1***********************************/
void Timer1_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OCR1AMode, u8 Copy_u8OCR1BMode)
{   
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <Timer1_voidInit+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <Timer1_voidInit+0x8>
    1880:	00 d0       	rcall	.+0      	; 0x1882 <Timer1_voidInit+0xa>
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	6a 83       	std	Y+2, r22	; 0x02
    188a:	4b 83       	std	Y+3, r20	; 0x03
    188c:	2c 83       	std	Y+4, r18	; 0x04
    /*Set Timer1 Mode*/
    switch (Copy_u8Mode)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3e 83       	std	Y+6, r19	; 0x06
    1896:	2d 83       	std	Y+5, r18	; 0x05
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <Timer1_voidInit+0x2c>
    18a2:	af c0       	rjmp	.+350    	; 0x1a02 <Timer1_voidInit+0x18a>
    18a4:	2d 81       	ldd	r18, Y+5	; 0x05
    18a6:	3e 81       	ldd	r19, Y+6	; 0x06
    18a8:	25 30       	cpi	r18, 0x05	; 5
    18aa:	31 05       	cpc	r19, r1
    18ac:	ec f4       	brge	.+58     	; 0x18e8 <Timer1_voidInit+0x70>
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <Timer1_voidInit+0x42>
    18b8:	4d c0       	rjmp	.+154    	; 0x1954 <Timer1_voidInit+0xdc>
    18ba:	2d 81       	ldd	r18, Y+5	; 0x05
    18bc:	3e 81       	ldd	r19, Y+6	; 0x06
    18be:	22 30       	cpi	r18, 0x02	; 2
    18c0:	31 05       	cpc	r19, r1
    18c2:	2c f4       	brge	.+10     	; 0x18ce <Timer1_voidInit+0x56>
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	39 f1       	breq	.+78     	; 0x191a <Timer1_voidInit+0xa2>
    18cc:	2a c1       	rjmp	.+596    	; 0x1b22 <Timer1_voidInit+0x2aa>
    18ce:	2d 81       	ldd	r18, Y+5	; 0x05
    18d0:	3e 81       	ldd	r19, Y+6	; 0x06
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <Timer1_voidInit+0x62>
    18d8:	5a c0       	rjmp	.+180    	; 0x198e <Timer1_voidInit+0x116>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <Timer1_voidInit+0x6e>
    18e4:	71 c0       	rjmp	.+226    	; 0x19c8 <Timer1_voidInit+0x150>
    18e6:	1d c1       	rjmp	.+570    	; 0x1b22 <Timer1_voidInit+0x2aa>
    18e8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ea:	3e 81       	ldd	r19, Y+6	; 0x06
    18ec:	26 30       	cpi	r18, 0x06	; 6
    18ee:	31 05       	cpc	r19, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <Timer1_voidInit+0x7c>
    18f2:	c1 c0       	rjmp	.+386    	; 0x1a76 <Timer1_voidInit+0x1fe>
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	86 30       	cpi	r24, 0x06	; 6
    18fa:	91 05       	cpc	r25, r1
    18fc:	0c f4       	brge	.+2      	; 0x1900 <Timer1_voidInit+0x88>
    18fe:	9e c0       	rjmp	.+316    	; 0x1a3c <Timer1_voidInit+0x1c4>
    1900:	2d 81       	ldd	r18, Y+5	; 0x05
    1902:	3e 81       	ldd	r19, Y+6	; 0x06
    1904:	27 30       	cpi	r18, 0x07	; 7
    1906:	31 05       	cpc	r19, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <Timer1_voidInit+0x94>
    190a:	d2 c0       	rjmp	.+420    	; 0x1ab0 <Timer1_voidInit+0x238>
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	88 30       	cpi	r24, 0x08	; 8
    1912:	91 05       	cpc	r25, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <Timer1_voidInit+0xa0>
    1916:	e9 c0       	rjmp	.+466    	; 0x1aea <Timer1_voidInit+0x272>
    1918:	04 c1       	rjmp	.+520    	; 0x1b22 <Timer1_voidInit+0x2aa>
    {
        case TIMER1_NORMAL_MODE:
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    191a:	af e4       	ldi	r26, 0x4F	; 79
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ef e4       	ldi	r30, 0x4F	; 79
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8e 7f       	andi	r24, 0xFE	; 254
    1926:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    1928:	af e4       	ldi	r26, 0x4F	; 79
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	ef e4       	ldi	r30, 0x4F	; 79
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	8d 7f       	andi	r24, 0xFD	; 253
    1934:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
    1936:	ae e4       	ldi	r26, 0x4E	; 78
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ee e4       	ldi	r30, 0x4E	; 78
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	87 7f       	andi	r24, 0xF7	; 247
    1942:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM13);
    1944:	ae e4       	ldi	r26, 0x4E	; 78
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ee e4       	ldi	r30, 0x4E	; 78
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8f 7e       	andi	r24, 0xEF	; 239
    1950:	8c 93       	st	X, r24
    1952:	e7 c0       	rjmp	.+462    	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_CTC_TOP_OCR1A_MODE:
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    1954:	af e4       	ldi	r26, 0x4F	; 79
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ef e4       	ldi	r30, 0x4F	; 79
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8e 7f       	andi	r24, 0xFE	; 254
    1960:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    1962:	af e4       	ldi	r26, 0x4F	; 79
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ef e4       	ldi	r30, 0x4F	; 79
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8d 7f       	andi	r24, 0xFD	; 253
    196e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    1970:	ae e4       	ldi	r26, 0x4E	; 78
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ee e4       	ldi	r30, 0x4E	; 78
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	88 60       	ori	r24, 0x08	; 8
    197c:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM13);
    197e:	ae e4       	ldi	r26, 0x4E	; 78
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ee e4       	ldi	r30, 0x4E	; 78
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 7e       	andi	r24, 0xEF	; 239
    198a:	8c 93       	st	X, r24
    198c:	ca c0       	rjmp	.+404    	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_CTC_TOP_ICR1_MODE:
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    198e:	af e4       	ldi	r26, 0x4F	; 79
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ef e4       	ldi	r30, 0x4F	; 79
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8e 7f       	andi	r24, 0xFE	; 254
    199a:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    199c:	af e4       	ldi	r26, 0x4F	; 79
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	ef e4       	ldi	r30, 0x4F	; 79
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8d 7f       	andi	r24, 0xFD	; 253
    19a8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    19aa:	ae e4       	ldi	r26, 0x4E	; 78
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ee e4       	ldi	r30, 0x4E	; 78
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 60       	ori	r24, 0x08	; 8
    19b6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    19b8:	ae e4       	ldi	r26, 0x4E	; 78
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	ee e4       	ldi	r30, 0x4E	; 78
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	80 61       	ori	r24, 0x10	; 16
    19c4:	8c 93       	st	X, r24
    19c6:	ad c0       	rjmp	.+346    	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_PHASECORRECT_TOP_ICR1_MODE:
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    19c8:	af e4       	ldi	r26, 0x4F	; 79
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ef e4       	ldi	r30, 0x4F	; 79
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8e 7f       	andi	r24, 0xFE	; 254
    19d4:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_WGM11);
    19d6:	af e4       	ldi	r26, 0x4F	; 79
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	ef e4       	ldi	r30, 0x4F	; 79
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	82 60       	ori	r24, 0x02	; 2
    19e2:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
    19e4:	ae e4       	ldi	r26, 0x4E	; 78
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	ee e4       	ldi	r30, 0x4E	; 78
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	87 7f       	andi	r24, 0xF7	; 247
    19f0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    19f2:	ae e4       	ldi	r26, 0x4E	; 78
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ee e4       	ldi	r30, 0x4E	; 78
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	80 61       	ori	r24, 0x10	; 16
    19fe:	8c 93       	st	X, r24
    1a00:	90 c0       	rjmp	.+288    	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_PHASECORRECT_TOP_OCR1A_MODE:
            SET_BIT(TCCR1A, TCCR1A_WGM10);
    1a02:	af e4       	ldi	r26, 0x4F	; 79
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	ef e4       	ldi	r30, 0x4F	; 79
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	81 60       	ori	r24, 0x01	; 1
    1a0e:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_WGM11);
    1a10:	af e4       	ldi	r26, 0x4F	; 79
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ef e4       	ldi	r30, 0x4F	; 79
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
    1a1e:	ae e4       	ldi	r26, 0x4E	; 78
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ee e4       	ldi	r30, 0x4E	; 78
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	87 7f       	andi	r24, 0xF7	; 247
    1a2a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    1a2c:	ae e4       	ldi	r26, 0x4E	; 78
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ee e4       	ldi	r30, 0x4E	; 78
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 61       	ori	r24, 0x10	; 16
    1a38:	8c 93       	st	X, r24
    1a3a:	73 c0       	rjmp	.+230    	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_PHASE_FREQ_CORRECT_TOP_ICR1_MODE:
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    1a3c:	af e4       	ldi	r26, 0x4F	; 79
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	ef e4       	ldi	r30, 0x4F	; 79
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	8e 7f       	andi	r24, 0xFE	; 254
    1a48:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    1a4a:	af e4       	ldi	r26, 0x4F	; 79
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ef e4       	ldi	r30, 0x4F	; 79
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8d 7f       	andi	r24, 0xFD	; 253
    1a56:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
    1a58:	ae e4       	ldi	r26, 0x4E	; 78
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	ee e4       	ldi	r30, 0x4E	; 78
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	87 7f       	andi	r24, 0xF7	; 247
    1a64:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    1a66:	ae e4       	ldi	r26, 0x4E	; 78
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	ee e4       	ldi	r30, 0x4E	; 78
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 61       	ori	r24, 0x10	; 16
    1a72:	8c 93       	st	X, r24
    1a74:	56 c0       	rjmp	.+172    	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_PHASE_FREQ_CORRECT_TOP_OCR1A_MODE:
            SET_BIT(TCCR1A, TCCR1A_WGM10);
    1a76:	af e4       	ldi	r26, 0x4F	; 79
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ef e4       	ldi	r30, 0x4F	; 79
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	81 60       	ori	r24, 0x01	; 1
    1a82:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    1a84:	af e4       	ldi	r26, 0x4F	; 79
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ef e4       	ldi	r30, 0x4F	; 79
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8d 7f       	andi	r24, 0xFD	; 253
    1a90:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
    1a92:	ae e4       	ldi	r26, 0x4E	; 78
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ee e4       	ldi	r30, 0x4E	; 78
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	87 7f       	andi	r24, 0xF7	; 247
    1a9e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    1aa0:	ae e4       	ldi	r26, 0x4E	; 78
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	ee e4       	ldi	r30, 0x4E	; 78
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	80 61       	ori	r24, 0x10	; 16
    1aac:	8c 93       	st	X, r24
    1aae:	39 c0       	rjmp	.+114    	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_FASTPWM_TOP_ICR1_MODE:
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    1ab0:	af e4       	ldi	r26, 0x4F	; 79
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ef e4       	ldi	r30, 0x4F	; 79
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	8e 7f       	andi	r24, 0xFE	; 254
    1abc:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_WGM11);
    1abe:	af e4       	ldi	r26, 0x4F	; 79
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ef e4       	ldi	r30, 0x4F	; 79
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	82 60       	ori	r24, 0x02	; 2
    1aca:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    1acc:	ae e4       	ldi	r26, 0x4E	; 78
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ee e4       	ldi	r30, 0x4E	; 78
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 60       	ori	r24, 0x08	; 8
    1ad8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    1ada:	ae e4       	ldi	r26, 0x4E	; 78
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ee e4       	ldi	r30, 0x4E	; 78
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 61       	ori	r24, 0x10	; 16
    1ae6:	8c 93       	st	X, r24
    1ae8:	1c c0       	rjmp	.+56     	; 0x1b22 <Timer1_voidInit+0x2aa>
            break;
        case TIMER1_FASTPWM_TOP_OCR1A_MODE:
            SET_BIT(TCCR1A, TCCR1A_WGM10);
    1aea:	af e4       	ldi	r26, 0x4F	; 79
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	ef e4       	ldi	r30, 0x4F	; 79
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	81 60       	ori	r24, 0x01	; 1
    1af6:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_WGM11);
    1af8:	af e4       	ldi	r26, 0x4F	; 79
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	ef e4       	ldi	r30, 0x4F	; 79
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	82 60       	ori	r24, 0x02	; 2
    1b04:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    1b06:	ae e4       	ldi	r26, 0x4E	; 78
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ee e4       	ldi	r30, 0x4E	; 78
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 60       	ori	r24, 0x08	; 8
    1b12:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    1b14:	ae e4       	ldi	r26, 0x4E	; 78
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	ee e4       	ldi	r30, 0x4E	; 78
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 61       	ori	r24, 0x10	; 16
    1b20:	8c 93       	st	X, r24
            break;
    }

    /*Set OCR1A Mode*/
    TCCR1A &= OCR1A_CLEAR_MASK;
    1b22:	af e4       	ldi	r26, 0x4F	; 79
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	ef e4       	ldi	r30, 0x4F	; 79
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 73       	andi	r24, 0x3F	; 63
    1b2e:	8c 93       	st	X, r24
    TCCR1A |= Copy_u8OCR1AMode;
    1b30:	af e4       	ldi	r26, 0x4F	; 79
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ef e4       	ldi	r30, 0x4F	; 79
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	90 81       	ld	r25, Z
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	89 2b       	or	r24, r25
    1b3e:	8c 93       	st	X, r24

    /*Set OCR1B Mode*/
    TCCR1A &= OCR1B_CLEAR_MASK;
    1b40:	af e4       	ldi	r26, 0x4F	; 79
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ef e4       	ldi	r30, 0x4F	; 79
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7c       	andi	r24, 0xCF	; 207
    1b4c:	8c 93       	st	X, r24
    TCCR1A |= Copy_u8OCR1BMode;
    1b4e:	af e4       	ldi	r26, 0x4F	; 79
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ef e4       	ldi	r30, 0x4F	; 79
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	90 81       	ld	r25, Z
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	89 2b       	or	r24, r25
    1b5c:	8c 93       	st	X, r24
    
    /*Set Timer1 Prescaler*/
    TCCR1B &= CLOCK_SELECT_MASK;
    1b5e:	ae e4       	ldi	r26, 0x4E	; 78
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	ee e4       	ldi	r30, 0x4E	; 78
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	88 7f       	andi	r24, 0xF8	; 248
    1b6a:	8c 93       	st	X, r24
    TCCR1B |= Copy_u8Scaler;
    1b6c:	ae e4       	ldi	r26, 0x4E	; 78
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ee e4       	ldi	r30, 0x4E	; 78
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	90 81       	ld	r25, Z
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	89 2b       	or	r24, r25
    1b7a:	8c 93       	st	X, r24
}
    1b7c:	26 96       	adiw	r28, 0x06	; 6
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <Timer1_voidSetPreloadValue>:

void Timer1_voidSetPreloadValue(u16 Copy_u16Value)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <Timer1_voidSetPreloadValue+0x6>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    1b9c:	ec e4       	ldi	r30, 0x4C	; 76
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <Timer1_voidSetOCR1AValue>:

void Timer1_voidSetOCR1AValue(u16 Copy_u16OCR1AValue)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <Timer1_voidSetOCR1AValue+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16OCR1AValue;
    1bc0:	ea e4       	ldi	r30, 0x4A	; 74
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <Timer1_voidSetOCR1BValue>:

void Timer1_voidSetOCR1BValue(u16 Copy_u16OCR1BValue)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <Timer1_voidSetOCR1BValue+0x6>
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16OCR1BValue;
    1be4:	e8 e4       	ldi	r30, 0x48	; 72
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <Timer1_voidSetICR1Value>:

void Timer1_voidSetICR1Value(u16 Copy_u16ICR1Value)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <Timer1_voidSetICR1Value+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16ICR1Value;
    1c08:	e6 e4       	ldi	r30, 0x46	; 70
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <ICU_voidGetICR1Value>:


u16  ICU_voidGetICR1Value(void)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    1c26:	e6 e4       	ldi	r30, 0x46	; 70
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <ICU_voidSetTriggerEdge>:


void ICU_voidSetTriggerEdge(u8 Copy_u8TriggerEdge)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <ICU_voidSetTriggerEdge+0x6>
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8TriggerEdge)
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3b 83       	std	Y+3, r19	; 0x03
    1c4a:	2a 83       	std	Y+2, r18	; 0x02
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <ICU_voidSetTriggerEdge+0x2c>
    1c54:	2a 81       	ldd	r18, Y+2	; 0x02
    1c56:	3b 81       	ldd	r19, Y+3	; 0x03
    1c58:	21 30       	cpi	r18, 0x01	; 1
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	49 f0       	breq	.+18     	; 0x1c70 <ICU_voidSetTriggerEdge+0x3c>
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <ICU_voidSetTriggerEdge+0x4a>
    {
    case ICU_TRIGGER_EDGE_FALLING_EDGE:
        CLEAR_BIT(TCCR1B, TCCR1B_ICES1);
    1c60:	ae e4       	ldi	r26, 0x4E	; 78
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	ee e4       	ldi	r30, 0x4E	; 78
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 7b       	andi	r24, 0xBF	; 191
    1c6c:	8c 93       	st	X, r24
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <ICU_voidSetTriggerEdge+0x4a>
        break;
    
    case ICU_TRIGGER_EDGE_RISING_EDGE:
        SET_BIT(TCCR1B, TCCR1B_ICES1);
    1c70:	ae e4       	ldi	r26, 0x4E	; 78
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ee e4       	ldi	r30, 0x4E	; 78
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 64       	ori	r24, 0x40	; 64
    1c7c:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <Timer1_voidOVFInterruptEnable>:



void Timer1_voidOVFInterruptEnable(void)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TOIE1);
    1c92:	a9 e5       	ldi	r26, 0x59	; 89
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e9 e5       	ldi	r30, 0x59	; 89
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	84 60       	ori	r24, 0x04	; 4
    1c9e:	8c 93       	st	X, r24
}
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <Timer1_voidOVFInterruptDisable>:

void Timer1_voidOVFInterruptDisable(void)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_TOIE1);
    1cae:	a9 e5       	ldi	r26, 0x59	; 89
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e9 e5       	ldi	r30, 0x59	; 89
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8b 7f       	andi	r24, 0xFB	; 251
    1cba:	8c 93       	st	X, r24
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <Timer1_voidOC1AInterruptEnable>:

void Timer1_voidOC1AInterruptEnable(void)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_OCIE1A);
    1cca:	a9 e5       	ldi	r26, 0x59	; 89
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e9 e5       	ldi	r30, 0x59	; 89
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 61       	ori	r24, 0x10	; 16
    1cd6:	8c 93       	st	X, r24
}
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <Timer1_voidOC1AInterruptDisable>:

void Timer1_voidOC1AInterruptDisable(void)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_OCIE1A);
    1ce6:	a9 e5       	ldi	r26, 0x59	; 89
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e9 e5       	ldi	r30, 0x59	; 89
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8f 7e       	andi	r24, 0xEF	; 239
    1cf2:	8c 93       	st	X, r24
}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <Timer1_voidOC1BInterruptEnable>:

void Timer1_voidOC1BInterruptEnable(void)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_OCIE1B);
    1d02:	a9 e5       	ldi	r26, 0x59	; 89
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e9 e5       	ldi	r30, 0x59	; 89
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 60       	ori	r24, 0x08	; 8
    1d0e:	8c 93       	st	X, r24
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <Timer1_voidOC1BInterruptDisable>:

void Timer1_voidOC1BInterruptDisable(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_OCIE1B);
    1d1e:	a9 e5       	ldi	r26, 0x59	; 89
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e9 e5       	ldi	r30, 0x59	; 89
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	87 7f       	andi	r24, 0xF7	; 247
    1d2a:	8c 93       	st	X, r24
}
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <ICU_voidInterruptEnable>:

void ICU_voidInterruptEnable(void)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TICIE1);
    1d3a:	a9 e5       	ldi	r26, 0x59	; 89
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e9 e5       	ldi	r30, 0x59	; 89
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	80 62       	ori	r24, 0x20	; 32
    1d46:	8c 93       	st	X, r24
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <ICU_voidInterruptDisable>:

void ICU_voidInterruptDisable(void)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_TICIE1);
    1d56:	a9 e5       	ldi	r26, 0x59	; 89
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e9 e5       	ldi	r30, 0x59	; 89
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7d       	andi	r24, 0xDF	; 223
    1d62:	8c 93       	st	X, r24
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <Timer1_voidOVFSetCallBack>:


/****************Set Interrupts Functions Call Back*********************/
void Timer1_voidOVFSetCallBack(void (*NotifiFunction)(void))
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <Timer1_voidOVFSetCallBack+0x6>
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
    Timer1_OVF_NotificationFunc = NotifiFunction;
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	90 93 87 01 	sts	0x0187, r25
    1d80:	80 93 86 01 	sts	0x0186, r24
}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <Timer1_voidOC1ASetCallBack>:

void Timer1_voidOC1ASetCallBack(void (*NotifiFunction)(void))
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <Timer1_voidOC1ASetCallBack+0x6>
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    Timer1_OC1A_NotificationFunc = NotifiFunction;
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	90 93 89 01 	sts	0x0189, r25
    1da4:	80 93 88 01 	sts	0x0188, r24
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <Timer1_voidOC1BSetCallBack>:

void Timer1_voidOC1BSetCallBack(void (*NotifiFunction)(void))
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <Timer1_voidOC1BSetCallBack+0x6>
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    Timer1_OC1B_NotificationFunc = NotifiFunction;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	90 93 8b 01 	sts	0x018B, r25
    1dc8:	80 93 8a 01 	sts	0x018A, r24
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <ICU_voidSetCallBack>:

void ICU_voidSetCallBack(void (*NotifiFunction)(void))
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <ICU_voidSetCallBack+0x6>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
    Timer1_ICU_NotificationFunc = NotifiFunction;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	90 93 8d 01 	sts	0x018D, r25
    1dec:	80 93 8c 01 	sts	0x018C, r24
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <__vector_9>:
/*************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1dfa:	1f 92       	push	r1
    1dfc:	0f 92       	push	r0
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	0f 92       	push	r0
    1e02:	11 24       	eor	r1, r1
    1e04:	2f 93       	push	r18
    1e06:	3f 93       	push	r19
    1e08:	4f 93       	push	r20
    1e0a:	5f 93       	push	r21
    1e0c:	6f 93       	push	r22
    1e0e:	7f 93       	push	r23
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	af 93       	push	r26
    1e16:	bf 93       	push	r27
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    if(Timer1_OVF_NotificationFunc)
    1e24:	80 91 86 01 	lds	r24, 0x0186
    1e28:	90 91 87 01 	lds	r25, 0x0187
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <__vector_9+0x40>
    {
        Timer1_OVF_NotificationFunc();
    1e30:	e0 91 86 01 	lds	r30, 0x0186
    1e34:	f0 91 87 01 	lds	r31, 0x0187
    1e38:	09 95       	icall
    }
}
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	ff 91       	pop	r31
    1e40:	ef 91       	pop	r30
    1e42:	bf 91       	pop	r27
    1e44:	af 91       	pop	r26
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	7f 91       	pop	r23
    1e4c:	6f 91       	pop	r22
    1e4e:	5f 91       	pop	r21
    1e50:	4f 91       	pop	r20
    1e52:	3f 91       	pop	r19
    1e54:	2f 91       	pop	r18
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1e60:	1f 92       	push	r1
    1e62:	0f 92       	push	r0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	2f 93       	push	r18
    1e6c:	3f 93       	push	r19
    1e6e:	4f 93       	push	r20
    1e70:	5f 93       	push	r21
    1e72:	6f 93       	push	r22
    1e74:	7f 93       	push	r23
    1e76:	8f 93       	push	r24
    1e78:	9f 93       	push	r25
    1e7a:	af 93       	push	r26
    1e7c:	bf 93       	push	r27
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    if(Timer1_OC1A_NotificationFunc)
    1e8a:	80 91 88 01 	lds	r24, 0x0188
    1e8e:	90 91 89 01 	lds	r25, 0x0189
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	29 f0       	breq	.+10     	; 0x1ea0 <__vector_7+0x40>
    {
        Timer1_OC1A_NotificationFunc();
    1e96:	e0 91 88 01 	lds	r30, 0x0188
    1e9a:	f0 91 89 01 	lds	r31, 0x0189
    1e9e:	09 95       	icall
    }
}
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	7f 91       	pop	r23
    1eb2:	6f 91       	pop	r22
    1eb4:	5f 91       	pop	r21
    1eb6:	4f 91       	pop	r20
    1eb8:	3f 91       	pop	r19
    1eba:	2f 91       	pop	r18
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	0f 90       	pop	r0
    1ec2:	1f 90       	pop	r1
    1ec4:	18 95       	reti

00001ec6 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	4f 93       	push	r20
    1ed6:	5f 93       	push	r21
    1ed8:	6f 93       	push	r22
    1eda:	7f 93       	push	r23
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	af 93       	push	r26
    1ee2:	bf 93       	push	r27
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    if(Timer1_OC1B_NotificationFunc)
    1ef0:	80 91 8a 01 	lds	r24, 0x018A
    1ef4:	90 91 8b 01 	lds	r25, 0x018B
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <__vector_8+0x40>
    {
        Timer1_OC1B_NotificationFunc();
    1efc:	e0 91 8a 01 	lds	r30, 0x018A
    1f00:	f0 91 8b 01 	lds	r31, 0x018B
    1f04:	09 95       	icall
    }
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	0f 90       	pop	r0
    1f28:	1f 90       	pop	r1
    1f2a:	18 95       	reti

00001f2c <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    1f2c:	1f 92       	push	r1
    1f2e:	0f 92       	push	r0
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	2f 93       	push	r18
    1f38:	3f 93       	push	r19
    1f3a:	4f 93       	push	r20
    1f3c:	5f 93       	push	r21
    1f3e:	6f 93       	push	r22
    1f40:	7f 93       	push	r23
    1f42:	8f 93       	push	r24
    1f44:	9f 93       	push	r25
    1f46:	af 93       	push	r26
    1f48:	bf 93       	push	r27
    1f4a:	ef 93       	push	r30
    1f4c:	ff 93       	push	r31
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    if(Timer1_ICU_NotificationFunc)
    1f56:	80 91 8c 01 	lds	r24, 0x018C
    1f5a:	90 91 8d 01 	lds	r25, 0x018D
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	29 f0       	breq	.+10     	; 0x1f6c <__vector_6+0x40>
    {
        Timer1_ICU_NotificationFunc();
    1f62:	e0 91 8c 01 	lds	r30, 0x018C
    1f66:	f0 91 8d 01 	lds	r31, 0x018D
    1f6a:	09 95       	icall
    }
}
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	ff 91       	pop	r31
    1f72:	ef 91       	pop	r30
    1f74:	bf 91       	pop	r27
    1f76:	af 91       	pop	r26
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	7f 91       	pop	r23
    1f7e:	6f 91       	pop	r22
    1f80:	5f 91       	pop	r21
    1f82:	4f 91       	pop	r20
    1f84:	3f 91       	pop	r19
    1f86:	2f 91       	pop	r18
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <Timer2_voidInit>:


/*****************************************************************************/
/************************************Timer1***********************************/
void Timer2_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OCRMode)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <Timer2_voidInit+0x6>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <Timer2_voidInit+0x8>
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	6a 83       	std	Y+2, r22	; 0x02
    1fa4:	4b 83       	std	Y+3, r20	; 0x03
    //Set Timer 2 Mode//
    switch (Copy_u8Mode)
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	3d 83       	std	Y+5, r19	; 0x05
    1fae:	2c 83       	std	Y+4, r18	; 0x04
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	21 f1       	breq	.+72     	; 0x2002 <Timer2_voidInit+0x70>
    1fba:	2c 81       	ldd	r18, Y+4	; 0x04
    1fbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <Timer2_voidInit+0x3c>
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <Timer2_voidInit+0x52>
    1fcc:	46 c0       	rjmp	.+140    	; 0x205a <Timer2_voidInit+0xc8>
    1fce:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	21 f1       	breq	.+72     	; 0x2020 <Timer2_voidInit+0x8e>
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	91 05       	cpc	r25, r1
    1fe0:	71 f1       	breq	.+92     	; 0x203e <Timer2_voidInit+0xac>
    1fe2:	3b c0       	rjmp	.+118    	; 0x205a <Timer2_voidInit+0xc8>
    {
    case TIMER2_NORMAL_MODE:
        CLEAR_BIT(TCCR2, TCCR2_WGM20);
    1fe4:	a5 e4       	ldi	r26, 0x45	; 69
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e5 e4       	ldi	r30, 0x45	; 69
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 7b       	andi	r24, 0xBF	; 191
    1ff0:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, TCCR2_WGM21);
    1ff2:	a5 e4       	ldi	r26, 0x45	; 69
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e5 e4       	ldi	r30, 0x45	; 69
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	87 7f       	andi	r24, 0xF7	; 247
    1ffe:	8c 93       	st	X, r24
    2000:	2c c0       	rjmp	.+88     	; 0x205a <Timer2_voidInit+0xc8>
        break;
    case TIMER2_PHASE_CORRECT_MODE:
        SET_BIT(TCCR2, TCCR2_WGM20);
    2002:	a5 e4       	ldi	r26, 0x45	; 69
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e5 e4       	ldi	r30, 0x45	; 69
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	80 64       	ori	r24, 0x40	; 64
    200e:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR2, TCCR2_WGM21);
    2010:	a5 e4       	ldi	r26, 0x45	; 69
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e5 e4       	ldi	r30, 0x45	; 69
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	87 7f       	andi	r24, 0xF7	; 247
    201c:	8c 93       	st	X, r24
    201e:	1d c0       	rjmp	.+58     	; 0x205a <Timer2_voidInit+0xc8>
        break;
    case TIMER2_CTC_MODE:
        CLEAR_BIT(TCCR2, TCCR2_WGM20);
    2020:	a5 e4       	ldi	r26, 0x45	; 69
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e5 e4       	ldi	r30, 0x45	; 69
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8f 7b       	andi	r24, 0xBF	; 191
    202c:	8c 93       	st	X, r24
        SET_BIT(TCCR2, TCCR2_WGM21);
    202e:	a5 e4       	ldi	r26, 0x45	; 69
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e5 e4       	ldi	r30, 0x45	; 69
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	88 60       	ori	r24, 0x08	; 8
    203a:	8c 93       	st	X, r24
    203c:	0e c0       	rjmp	.+28     	; 0x205a <Timer2_voidInit+0xc8>
        break;
    case TIMER2_FAST_MODE:
        SET_BIT(TCCR2, TCCR2_WGM20);
    203e:	a5 e4       	ldi	r26, 0x45	; 69
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e5 e4       	ldi	r30, 0x45	; 69
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	80 64       	ori	r24, 0x40	; 64
    204a:	8c 93       	st	X, r24
        SET_BIT(TCCR2, TCCR2_WGM21);
    204c:	a5 e4       	ldi	r26, 0x45	; 69
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e5 e4       	ldi	r30, 0x45	; 69
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	88 60       	ori	r24, 0x08	; 8
    2058:	8c 93       	st	X, r24
    default:
        break;
    }

    /*Set OCR2 Mode*/
    TCCR2 &= OC2_CLEAR_MASK;
    205a:	a5 e4       	ldi	r26, 0x45	; 69
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e5 e4       	ldi	r30, 0x45	; 69
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8f 7c       	andi	r24, 0xCF	; 207
    2066:	8c 93       	st	X, r24
    TCCR2 |= Copy_u8OCRMode;
    2068:	a5 e4       	ldi	r26, 0x45	; 69
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e5 e4       	ldi	r30, 0x45	; 69
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	90 81       	ld	r25, Z
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	89 2b       	or	r24, r25
    2076:	8c 93       	st	X, r24
    
    /*Set TIMER2 Prescaler*/
    TCCR2 &= CLOCK_SELECT_MASK;
    2078:	a5 e4       	ldi	r26, 0x45	; 69
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e5 e4       	ldi	r30, 0x45	; 69
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	88 7f       	andi	r24, 0xF8	; 248
    2084:	8c 93       	st	X, r24
    TCCR2 |= Copy_u8Scaler;
    2086:	a5 e4       	ldi	r26, 0x45	; 69
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e5 e4       	ldi	r30, 0x45	; 69
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	90 81       	ld	r25, Z
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	89 2b       	or	r24, r25
    2094:	8c 93       	st	X, r24
}
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <Timer2_voidSetPreloadValue>:

void Timer2_voidSetPreloadValue(u8 Copy_u8Value)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	0f 92       	push	r0
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = Copy_u8Value;
    20b2:	e4 e4       	ldi	r30, 0x44	; 68
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	80 83       	st	Z, r24
}
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <Timer2_voidSetCompareMatchValue>:

void Timer2_voidSetCompareMatchValue(u8 Copy_u8Value)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	0f 92       	push	r0
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	89 83       	std	Y+1, r24	; 0x01
    OCR2 = Copy_u8Value;
    20ce:	e3 e4       	ldi	r30, 0x43	; 67
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	80 83       	st	Z, r24
}
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <Timer2_u8GetTimer2Value>:

u8   Timer2_u8GetTimer2Value(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    return TCNT2;
    20e6:	e4 e4       	ldi	r30, 0x44	; 68
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <Timer2_voidDelay_ms>:


void Timer2_voidDelay_ms(u16 Copy_u16MilliSec)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <Timer2_voidDelay_ms+0x6>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <Timer2_voidDelay_ms+0x8>
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	9b 83       	std	Y+3, r25	; 0x03
    2100:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Counter = ((u32)Copy_u16MilliSec * MILLI_SECOND)/ COMPARE_MATCH_VALUE;
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	cc 01       	movw	r24, r24
    2108:	a0 e0       	ldi	r26, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	28 ee       	ldi	r18, 0xE8	; 232
    210e:	33 e0       	ldi	r19, 0x03	; 3
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsi3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	2a ef       	ldi	r18, 0xFA	; 250
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__udivmodsi4>
    2130:	da 01       	movw	r26, r20
    2132:	c9 01       	movw	r24, r18
    2134:	89 83       	std	Y+1, r24	; 0x01
    Timer2_voidSetCompareMatchValue(COMPARE_MATCH_VALUE);
    2136:	8a ef       	ldi	r24, 0xFA	; 250
    2138:	0e 94 61 10 	call	0x20c2	; 0x20c2 <Timer2_voidSetCompareMatchValue>
    Timer2_voidInit(TIMER2_CTC_MODE, SCALER_8, OC2_DISCONECTED);
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	62 e0       	ldi	r22, 0x02	; 2
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <Timer2_voidInit>
    2146:	0c c0       	rjmp	.+24     	; 0x2160 <Timer2_voidDelay_ms+0x6e>
    
    while (Local_u8Counter--)
    {
        while (GET_BIT(TIFR, TIFR_OCF2) == 0);
    2148:	e8 e5       	ldi	r30, 0x58	; 88
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	88 23       	and	r24, r24
    2150:	dc f7       	brge	.-10     	; 0x2148 <Timer2_voidDelay_ms+0x56>
        SET_BIT(TIFR, TIFR_OCF2);
    2152:	a8 e5       	ldi	r26, 0x58	; 88
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e8 e5       	ldi	r30, 0x58	; 88
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	80 68       	ori	r24, 0x80	; 128
    215e:	8c 93       	st	X, r24
{
    u8 Local_u8Counter = ((u32)Copy_u16MilliSec * MILLI_SECOND)/ COMPARE_MATCH_VALUE;
    Timer2_voidSetCompareMatchValue(COMPARE_MATCH_VALUE);
    Timer2_voidInit(TIMER2_CTC_MODE, SCALER_8, OC2_DISCONECTED);
    
    while (Local_u8Counter--)
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	8c 83       	std	Y+4, r24	; 0x04
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	88 23       	and	r24, r24
    2168:	11 f0       	breq	.+4      	; 0x216e <Timer2_voidDelay_ms+0x7c>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	8c 83       	std	Y+4, r24	; 0x04
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	99 81       	ldd	r25, Y+1	; 0x01
    2172:	91 50       	subi	r25, 0x01	; 1
    2174:	99 83       	std	Y+1, r25	; 0x01
    2176:	88 23       	and	r24, r24
    2178:	39 f7       	brne	.-50     	; 0x2148 <Timer2_voidDelay_ms+0x56>
        while (GET_BIT(TIFR, TIFR_OCF2) == 0);
        SET_BIT(TIFR, TIFR_OCF2);
    }
    

}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <Timer2_voidDelay_us>:
void Timer2_voidDelay_us(u16 Copy_u16MicroSec)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <Timer2_voidDelay_us+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <Timer2_voidDelay_us+0x8>
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    u16 Local_u16Counter = Copy_u16MicroSec/ COMPARE_MATCH_VALUE;
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	2a ef       	ldi	r18, 0xFA	; 250
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	b9 01       	movw	r22, r18
    21a4:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <__udivmodhi4>
    21a8:	cb 01       	movw	r24, r22
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
    Timer2_voidSetCompareMatchValue(COMPARE_MATCH_VALUE);
    21ae:	8a ef       	ldi	r24, 0xFA	; 250
    21b0:	0e 94 61 10 	call	0x20c2	; 0x20c2 <Timer2_voidSetCompareMatchValue>
    Timer2_voidInit(TIMER2_CTC_MODE, SCALER_8, OC2_DISCONECTED);
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	62 e0       	ldi	r22, 0x02	; 2
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <Timer2_voidInit>
    21be:	0c c0       	rjmp	.+24     	; 0x21d8 <Timer2_voidDelay_us+0x50>
    
    while (Local_u16Counter--)
    {
        while (GET_BIT(TIFR, TIFR_OCF2) == 0);
    21c0:	e8 e5       	ldi	r30, 0x58	; 88
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	88 23       	and	r24, r24
    21c8:	dc f7       	brge	.-10     	; 0x21c0 <Timer2_voidDelay_us+0x38>
        SET_BIT(TIFR, TIFR_OCF2);
    21ca:	a8 e5       	ldi	r26, 0x58	; 88
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e8 e5       	ldi	r30, 0x58	; 88
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 68       	ori	r24, 0x80	; 128
    21d6:	8c 93       	st	X, r24
{
    u16 Local_u16Counter = Copy_u16MicroSec/ COMPARE_MATCH_VALUE;
    Timer2_voidSetCompareMatchValue(COMPARE_MATCH_VALUE);
    Timer2_voidInit(TIMER2_CTC_MODE, SCALER_8, OC2_DISCONECTED);
    
    while (Local_u16Counter--)
    21d8:	1d 82       	std	Y+5, r1	; 0x05
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	11 f0       	breq	.+4      	; 0x21e6 <Timer2_voidDelay_us+0x5e>
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	8d 83       	std	Y+5, r24	; 0x05
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9a 83       	std	Y+2, r25	; 0x02
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	88 23       	and	r24, r24
    21f4:	29 f7       	brne	.-54     	; 0x21c0 <Timer2_voidDelay_us+0x38>
    {
        while (GET_BIT(TIFR, TIFR_OCF2) == 0);
        SET_BIT(TIFR, TIFR_OCF2);
    }
    
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <Timer2_void_OVF_InterruptEnable>:

void Timer2_void_OVF_InterruptEnable(void)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TOIE2);
    220e:	a9 e5       	ldi	r26, 0x59	; 89
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e9 e5       	ldi	r30, 0x59	; 89
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 64       	ori	r24, 0x40	; 64
    221a:	8c 93       	st	X, r24
}
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <Timer2_void_OVF_InterruptDisable>:

void Timer2_void_OVF_InterruptDisable(void)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_TOIE2);
    222a:	a9 e5       	ldi	r26, 0x59	; 89
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e9 e5       	ldi	r30, 0x59	; 89
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7b       	andi	r24, 0xBF	; 191
    2236:	8c 93       	st	X, r24
}
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <Timer2_void_OCR_InterruptEnable>:

void Timer2_void_OCR_InterruptEnable(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_OCIE2);
    2246:	a9 e5       	ldi	r26, 0x59	; 89
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e9 e5       	ldi	r30, 0x59	; 89
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	8c 93       	st	X, r24
}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <Timer2_void_OCR_InterruptDisable>:

void Timer2_void_OCR_InterruptDisable(void)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_OCIE2);
    2262:	a9 e5       	ldi	r26, 0x59	; 89
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e9 e5       	ldi	r30, 0x59	; 89
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	8f 77       	andi	r24, 0x7F	; 127
    226e:	8c 93       	st	X, r24
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <Timer2_voidTOVSetCallBack>:

void Timer2_voidTOVSetCallBack(void (*NotifiFunction)(void))
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <Timer2_voidTOVSetCallBack+0x6>
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
    Timer2_TOV_NotificationFunc = NotifiFunction;
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	90 93 8f 01 	sts	0x018F, r25
    228c:	80 93 8e 01 	sts	0x018E, r24
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <Timer2_voidOCRSetCallBack>:

void Timer2_voidOCRSetCallBack(void (*NotifiFunction)(void))
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <Timer2_voidOCRSetCallBack+0x6>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    Timer2_OCR_NotificationFunc = NotifiFunction;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	90 93 91 01 	sts	0x0191, r25
    22b0:	80 93 90 01 	sts	0x0190, r24
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <__vector_5>:


ISR(TIMER2_OVF_vect)
{
    22be:	1f 92       	push	r1
    22c0:	0f 92       	push	r0
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	0f 92       	push	r0
    22c6:	11 24       	eor	r1, r1
    22c8:	2f 93       	push	r18
    22ca:	3f 93       	push	r19
    22cc:	4f 93       	push	r20
    22ce:	5f 93       	push	r21
    22d0:	6f 93       	push	r22
    22d2:	7f 93       	push	r23
    22d4:	8f 93       	push	r24
    22d6:	9f 93       	push	r25
    22d8:	af 93       	push	r26
    22da:	bf 93       	push	r27
    22dc:	ef 93       	push	r30
    22de:	ff 93       	push	r31
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    if(Timer2_TOV_NotificationFunc)
    22e8:	80 91 8e 01 	lds	r24, 0x018E
    22ec:	90 91 8f 01 	lds	r25, 0x018F
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	29 f0       	breq	.+10     	; 0x22fe <__vector_5+0x40>
    {
        Timer2_TOV_NotificationFunc();
    22f4:	e0 91 8e 01 	lds	r30, 0x018E
    22f8:	f0 91 8f 01 	lds	r31, 0x018F
    22fc:	09 95       	icall
    }
}
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	ff 91       	pop	r31
    2304:	ef 91       	pop	r30
    2306:	bf 91       	pop	r27
    2308:	af 91       	pop	r26
    230a:	9f 91       	pop	r25
    230c:	8f 91       	pop	r24
    230e:	7f 91       	pop	r23
    2310:	6f 91       	pop	r22
    2312:	5f 91       	pop	r21
    2314:	4f 91       	pop	r20
    2316:	3f 91       	pop	r19
    2318:	2f 91       	pop	r18
    231a:	0f 90       	pop	r0
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	0f 90       	pop	r0
    2320:	1f 90       	pop	r1
    2322:	18 95       	reti

00002324 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2324:	1f 92       	push	r1
    2326:	0f 92       	push	r0
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	0f 92       	push	r0
    232c:	11 24       	eor	r1, r1
    232e:	2f 93       	push	r18
    2330:	3f 93       	push	r19
    2332:	4f 93       	push	r20
    2334:	5f 93       	push	r21
    2336:	6f 93       	push	r22
    2338:	7f 93       	push	r23
    233a:	8f 93       	push	r24
    233c:	9f 93       	push	r25
    233e:	af 93       	push	r26
    2340:	bf 93       	push	r27
    2342:	ef 93       	push	r30
    2344:	ff 93       	push	r31
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    if(Timer2_OCR_NotificationFunc)
    234e:	80 91 90 01 	lds	r24, 0x0190
    2352:	90 91 91 01 	lds	r25, 0x0191
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	29 f0       	breq	.+10     	; 0x2364 <__vector_4+0x40>
    {
        Timer2_OCR_NotificationFunc();
    235a:	e0 91 90 01 	lds	r30, 0x0190
    235e:	f0 91 91 01 	lds	r31, 0x0191
    2362:	09 95       	icall
    }
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	ff 91       	pop	r31
    236a:	ef 91       	pop	r30
    236c:	bf 91       	pop	r27
    236e:	af 91       	pop	r26
    2370:	9f 91       	pop	r25
    2372:	8f 91       	pop	r24
    2374:	7f 91       	pop	r23
    2376:	6f 91       	pop	r22
    2378:	5f 91       	pop	r21
    237a:	4f 91       	pop	r20
    237c:	3f 91       	pop	r19
    237e:	2f 91       	pop	r18
    2380:	0f 90       	pop	r0
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	0f 90       	pop	r0
    2386:	1f 90       	pop	r1
    2388:	18 95       	reti

0000238a <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void TWI_voidMasterInit(u8 Copy_u8SlaveAddress)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	0f 92       	push	r0
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	89 83       	std	Y+1, r24	; 0x01
	/*Enable The Acknowledge*/
	SET_BIT(TWCR, TWCR_TWEA);
    2396:	a6 e5       	ldi	r26, 0x56	; 86
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e6 e5       	ldi	r30, 0x56	; 86
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	80 64       	ori	r24, 0x40	; 64
    23a2:	8c 93       	st	X, r24
	if (Copy_u8SlaveAddress != 0x00)
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	88 23       	and	r24, r24
    23a8:	31 f0       	breq	.+12     	; 0x23b6 <TWI_voidMasterInit+0x2c>
	{
		TWAR = Copy_u8SlaveAddress << 1;
    23aa:	e2 e2       	ldi	r30, 0x22	; 34
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	88 0f       	add	r24, r24
    23b2:	80 83       	st	Z, r24
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <TWI_voidMasterInit+0x32>
	}
	else
	{
		TWAR = 0x00 << 1;
    23b6:	e2 e2       	ldi	r30, 0x22	; 34
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	10 82       	st	Z, r1
	}

	/*Set Data Bit Rate = 100KHz */
	CLEAR_BIT(TWSR, TWSR_TWPS0);
    23bc:	a1 e2       	ldi	r26, 0x21	; 33
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e1 e2       	ldi	r30, 0x21	; 33
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8e 7f       	andi	r24, 0xFE	; 254
    23c8:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWSR_TWPS1);
    23ca:	a1 e2       	ldi	r26, 0x21	; 33
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e1 e2       	ldi	r30, 0x21	; 33
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8d 7f       	andi	r24, 0xFD	; 253
    23d6:	8c 93       	st	X, r24
	TWBR = 2;
    23d8:	e0 e2       	ldi	r30, 0x20	; 32
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	80 83       	st	Z, r24

	/*Enable The TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    23e0:	a6 e5       	ldi	r26, 0x56	; 86
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e6 e5       	ldi	r30, 0x56	; 86
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	84 60       	ori	r24, 0x04	; 4
    23ec:	8c 93       	st	X, r24
}
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	0f 92       	push	r0
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	89 83       	std	Y+1, r24	; 0x01
	/*Enable The Acknowledge*/
	SET_BIT(TWCR, TWCR_TWEA);
    2402:	a6 e5       	ldi	r26, 0x56	; 86
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e6 e5       	ldi	r30, 0x56	; 86
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 64       	ori	r24, 0x40	; 64
    240e:	8c 93       	st	X, r24
	/*Set The Slave Address*/
	TWAR = Copy_u8SlaveAddress << 1;
    2410:	e2 e2       	ldi	r30, 0x22	; 34
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	88 0f       	add	r24, r24
    2418:	80 83       	st	Z, r24
	/*Enable The TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    241a:	a6 e5       	ldi	r26, 0x56	; 86
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e6 e5       	ldi	r30, 0x56	; 86
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	84 60       	ori	r24, 0x04	; 4
    2426:	8c 93       	st	X, r24
}
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <TWI_ERRSendStartCondition>:

ERR_t TWI_ERRSendStartCondition(void)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	0f 92       	push	r0
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	ERR_t Error_Status = NoError;
    243a:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
    243c:	a6 e5       	ldi	r26, 0x56	; 86
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e6 e5       	ldi	r30, 0x56	; 86
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	80 62       	ori	r24, 0x20	; 32
    2448:	8c 93       	st	X, r24
	/*Set The Flag To Take The Action*/
	SET_BIT(TWCR, TWCR_TWINT);
    244a:	a6 e5       	ldi	r26, 0x56	; 86
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e6 e5       	ldi	r30, 0x56	; 86
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	80 68       	ori	r24, 0x80	; 128
    2456:	8c 93       	st	X, r24
	/*Polling (busy Wait) For The Flag To Be Raised*/
	while (GET_BIT(TWCR, TWCR_TWINT) == 0);
    2458:	e6 e5       	ldi	r30, 0x56	; 86
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	88 23       	and	r24, r24
    2460:	dc f7       	brge	.-10     	; 0x2458 <TWI_ERRSendStartCondition+0x28>
	/*Check For The Status Code*/
	if ((TWSR & STATUS_BIT_MASK) != START_ACK)
    2462:	e1 e2       	ldi	r30, 0x21	; 33
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	88 7f       	andi	r24, 0xF8	; 248
    246e:	90 70       	andi	r25, 0x00	; 0
    2470:	88 30       	cpi	r24, 0x08	; 8
    2472:	91 05       	cpc	r25, r1
    2474:	11 f0       	breq	.+4      	; 0x247a <TWI_ERRSendStartCondition+0x4a>
	{
		/*Return Error*/
		Error_Status = StartConditionError;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
}
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <TWI_ERRSendRepeatedStartCondition>:

ERR_t TWI_ERRSendRepeatedStartCondition(void)
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	0f 92       	push	r0
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	ERR_t Error_Status = NoError;
    248e:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
    2490:	a6 e5       	ldi	r26, 0x56	; 86
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e6 e5       	ldi	r30, 0x56	; 86
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	80 62       	ori	r24, 0x20	; 32
    249c:	8c 93       	st	X, r24
	/*Set The Flag To Take The Action*/
	SET_BIT(TWCR, TWCR_TWINT);
    249e:	a6 e5       	ldi	r26, 0x56	; 86
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e6 e5       	ldi	r30, 0x56	; 86
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	80 68       	ori	r24, 0x80	; 128
    24aa:	8c 93       	st	X, r24
	/*Polling (busy Wait) For The Flag To Be Raised*/
	while (GET_BIT(TWCR, TWCR_TWINT) == 0);
    24ac:	e6 e5       	ldi	r30, 0x56	; 86
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	88 23       	and	r24, r24
    24b4:	dc f7       	brge	.-10     	; 0x24ac <TWI_ERRSendRepeatedStartCondition+0x28>
	/*Check For The Status Code*/
	if ((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
    24b6:	e1 e2       	ldi	r30, 0x21	; 33
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	88 7f       	andi	r24, 0xF8	; 248
    24c2:	90 70       	andi	r25, 0x00	; 0
    24c4:	80 31       	cpi	r24, 0x10	; 16
    24c6:	91 05       	cpc	r25, r1
    24c8:	11 f0       	breq	.+4      	; 0x24ce <TWI_ERRSendRepeatedStartCondition+0x4a>
	{
		/*Return Error*/
		Error_Status = RepeatedStartConditionError;
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <TWI_ERRSendSlaveAddressWithWrite>:

ERR_t TWI_ERRSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <TWI_ERRSendSlaveAddressWithWrite+0x6>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8a 83       	std	Y+2, r24	; 0x02
	ERR_t Error_Status = NoError;
    24e4:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Slave Address In The TWDR*/
	TWDR = Copy_u8SlaveAddress << 1;
    24e6:	e3 e2       	ldi	r30, 0x23	; 35
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	88 0f       	add	r24, r24
    24ee:	80 83       	st	Z, r24
	/*Clear The 0th bit in the TWDR -> Write Request*/
	CLEAR_BIT(TWDR, TWDR_TWD0);
    24f0:	a3 e2       	ldi	r26, 0x23	; 35
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	e3 e2       	ldi	r30, 0x23	; 35
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	8e 7f       	andi	r24, 0xFE	; 254
    24fc:	8c 93       	st	X, r24
	/*Clear The Start Condition Bit*/
	CLEAR_BIT(TWCR, TWCR_TWSTA);
    24fe:	a6 e5       	ldi	r26, 0x56	; 86
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e6 e5       	ldi	r30, 0x56	; 86
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	8f 7d       	andi	r24, 0xDF	; 223
    250a:	8c 93       	st	X, r24
	/*Set The Flag To Take The Action*/
	SET_BIT(TWCR, TWCR_TWINT);
    250c:	a6 e5       	ldi	r26, 0x56	; 86
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e6 e5       	ldi	r30, 0x56	; 86
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	80 68       	ori	r24, 0x80	; 128
    2518:	8c 93       	st	X, r24
	/*Polling (busy Wait) For The Flag To Be Raised*/
	while (GET_BIT(TWCR, TWCR_TWINT) == 0)
    251a:	e6 e5       	ldi	r30, 0x56	; 86
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	88 23       	and	r24, r24
    2522:	dc f7       	brge	.-10     	; 0x251a <TWI_ERRSendSlaveAddressWithWrite+0x42>
		;
	/*Check For The Status Code*/
	if ((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    2524:	e1 e2       	ldi	r30, 0x21	; 33
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	88 2f       	mov	r24, r24
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	88 7f       	andi	r24, 0xF8	; 248
    2530:	90 70       	andi	r25, 0x00	; 0
    2532:	88 31       	cpi	r24, 0x18	; 24
    2534:	91 05       	cpc	r25, r1
    2536:	11 f0       	breq	.+4      	; 0x253c <TWI_ERRSendSlaveAddressWithWrite+0x64>
	{
		/*Return Error*/
		Error_Status = SlaveAddressWithWriteRequestError;
    2538:	83 e0       	ldi	r24, 0x03	; 3
    253a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
}
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <TWI_voidSendSlaveAddressWithRead>:

void TWI_voidSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	00 d0       	rcall	.+0      	; 0x254e <TWI_voidSendSlaveAddressWithRead+0x6>
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	8a 83       	std	Y+2, r24	; 0x02
	ERR_t Error_Status = NoError;
    2554:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Slave Address In The TWDR*/
	TWDR = Copy_u8SlaveAddress << 1;
    2556:	e3 e2       	ldi	r30, 0x23	; 35
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	88 0f       	add	r24, r24
    255e:	80 83       	st	Z, r24
	/*Clear The 0th bit in the TWDR -> Read Request*/
	SET_BIT(TWDR, TWDR_TWD0);
    2560:	a3 e2       	ldi	r26, 0x23	; 35
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e3 e2       	ldi	r30, 0x23	; 35
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	81 60       	ori	r24, 0x01	; 1
    256c:	8c 93       	st	X, r24
	/*Clear The Start Condition Bit*/
	CLEAR_BIT(TWCR, TWCR_TWSTA);
    256e:	a6 e5       	ldi	r26, 0x56	; 86
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e6 e5       	ldi	r30, 0x56	; 86
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	8f 7d       	andi	r24, 0xDF	; 223
    257a:	8c 93       	st	X, r24
	/*Set The Flag To Take The Action*/
	SET_BIT(TWCR, TWCR_TWINT);
    257c:	a6 e5       	ldi	r26, 0x56	; 86
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e6 e5       	ldi	r30, 0x56	; 86
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	80 68       	ori	r24, 0x80	; 128
    2588:	8c 93       	st	X, r24
	/*Polling (busy Wait) For The Flag To Be Raised*/
	while (GET_BIT(TWCR, TWCR_TWINT) == 0);
    258a:	e6 e5       	ldi	r30, 0x56	; 86
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	88 23       	and	r24, r24
    2592:	dc f7       	brge	.-10     	; 0x258a <TWI_voidSendSlaveAddressWithRead+0x42>
	/*Check For The Status Code*/
	if ((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    2594:	e1 e2       	ldi	r30, 0x21	; 33
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	88 7f       	andi	r24, 0xF8	; 248
    25a0:	90 70       	andi	r25, 0x00	; 0
    25a2:	80 34       	cpi	r24, 0x40	; 64
    25a4:	91 05       	cpc	r25, r1
    25a6:	11 f0       	breq	.+4      	; 0x25ac <TWI_voidSendSlaveAddressWithRead+0x64>
	{
		/*Return Error*/
		Error_Status = SlaveAddressWithReadRequestError;
    25a8:	84 e0       	ldi	r24, 0x04	; 4
    25aa:	89 83       	std	Y+1, r24	; 0x01
	}
	//return Error_Status;
}
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <TWI_ERRSendDataPacket>:

ERR_t TWI_ERRSendDataPacket(u8 Copy_u8DataPacket)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <TWI_ERRSendDataPacket+0x6>
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	8a 83       	std	Y+2, r24	; 0x02
	ERR_t Error_Status = NoError;
    25c2:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Data Packet In The TWDR Register*/
	TWDR = Copy_u8DataPacket;
    25c4:	e3 e2       	ldi	r30, 0x23	; 35
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	80 83       	st	Z, r24
	/*Set The Flag To Take The Action*/
	SET_BIT(TWCR, TWCR_TWINT);
    25cc:	a6 e5       	ldi	r26, 0x56	; 86
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e6 e5       	ldi	r30, 0x56	; 86
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	80 68       	ori	r24, 0x80	; 128
    25d8:	8c 93       	st	X, r24
	/*Polling (busy Wait) For The Flag To Be Raised*/
	while (GET_BIT(TWCR, TWCR_TWINT) == 0);
    25da:	e6 e5       	ldi	r30, 0x56	; 86
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	88 23       	and	r24, r24
    25e2:	dc f7       	brge	.-10     	; 0x25da <TWI_ERRSendDataPacket+0x24>
	/*Check For The Status Code*/
	if ((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    25e4:	e1 e2       	ldi	r30, 0x21	; 33
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	88 7f       	andi	r24, 0xF8	; 248
    25f0:	90 70       	andi	r25, 0x00	; 0
    25f2:	88 32       	cpi	r24, 0x28	; 40
    25f4:	91 05       	cpc	r25, r1
    25f6:	11 f0       	breq	.+4      	; 0x25fc <TWI_ERRSendDataPacket+0x46>
	{
		/*Return Error*/
		Error_Status = SendDataPacketError;
    25f8:	85 e0       	ldi	r24, 0x05	; 5
    25fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <TWI_ERRReceiveDataPacket>:

ERR_t TWI_ERRReceiveDataPacket(u8 *Copy_pu8DataPacket)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <TWI_ERRReceiveDataPacket+0x6>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	9b 83       	std	Y+3, r25	; 0x03
    2616:	8a 83       	std	Y+2, r24	; 0x02
	ERR_t Error_Status = NoError;
    2618:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Flag To Make The Slave Send Its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    261a:	a6 e5       	ldi	r26, 0x56	; 86
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e6 e5       	ldi	r30, 0x56	; 86
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	80 68       	ori	r24, 0x80	; 128
    2626:	8c 93       	st	X, r24
	/*Polling (busy Wait) For The Flag To Be Raised*/
	while (GET_BIT(TWCR, TWCR_TWINT) == 0);
    2628:	e6 e5       	ldi	r30, 0x56	; 86
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	88 23       	and	r24, r24
    2630:	dc f7       	brge	.-10     	; 0x2628 <TWI_ERRReceiveDataPacket+0x20>
	/*Check For The Status Code*/
	if ((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    2632:	e1 e2       	ldi	r30, 0x21	; 33
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	88 7f       	andi	r24, 0xF8	; 248
    263e:	90 70       	andi	r25, 0x00	; 0
    2640:	80 35       	cpi	r24, 0x50	; 80
    2642:	91 05       	cpc	r25, r1
    2644:	19 f0       	breq	.+6      	; 0x264c <TWI_ERRReceiveDataPacket+0x44>
	{
		/*Return Error*/
		Error_Status = MasterReadDataPacketError;
    2646:	86 e0       	ldi	r24, 0x06	; 6
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <TWI_ERRReceiveDataPacket+0x50>
	}
	else
	{
		/*Read The Received Data From TWDR*/
		*Copy_pu8DataPacket = TWDR;
    264c:	e3 e2       	ldi	r30, 0x23	; 35
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	ea 81       	ldd	r30, Y+2	; 0x02
    2654:	fb 81       	ldd	r31, Y+3	; 0x03
    2656:	80 83       	st	Z, r24
	}
	return Error_Status;
    2658:	89 81       	ldd	r24, Y+1	; 0x01
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
	/*Set The Stop Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTO);
    266e:	a6 e5       	ldi	r26, 0x56	; 86
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e6 e5       	ldi	r30, 0x56	; 86
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	80 61       	ori	r24, 0x10	; 16
    267a:	8c 93       	st	X, r24
	/*Set The Flag To Make The Slave Send Its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    267c:	a6 e5       	ldi	r26, 0x56	; 86
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e6 e5       	ldi	r30, 0x56	; 86
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	80 68       	ori	r24, 0x80	; 128
    2688:	8c 93       	st	X, r24
}
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <SPI_voidMasterInit>:
#include "SPI_config.h"



void SPI_voidMasterInit(void)
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    clk select : F/128
    SPI Enable
    */

   //LSB
   SET_BIT(SPCR, DORD);
    2698:	ad e2       	ldi	r26, 0x2D	; 45
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	ed e2       	ldi	r30, 0x2D	; 45
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	80 62       	ori	r24, 0x20	; 32
    26a4:	8c 93       	st	X, r24

   //Master
   SET_BIT(SPCR, MSTR);
    26a6:	ad e2       	ldi	r26, 0x2D	; 45
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	ed e2       	ldi	r30, 0x2D	; 45
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	80 61       	ori	r24, 0x10	; 16
    26b2:	8c 93       	st	X, r24

    //CPOL
    CLEAR_BIT(SPCR, CPOL);
    26b4:	ad e2       	ldi	r26, 0x2D	; 45
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	ed e2       	ldi	r30, 0x2D	; 45
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	87 7f       	andi	r24, 0xF7	; 247
    26c0:	8c 93       	st	X, r24

    //CPHA
    SET_BIT(SPCR, CPHA);
    26c2:	ad e2       	ldi	r26, 0x2D	; 45
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	ed e2       	ldi	r30, 0x2D	; 45
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	84 60       	ori	r24, 0x04	; 4
    26ce:	8c 93       	st	X, r24

    //clk / 128
    SET_BIT(SPCR, SPR0);
    26d0:	ad e2       	ldi	r26, 0x2D	; 45
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ed e2       	ldi	r30, 0x2D	; 45
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	81 60       	ori	r24, 0x01	; 1
    26dc:	8c 93       	st	X, r24
    SET_BIT(SPCR, SPR1);
    26de:	ad e2       	ldi	r26, 0x2D	; 45
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	ed e2       	ldi	r30, 0x2D	; 45
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	82 60       	ori	r24, 0x02	; 2
    26ea:	8c 93       	st	X, r24

    //enable 
    SET_BIT(SPCR, SPE);
    26ec:	ad e2       	ldi	r26, 0x2D	; 45
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	ed e2       	ldi	r30, 0x2D	; 45
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	80 64       	ori	r24, 0x40	; 64
    26f8:	8c 93       	st	X, r24


}
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    Data order : LSB
    clk select : F/128
    */

    //LSB
    SET_BIT(SPCR, DORD);
    2708:	ad e2       	ldi	r26, 0x2D	; 45
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ed e2       	ldi	r30, 0x2D	; 45
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	80 62       	ori	r24, 0x20	; 32
    2714:	8c 93       	st	X, r24

    //Slave
    CLEAR_BIT(SPCR, MSTR);
    2716:	ad e2       	ldi	r26, 0x2D	; 45
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ed e2       	ldi	r30, 0x2D	; 45
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	8f 7e       	andi	r24, 0xEF	; 239
    2722:	8c 93       	st	X, r24

    //CPOL
    CLEAR_BIT(SPCR, CPOL);
    2724:	ad e2       	ldi	r26, 0x2D	; 45
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ed e2       	ldi	r30, 0x2D	; 45
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	87 7f       	andi	r24, 0xF7	; 247
    2730:	8c 93       	st	X, r24

    //CPHA
    SET_BIT(SPCR, CPHA);
    2732:	ad e2       	ldi	r26, 0x2D	; 45
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	ed e2       	ldi	r30, 0x2D	; 45
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	84 60       	ori	r24, 0x04	; 4
    273e:	8c 93       	st	X, r24

    //clk / 128
    SET_BIT(SPCR, SPR0);
    2740:	ad e2       	ldi	r26, 0x2D	; 45
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	ed e2       	ldi	r30, 0x2D	; 45
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	81 60       	ori	r24, 0x01	; 1
    274c:	8c 93       	st	X, r24
    SET_BIT(SPCR, SPR1);
    274e:	ad e2       	ldi	r26, 0x2D	; 45
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	ed e2       	ldi	r30, 0x2D	; 45
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	82 60       	ori	r24, 0x02	; 2
    275a:	8c 93       	st	X, r24

    //enable 
    SET_BIT(SPCR, SPE);
    275c:	ad e2       	ldi	r26, 0x2D	; 45
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	ed e2       	ldi	r30, 0x2D	; 45
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	80 64       	ori	r24, 0x40	; 64
    2768:	8c 93       	st	X, r24
}
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <SPI_voidTrancieveData>:


void SPI_voidTrancieveData(u8 Copy_u8TransData, u8 *pu8RecievedData)
{
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	00 d0       	rcall	.+0      	; 0x2776 <SPI_voidTrancieveData+0x6>
    2776:	0f 92       	push	r0
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	7b 83       	std	Y+3, r23	; 0x03
    2780:	6a 83       	std	Y+2, r22	; 0x02
    while(GET_BIT(SPSR, SPIF) == 0);
    2782:	ee e2       	ldi	r30, 0x2E	; 46
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	88 23       	and	r24, r24
    278a:	dc f7       	brge	.-10     	; 0x2782 <SPI_voidTrancieveData+0x12>

    SPDR =  Copy_u8TransData;
    278c:	ef e2       	ldi	r30, 0x2F	; 47
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	80 83       	st	Z, r24

    while(GET_BIT(SPSR, SPIF) == 0);
    2794:	ee e2       	ldi	r30, 0x2E	; 46
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	88 23       	and	r24, r24
    279c:	dc f7       	brge	.-10     	; 0x2794 <SPI_voidTrancieveData+0x24>

    if(pu8RecievedData)
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	31 f0       	breq	.+12     	; 0x27b2 <SPI_voidTrancieveData+0x42>
    {
    	*pu8RecievedData = SPDR;
    27a6:	ef e2       	ldi	r30, 0x2F	; 47
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	ea 81       	ldd	r30, Y+2	; 0x02
    27ae:	fb 81       	ldd	r31, Y+3	; 0x03
    27b0:	80 83       	st	Z, r24
    }
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <SPI_voidRecieveData>:

void SPI_voidRecieveData(u8 *pu8RecievedData)
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <SPI_voidRecieveData+0x6>
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    while(GET_BIT(SPSR, SPIF) == 0);
    27cc:	ee e2       	ldi	r30, 0x2E	; 46
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	88 23       	and	r24, r24
    27d4:	dc f7       	brge	.-10     	; 0x27cc <SPI_voidRecieveData+0xe>

    if(pu8RecievedData)
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	31 f0       	breq	.+12     	; 0x27ea <SPI_voidRecieveData+0x2c>
    {
    	*pu8RecievedData = SPDR;
    27de:	ef e2       	ldi	r30, 0x2F	; 47
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	e9 81       	ldd	r30, Y+1	; 0x01
    27e6:	fa 81       	ldd	r31, Y+2	; 0x02
    27e8:	80 83       	st	Z, r24
    }
}
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <EXTI_voidEXTIEnable>:
#include "EXTI_config.h"



void EXTI_voidEXTIEnable(u8 Copy_u8Interrupt_Name)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <EXTI_voidEXTIEnable+0x6>
    27fa:	0f 92       	push	r0
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Interrupt_Name)
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	3b 83       	std	Y+3, r19	; 0x03
    280a:	2a 83       	std	Y+2, r18	; 0x02
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	9b 81       	ldd	r25, Y+3	; 0x03
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	91 05       	cpc	r25, r1
    2814:	89 f0       	breq	.+34     	; 0x2838 <EXTI_voidEXTIEnable+0x44>
    2816:	2a 81       	ldd	r18, Y+2	; 0x02
    2818:	3b 81       	ldd	r19, Y+3	; 0x03
    281a:	22 30       	cpi	r18, 0x02	; 2
    281c:	31 05       	cpc	r19, r1
    281e:	a1 f0       	breq	.+40     	; 0x2848 <EXTI_voidEXTIEnable+0x54>
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	b9 f4       	brne	.+46     	; 0x2856 <EXTI_voidEXTIEnable+0x62>
    {
        case EX_INT0:
            SET_BIT(GICR, INT0);
    2828:	ab e5       	ldi	r26, 0x5B	; 91
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	eb e5       	ldi	r30, 0x5B	; 91
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	80 64       	ori	r24, 0x40	; 64
    2834:	8c 93       	st	X, r24
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <EXTI_voidEXTIEnable+0x62>
            break;
        
        case EX_INT1:
            SET_BIT(GICR, INT1);
    2838:	ab e5       	ldi	r26, 0x5B	; 91
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	eb e5       	ldi	r30, 0x5B	; 91
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	80 68       	ori	r24, 0x80	; 128
    2844:	8c 93       	st	X, r24
    2846:	07 c0       	rjmp	.+14     	; 0x2856 <EXTI_voidEXTIEnable+0x62>
            break;
            
        case EX_INT2:
            SET_BIT(GICR, INT2);
    2848:	ab e5       	ldi	r26, 0x5B	; 91
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	eb e5       	ldi	r30, 0x5B	; 91
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	80 62       	ori	r24, 0x20	; 32
    2854:	8c 93       	st	X, r24
            break;
    }
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <EXTI_voidEXTIDisable>:

void EXTI_voidEXTIDisable(u8 Copy_u8Interrupt_Name)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <EXTI_voidEXTIDisable+0x6>
    2868:	0f 92       	push	r0
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Interrupt_Name)
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	3b 83       	std	Y+3, r19	; 0x03
    2878:	2a 83       	std	Y+2, r18	; 0x02
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	91 05       	cpc	r25, r1
    2882:	89 f0       	breq	.+34     	; 0x28a6 <EXTI_voidEXTIDisable+0x44>
    2884:	2a 81       	ldd	r18, Y+2	; 0x02
    2886:	3b 81       	ldd	r19, Y+3	; 0x03
    2888:	22 30       	cpi	r18, 0x02	; 2
    288a:	31 05       	cpc	r19, r1
    288c:	a1 f0       	breq	.+40     	; 0x28b6 <EXTI_voidEXTIDisable+0x54>
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	9b 81       	ldd	r25, Y+3	; 0x03
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	b9 f4       	brne	.+46     	; 0x28c4 <EXTI_voidEXTIDisable+0x62>
    {
        case EX_INT0:
            CLEAR_BIT(GICR, INT0);
    2896:	ab e5       	ldi	r26, 0x5B	; 91
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	eb e5       	ldi	r30, 0x5B	; 91
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	8f 7b       	andi	r24, 0xBF	; 191
    28a2:	8c 93       	st	X, r24
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <EXTI_voidEXTIDisable+0x62>
            break;
        
        case EX_INT1:
            CLEAR_BIT(GICR, INT1);
    28a6:	ab e5       	ldi	r26, 0x5B	; 91
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	eb e5       	ldi	r30, 0x5B	; 91
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	8f 77       	andi	r24, 0x7F	; 127
    28b2:	8c 93       	st	X, r24
    28b4:	07 c0       	rjmp	.+14     	; 0x28c4 <EXTI_voidEXTIDisable+0x62>
            break;
            
        case EX_INT2:
            CLEAR_BIT(GICR, INT2);
    28b6:	ab e5       	ldi	r26, 0x5B	; 91
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	eb e5       	ldi	r30, 0x5B	; 91
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	8f 7d       	andi	r24, 0xDF	; 223
    28c2:	8c 93       	st	X, r24
            break;
    }
}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <EXTI_voidEXTITriggerEdge>:

void EXTI_voidEXTITriggerEdge(u8 Copy_u8Interrupt_Name, u8 Copy_u8Edge)
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	2a 97       	sbiw	r28, 0x0a	; 10
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8Interrupt_Name)
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3a 87       	std	Y+10, r19	; 0x0a
    28f0:	29 87       	std	Y+9, r18	; 0x09
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	91 05       	cpc	r25, r1
    28fa:	09 f4       	brne	.+2      	; 0x28fe <EXTI_voidEXTITriggerEdge+0x2e>
    28fc:	66 c0       	rjmp	.+204    	; 0x29ca <EXTI_voidEXTITriggerEdge+0xfa>
    28fe:	29 85       	ldd	r18, Y+9	; 0x09
    2900:	3a 85       	ldd	r19, Y+10	; 0x0a
    2902:	22 30       	cpi	r18, 0x02	; 2
    2904:	31 05       	cpc	r19, r1
    2906:	09 f4       	brne	.+2      	; 0x290a <EXTI_voidEXTITriggerEdge+0x3a>
    2908:	bb c0       	rjmp	.+374    	; 0x2a80 <EXTI_voidEXTITriggerEdge+0x1b0>
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	09 f0       	breq	.+2      	; 0x2914 <EXTI_voidEXTITriggerEdge+0x44>
    2912:	d5 c0       	rjmp	.+426    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
    {
        case EX_INT0:
            switch(Copy_u8Edge)
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	38 87       	std	Y+8, r19	; 0x08
    291c:	2f 83       	std	Y+7, r18	; 0x07
    291e:	8f 81       	ldd	r24, Y+7	; 0x07
    2920:	98 85       	ldd	r25, Y+8	; 0x08
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	91 05       	cpc	r25, r1
    2926:	21 f1       	breq	.+72     	; 0x2970 <EXTI_voidEXTITriggerEdge+0xa0>
    2928:	2f 81       	ldd	r18, Y+7	; 0x07
    292a:	38 85       	ldd	r19, Y+8	; 0x08
    292c:	22 30       	cpi	r18, 0x02	; 2
    292e:	31 05       	cpc	r19, r1
    2930:	2c f4       	brge	.+10     	; 0x293c <EXTI_voidEXTITriggerEdge+0x6c>
    2932:	8f 81       	ldd	r24, Y+7	; 0x07
    2934:	98 85       	ldd	r25, Y+8	; 0x08
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	61 f0       	breq	.+24     	; 0x2952 <EXTI_voidEXTITriggerEdge+0x82>
    293a:	c1 c0       	rjmp	.+386    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
    293c:	2f 81       	ldd	r18, Y+7	; 0x07
    293e:	38 85       	ldd	r19, Y+8	; 0x08
    2940:	22 30       	cpi	r18, 0x02	; 2
    2942:	31 05       	cpc	r19, r1
    2944:	21 f1       	breq	.+72     	; 0x298e <EXTI_voidEXTITriggerEdge+0xbe>
    2946:	8f 81       	ldd	r24, Y+7	; 0x07
    2948:	98 85       	ldd	r25, Y+8	; 0x08
    294a:	83 30       	cpi	r24, 0x03	; 3
    294c:	91 05       	cpc	r25, r1
    294e:	71 f1       	breq	.+92     	; 0x29ac <EXTI_voidEXTITriggerEdge+0xdc>
    2950:	b6 c0       	rjmp	.+364    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
            {
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR, ISC00);
    2952:	a5 e5       	ldi	r26, 0x55	; 85
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e5 e5       	ldi	r30, 0x55	; 85
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	8e 7f       	andi	r24, 0xFE	; 254
    295e:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC01);
    2960:	a5 e5       	ldi	r26, 0x55	; 85
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e5 e5       	ldi	r30, 0x55	; 85
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	8d 7f       	andi	r24, 0xFD	; 253
    296c:	8c 93       	st	X, r24
    296e:	a7 c0       	rjmp	.+334    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
                    
                case ANY_LOGICAL_CHANGE:
                    SET_BIT(MCUCR, ISC00);
    2970:	a5 e5       	ldi	r26, 0x55	; 85
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e5 e5       	ldi	r30, 0x55	; 85
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	81 60       	ori	r24, 0x01	; 1
    297c:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC01);
    297e:	a5 e5       	ldi	r26, 0x55	; 85
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e5 e5       	ldi	r30, 0x55	; 85
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	8d 7f       	andi	r24, 0xFD	; 253
    298a:	8c 93       	st	X, r24
    298c:	98 c0       	rjmp	.+304    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
                    
                case FALLING_EDGE:
                    CLEAR_BIT(MCUCR, ISC00);
    298e:	a5 e5       	ldi	r26, 0x55	; 85
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e5 e5       	ldi	r30, 0x55	; 85
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8e 7f       	andi	r24, 0xFE	; 254
    299a:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC01);
    299c:	a5 e5       	ldi	r26, 0x55	; 85
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e5 e5       	ldi	r30, 0x55	; 85
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	82 60       	ori	r24, 0x02	; 2
    29a8:	8c 93       	st	X, r24
    29aa:	89 c0       	rjmp	.+274    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
                    
                case RISING_EDGE:
                    SET_BIT(MCUCR, ISC00);
    29ac:	a5 e5       	ldi	r26, 0x55	; 85
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e5 e5       	ldi	r30, 0x55	; 85
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	81 60       	ori	r24, 0x01	; 1
    29b8:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC01);
    29ba:	a5 e5       	ldi	r26, 0x55	; 85
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e5 e5       	ldi	r30, 0x55	; 85
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	82 60       	ori	r24, 0x02	; 2
    29c6:	8c 93       	st	X, r24
    29c8:	7a c0       	rjmp	.+244    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
            }
            break;
        
        case EX_INT1:
            switch(Copy_u8Edge)
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	3e 83       	std	Y+6, r19	; 0x06
    29d2:	2d 83       	std	Y+5, r18	; 0x05
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	91 05       	cpc	r25, r1
    29dc:	21 f1       	breq	.+72     	; 0x2a26 <EXTI_voidEXTITriggerEdge+0x156>
    29de:	2d 81       	ldd	r18, Y+5	; 0x05
    29e0:	3e 81       	ldd	r19, Y+6	; 0x06
    29e2:	22 30       	cpi	r18, 0x02	; 2
    29e4:	31 05       	cpc	r19, r1
    29e6:	2c f4       	brge	.+10     	; 0x29f2 <EXTI_voidEXTITriggerEdge+0x122>
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	61 f0       	breq	.+24     	; 0x2a08 <EXTI_voidEXTITriggerEdge+0x138>
    29f0:	66 c0       	rjmp	.+204    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
    29f2:	2d 81       	ldd	r18, Y+5	; 0x05
    29f4:	3e 81       	ldd	r19, Y+6	; 0x06
    29f6:	22 30       	cpi	r18, 0x02	; 2
    29f8:	31 05       	cpc	r19, r1
    29fa:	21 f1       	breq	.+72     	; 0x2a44 <EXTI_voidEXTITriggerEdge+0x174>
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	83 30       	cpi	r24, 0x03	; 3
    2a02:	91 05       	cpc	r25, r1
    2a04:	71 f1       	breq	.+92     	; 0x2a62 <EXTI_voidEXTITriggerEdge+0x192>
    2a06:	5b c0       	rjmp	.+182    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
            {
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR, ISC10);
    2a08:	a5 e5       	ldi	r26, 0x55	; 85
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e5 e5       	ldi	r30, 0x55	; 85
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8b 7f       	andi	r24, 0xFB	; 251
    2a14:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC11);
    2a16:	a5 e5       	ldi	r26, 0x55	; 85
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e5 e5       	ldi	r30, 0x55	; 85
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	87 7f       	andi	r24, 0xF7	; 247
    2a22:	8c 93       	st	X, r24
    2a24:	4c c0       	rjmp	.+152    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
                    
                case ANY_LOGICAL_CHANGE:
                    SET_BIT(MCUCR, ISC10);
    2a26:	a5 e5       	ldi	r26, 0x55	; 85
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e5 e5       	ldi	r30, 0x55	; 85
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	84 60       	ori	r24, 0x04	; 4
    2a32:	8c 93       	st	X, r24
                    CLEAR_BIT(MCUCR, ISC11);
    2a34:	a5 e5       	ldi	r26, 0x55	; 85
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e5 e5       	ldi	r30, 0x55	; 85
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	87 7f       	andi	r24, 0xF7	; 247
    2a40:	8c 93       	st	X, r24
    2a42:	3d c0       	rjmp	.+122    	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
                    
                case FALLING_EDGE:
                    CLEAR_BIT(MCUCR, ISC10);
    2a44:	a5 e5       	ldi	r26, 0x55	; 85
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e5 e5       	ldi	r30, 0x55	; 85
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8b 7f       	andi	r24, 0xFB	; 251
    2a50:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC11);
    2a52:	a5 e5       	ldi	r26, 0x55	; 85
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e5 e5       	ldi	r30, 0x55	; 85
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 60       	ori	r24, 0x08	; 8
    2a5e:	8c 93       	st	X, r24
    2a60:	2e c0       	rjmp	.+92     	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
                    
                case RISING_EDGE:
                    SET_BIT(MCUCR, ISC10);
    2a62:	a5 e5       	ldi	r26, 0x55	; 85
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e5 e5       	ldi	r30, 0x55	; 85
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	84 60       	ori	r24, 0x04	; 4
    2a6e:	8c 93       	st	X, r24
                    SET_BIT(MCUCR, ISC11);
    2a70:	a5 e5       	ldi	r26, 0x55	; 85
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e5 e5       	ldi	r30, 0x55	; 85
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	88 60       	ori	r24, 0x08	; 8
    2a7c:	8c 93       	st	X, r24
    2a7e:	1f c0       	rjmp	.+62     	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
            }
            break;
            
        case EX_INT2:
            switch(Copy_u8Edge)
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	3c 83       	std	Y+4, r19	; 0x04
    2a88:	2b 83       	std	Y+3, r18	; 0x03
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	82 30       	cpi	r24, 0x02	; 2
    2a90:	91 05       	cpc	r25, r1
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <EXTI_voidEXTITriggerEdge+0x1d0>
    2a94:	2b 81       	ldd	r18, Y+3	; 0x03
    2a96:	3c 81       	ldd	r19, Y+4	; 0x04
    2a98:	23 30       	cpi	r18, 0x03	; 3
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	49 f0       	breq	.+18     	; 0x2ab0 <EXTI_voidEXTITriggerEdge+0x1e0>
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
            {
                case FALLING_EDGE:
                    CLEAR_BIT(MCUCR, ISC2);
    2aa0:	a5 e5       	ldi	r26, 0x55	; 85
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e5 e5       	ldi	r30, 0x55	; 85
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8f 7b       	andi	r24, 0xBF	; 191
    2aac:	8c 93       	st	X, r24
    2aae:	07 c0       	rjmp	.+14     	; 0x2abe <EXTI_voidEXTITriggerEdge+0x1ee>
                    break;
                    
                case RISING_EDGE:
                    SET_BIT(MCUCR, ISC2);
    2ab0:	a5 e5       	ldi	r26, 0x55	; 85
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e5 e5       	ldi	r30, 0x55	; 85
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 64       	ori	r24, 0x40	; 64
    2abc:	8c 93       	st	X, r24
                    break;
            }
            break;
    }
}
    2abe:	2a 96       	adiw	r28, 0x0a	; 10
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(u8 Copy_u8Interrupt_Name, void (*EXT_INT_voidpFunction)(void))
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <EXTI_voidSetCallBack+0x6>
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <EXTI_voidSetCallBack+0x8>
    2ad8:	0f 92       	push	r0
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	89 83       	std	Y+1, r24	; 0x01
    2ae0:	7b 83       	std	Y+3, r23	; 0x03
    2ae2:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8Interrupt_Name)
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	3d 83       	std	Y+5, r19	; 0x05
    2aec:	2c 83       	std	Y+4, r18	; 0x04
    2aee:	8c 81       	ldd	r24, Y+4	; 0x04
    2af0:	9d 81       	ldd	r25, Y+5	; 0x05
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	91 05       	cpc	r25, r1
    2af6:	81 f0       	breq	.+32     	; 0x2b18 <EXTI_voidSetCallBack+0x48>
    2af8:	2c 81       	ldd	r18, Y+4	; 0x04
    2afa:	3d 81       	ldd	r19, Y+5	; 0x05
    2afc:	22 30       	cpi	r18, 0x02	; 2
    2afe:	31 05       	cpc	r19, r1
    2b00:	91 f0       	breq	.+36     	; 0x2b26 <EXTI_voidSetCallBack+0x56>
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	9d 81       	ldd	r25, Y+5	; 0x05
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	a1 f4       	brne	.+40     	; 0x2b32 <EXTI_voidSetCallBack+0x62>
    {
        case EX_INT0:
            INT0_fptr = EXT_INT_voidpFunction;
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0e:	90 93 93 01 	sts	0x0193, r25
    2b12:	80 93 92 01 	sts	0x0192, r24
    2b16:	0d c0       	rjmp	.+26     	; 0x2b32 <EXTI_voidSetCallBack+0x62>
            break;
        case EX_INT1:
            INT1_fptr = EXT_INT_voidpFunction;
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1c:	90 93 95 01 	sts	0x0195, r25
    2b20:	80 93 94 01 	sts	0x0194, r24
    2b24:	06 c0       	rjmp	.+12     	; 0x2b32 <EXTI_voidSetCallBack+0x62>
            break;
        case EX_INT2:
            INT2_fptr = EXT_INT_voidpFunction;
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	90 93 97 01 	sts	0x0197, r25
    2b2e:	80 93 96 01 	sts	0x0196, r24
            break;
    }
}
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <__vector_1>:



ISR(INT0_vect)
{
    2b42:	1f 92       	push	r1
    2b44:	0f 92       	push	r0
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	0f 92       	push	r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	2f 93       	push	r18
    2b4e:	3f 93       	push	r19
    2b50:	4f 93       	push	r20
    2b52:	5f 93       	push	r21
    2b54:	6f 93       	push	r22
    2b56:	7f 93       	push	r23
    2b58:	8f 93       	push	r24
    2b5a:	9f 93       	push	r25
    2b5c:	af 93       	push	r26
    2b5e:	bf 93       	push	r27
    2b60:	ef 93       	push	r30
    2b62:	ff 93       	push	r31
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    INT0_fptr();
    2b6c:	e0 91 92 01 	lds	r30, 0x0192
    2b70:	f0 91 93 01 	lds	r31, 0x0193
    2b74:	09 95       	icall
}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	ff 91       	pop	r31
    2b7c:	ef 91       	pop	r30
    2b7e:	bf 91       	pop	r27
    2b80:	af 91       	pop	r26
    2b82:	9f 91       	pop	r25
    2b84:	8f 91       	pop	r24
    2b86:	7f 91       	pop	r23
    2b88:	6f 91       	pop	r22
    2b8a:	5f 91       	pop	r21
    2b8c:	4f 91       	pop	r20
    2b8e:	3f 91       	pop	r19
    2b90:	2f 91       	pop	r18
    2b92:	0f 90       	pop	r0
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	0f 90       	pop	r0
    2b98:	1f 90       	pop	r1
    2b9a:	18 95       	reti

00002b9c <__vector_2>:

ISR(INT1_vect)
{
    2b9c:	1f 92       	push	r1
    2b9e:	0f 92       	push	r0
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	0f 92       	push	r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	2f 93       	push	r18
    2ba8:	3f 93       	push	r19
    2baa:	4f 93       	push	r20
    2bac:	5f 93       	push	r21
    2bae:	6f 93       	push	r22
    2bb0:	7f 93       	push	r23
    2bb2:	8f 93       	push	r24
    2bb4:	9f 93       	push	r25
    2bb6:	af 93       	push	r26
    2bb8:	bf 93       	push	r27
    2bba:	ef 93       	push	r30
    2bbc:	ff 93       	push	r31
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    INT1_fptr();
    2bc6:	e0 91 94 01 	lds	r30, 0x0194
    2bca:	f0 91 95 01 	lds	r31, 0x0195
    2bce:	09 95       	icall
}
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	ff 91       	pop	r31
    2bd6:	ef 91       	pop	r30
    2bd8:	bf 91       	pop	r27
    2bda:	af 91       	pop	r26
    2bdc:	9f 91       	pop	r25
    2bde:	8f 91       	pop	r24
    2be0:	7f 91       	pop	r23
    2be2:	6f 91       	pop	r22
    2be4:	5f 91       	pop	r21
    2be6:	4f 91       	pop	r20
    2be8:	3f 91       	pop	r19
    2bea:	2f 91       	pop	r18
    2bec:	0f 90       	pop	r0
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	0f 90       	pop	r0
    2bf2:	1f 90       	pop	r1
    2bf4:	18 95       	reti

00002bf6 <__vector_3>:

ISR(INT2_vect)
{
    2bf6:	1f 92       	push	r1
    2bf8:	0f 92       	push	r0
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	0f 92       	push	r0
    2bfe:	11 24       	eor	r1, r1
    2c00:	2f 93       	push	r18
    2c02:	3f 93       	push	r19
    2c04:	4f 93       	push	r20
    2c06:	5f 93       	push	r21
    2c08:	6f 93       	push	r22
    2c0a:	7f 93       	push	r23
    2c0c:	8f 93       	push	r24
    2c0e:	9f 93       	push	r25
    2c10:	af 93       	push	r26
    2c12:	bf 93       	push	r27
    2c14:	ef 93       	push	r30
    2c16:	ff 93       	push	r31
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    INT2_fptr();
    2c20:	e0 91 96 01 	lds	r30, 0x0196
    2c24:	f0 91 97 01 	lds	r31, 0x0197
    2c28:	09 95       	icall
}
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	ff 91       	pop	r31
    2c30:	ef 91       	pop	r30
    2c32:	bf 91       	pop	r27
    2c34:	af 91       	pop	r26
    2c36:	9f 91       	pop	r25
    2c38:	8f 91       	pop	r24
    2c3a:	7f 91       	pop	r23
    2c3c:	6f 91       	pop	r22
    2c3e:	5f 91       	pop	r21
    2c40:	4f 91       	pop	r20
    2c42:	3f 91       	pop	r19
    2c44:	2f 91       	pop	r18
    2c46:	0f 90       	pop	r0
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	0f 90       	pop	r0
    2c4c:	1f 90       	pop	r1
    2c4e:	18 95       	reti

00002c50 <DIO_voidSetPortDirection>:




void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8Stat)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	2c 97       	sbiw	r28, 0x0c	; 12
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	89 83       	std	Y+1, r24	; 0x01
    2c66:	6a 83       	std	Y+2, r22	; 0x02
	//switch on port type
	switch(Copy_u8PortName)
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	3c 87       	std	Y+12, r19	; 0x0c
    2c70:	2b 87       	std	Y+11, r18	; 0x0b
    2c72:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c74:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c76:	81 30       	cpi	r24, 0x01	; 1
    2c78:	91 05       	cpc	r25, r1
    2c7a:	e1 f1       	breq	.+120    	; 0x2cf4 <DIO_voidSetPortDirection+0xa4>
    2c7c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c7e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c80:	22 30       	cpi	r18, 0x02	; 2
    2c82:	31 05       	cpc	r19, r1
    2c84:	2c f4       	brge	.+10     	; 0x2c90 <DIO_voidSetPortDirection+0x40>
    2c86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c88:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	71 f0       	breq	.+28     	; 0x2caa <DIO_voidSetPortDirection+0x5a>
    2c8e:	9e c0       	rjmp	.+316    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
    2c90:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c92:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c94:	22 30       	cpi	r18, 0x02	; 2
    2c96:	31 05       	cpc	r19, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <DIO_voidSetPortDirection+0x4c>
    2c9a:	51 c0       	rjmp	.+162    	; 0x2d3e <DIO_voidSetPortDirection+0xee>
    2c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ca0:	83 30       	cpi	r24, 0x03	; 3
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <DIO_voidSetPortDirection+0x58>
    2ca6:	6f c0       	rjmp	.+222    	; 0x2d86 <DIO_voidSetPortDirection+0x136>
    2ca8:	91 c0       	rjmp	.+290    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
	{
		case DIO_PORTA:
			//switch on State type
			switch(Copy_u8Stat)
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	3a 87       	std	Y+10, r19	; 0x0a
    2cb2:	29 87       	std	Y+9, r18	; 0x09
    2cb4:	89 85       	ldd	r24, Y+9	; 0x09
    2cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb8:	81 30       	cpi	r24, 0x01	; 1
    2cba:	91 05       	cpc	r25, r1
    2cbc:	71 f0       	breq	.+28     	; 0x2cda <DIO_voidSetPortDirection+0x8a>
    2cbe:	29 85       	ldd	r18, Y+9	; 0x09
    2cc0:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cc2:	22 30       	cpi	r18, 0x02	; 2
    2cc4:	31 05       	cpc	r19, r1
    2cc6:	71 f0       	breq	.+28     	; 0x2ce4 <DIO_voidSetPortDirection+0x94>
    2cc8:	89 85       	ldd	r24, Y+9	; 0x09
    2cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <DIO_voidSetPortDirection+0x82>
    2cd0:	7d c0       	rjmp	.+250    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
			{
				case INPUT: CLEAR_REG(DDRA); break;
    2cd2:	ea e3       	ldi	r30, 0x3A	; 58
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	10 82       	st	Z, r1
    2cd8:	79 c0       	rjmp	.+242    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case OUTPUT:  SET_REG(DDRA); break;
    2cda:	ea e3       	ldi	r30, 0x3A	; 58
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	80 83       	st	Z, r24
    2ce2:	74 c0       	rjmp	.+232    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case IN_PULL_UP: CLEAR_REG(DDRA); SET_REG(PORTA); break;
    2ce4:	ea e3       	ldi	r30, 0x3A	; 58
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	10 82       	st	Z, r1
    2cea:	eb e3       	ldi	r30, 0x3B	; 59
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	8f ef       	ldi	r24, 0xFF	; 255
    2cf0:	80 83       	st	Z, r24
    2cf2:	6c c0       	rjmp	.+216    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
					break;
			}
			break;
		case DIO_PORTB:
			//switch on State type
			switch(Copy_u8Stat)
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	38 87       	std	Y+8, r19	; 0x08
    2cfc:	2f 83       	std	Y+7, r18	; 0x07
    2cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    2d00:	98 85       	ldd	r25, Y+8	; 0x08
    2d02:	81 30       	cpi	r24, 0x01	; 1
    2d04:	91 05       	cpc	r25, r1
    2d06:	71 f0       	breq	.+28     	; 0x2d24 <DIO_voidSetPortDirection+0xd4>
    2d08:	2f 81       	ldd	r18, Y+7	; 0x07
    2d0a:	38 85       	ldd	r19, Y+8	; 0x08
    2d0c:	22 30       	cpi	r18, 0x02	; 2
    2d0e:	31 05       	cpc	r19, r1
    2d10:	71 f0       	breq	.+28     	; 0x2d2e <DIO_voidSetPortDirection+0xde>
    2d12:	8f 81       	ldd	r24, Y+7	; 0x07
    2d14:	98 85       	ldd	r25, Y+8	; 0x08
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <DIO_voidSetPortDirection+0xcc>
    2d1a:	58 c0       	rjmp	.+176    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
			{
				case INPUT: CLEAR_REG(DDRB); break;
    2d1c:	e7 e3       	ldi	r30, 0x37	; 55
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	10 82       	st	Z, r1
    2d22:	54 c0       	rjmp	.+168    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case OUTPUT:  SET_REG(DDRB); break;
    2d24:	e7 e3       	ldi	r30, 0x37	; 55
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	80 83       	st	Z, r24
    2d2c:	4f c0       	rjmp	.+158    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case IN_PULL_UP: CLEAR_REG(DDRB); SET_REG(PORTB); break;
    2d2e:	e7 e3       	ldi	r30, 0x37	; 55
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	10 82       	st	Z, r1
    2d34:	e8 e3       	ldi	r30, 0x38	; 56
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	8f ef       	ldi	r24, 0xFF	; 255
    2d3a:	80 83       	st	Z, r24
    2d3c:	47 c0       	rjmp	.+142    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
					break;
			}
			break;
		case DIO_PORTC:
			//switch on State type
			switch(Copy_u8Stat)
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	3e 83       	std	Y+6, r19	; 0x06
    2d46:	2d 83       	std	Y+5, r18	; 0x05
    2d48:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	91 05       	cpc	r25, r1
    2d50:	69 f0       	breq	.+26     	; 0x2d6c <DIO_voidSetPortDirection+0x11c>
    2d52:	2d 81       	ldd	r18, Y+5	; 0x05
    2d54:	3e 81       	ldd	r19, Y+6	; 0x06
    2d56:	22 30       	cpi	r18, 0x02	; 2
    2d58:	31 05       	cpc	r19, r1
    2d5a:	69 f0       	breq	.+26     	; 0x2d76 <DIO_voidSetPortDirection+0x126>
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	a1 f5       	brne	.+104    	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
			{
				case INPUT: CLEAR_REG(DDRC); break;
    2d64:	e4 e3       	ldi	r30, 0x34	; 52
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	10 82       	st	Z, r1
    2d6a:	30 c0       	rjmp	.+96     	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case OUTPUT:  SET_REG(DDRC); break;
    2d6c:	e4 e3       	ldi	r30, 0x34	; 52
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	80 83       	st	Z, r24
    2d74:	2b c0       	rjmp	.+86     	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case IN_PULL_UP: CLEAR_REG(DDRC); SET_REG(PORTC); break;
    2d76:	e4 e3       	ldi	r30, 0x34	; 52
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	10 82       	st	Z, r1
    2d7c:	e5 e3       	ldi	r30, 0x35	; 53
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	8f ef       	ldi	r24, 0xFF	; 255
    2d82:	80 83       	st	Z, r24
    2d84:	23 c0       	rjmp	.+70     	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
					break;
			}
			break;
		case DIO_PORTD:
			//switch on State type
			switch(Copy_u8Stat)
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	28 2f       	mov	r18, r24
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	3c 83       	std	Y+4, r19	; 0x04
    2d8e:	2b 83       	std	Y+3, r18	; 0x03
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	9c 81       	ldd	r25, Y+4	; 0x04
    2d94:	81 30       	cpi	r24, 0x01	; 1
    2d96:	91 05       	cpc	r25, r1
    2d98:	69 f0       	breq	.+26     	; 0x2db4 <DIO_voidSetPortDirection+0x164>
    2d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9e:	22 30       	cpi	r18, 0x02	; 2
    2da0:	31 05       	cpc	r19, r1
    2da2:	69 f0       	breq	.+26     	; 0x2dbe <DIO_voidSetPortDirection+0x16e>
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	81 f4       	brne	.+32     	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
			{
				case INPUT: CLEAR_REG(DDRD); break;
    2dac:	e1 e3       	ldi	r30, 0x31	; 49
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	10 82       	st	Z, r1
    2db2:	0c c0       	rjmp	.+24     	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case OUTPUT:  SET_REG(DDRD); break;
    2db4:	e1 e3       	ldi	r30, 0x31	; 49
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	80 83       	st	Z, r24
    2dbc:	07 c0       	rjmp	.+14     	; 0x2dcc <DIO_voidSetPortDirection+0x17c>
				case IN_PULL_UP: CLEAR_REG(DDRD); SET_REG(PORTD); break;
    2dbe:	e1 e3       	ldi	r30, 0x31	; 49
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	10 82       	st	Z, r1
    2dc4:	e2 e3       	ldi	r30, 0x32	; 50
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	8f ef       	ldi	r24, 0xFF	; 255
    2dca:	80 83       	st	Z, r24
				default:
					break;
			}
			break;
	}
}
    2dcc:	2c 96       	adiw	r28, 0x0c	; 12
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <DIO_voidSetPortSpecificDirection>:

void DIO_voidSetPortSpecificDirection(u8 Copy_u8PortName, u8 Copy_u8SpecificDirection)
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <DIO_voidSetPortSpecificDirection+0x6>
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <DIO_voidSetPortSpecificDirection+0x8>
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	3c 83       	std	Y+4, r19	; 0x04
    2df6:	2b 83       	std	Y+3, r18	; 0x03
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfc:	81 30       	cpi	r24, 0x01	; 1
    2dfe:	91 05       	cpc	r25, r1
    2e00:	d1 f0       	breq	.+52     	; 0x2e36 <DIO_voidSetPortSpecificDirection+0x58>
    2e02:	2b 81       	ldd	r18, Y+3	; 0x03
    2e04:	3c 81       	ldd	r19, Y+4	; 0x04
    2e06:	22 30       	cpi	r18, 0x02	; 2
    2e08:	31 05       	cpc	r19, r1
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <DIO_voidSetPortSpecificDirection+0x38>
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	61 f0       	breq	.+24     	; 0x2e2c <DIO_voidSetPortSpecificDirection+0x4e>
    2e14:	1e c0       	rjmp	.+60     	; 0x2e52 <DIO_voidSetPortSpecificDirection+0x74>
    2e16:	2b 81       	ldd	r18, Y+3	; 0x03
    2e18:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1a:	22 30       	cpi	r18, 0x02	; 2
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	81 f0       	breq	.+32     	; 0x2e40 <DIO_voidSetPortSpecificDirection+0x62>
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	83 30       	cpi	r24, 0x03	; 3
    2e26:	91 05       	cpc	r25, r1
    2e28:	81 f0       	breq	.+32     	; 0x2e4a <DIO_voidSetPortSpecificDirection+0x6c>
    2e2a:	13 c0       	rjmp	.+38     	; 0x2e52 <DIO_voidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA:
			ASSIGN_REG(DDRA, Copy_u8SpecificDirection);
    2e2c:	ea e3       	ldi	r30, 0x3A	; 58
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	80 83       	st	Z, r24
    2e34:	0e c0       	rjmp	.+28     	; 0x2e52 <DIO_voidSetPortSpecificDirection+0x74>
			break;
		case DIO_PORTB:
			ASSIGN_REG(DDRB, Copy_u8SpecificDirection);
    2e36:	e7 e3       	ldi	r30, 0x37	; 55
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	80 83       	st	Z, r24
    2e3e:	09 c0       	rjmp	.+18     	; 0x2e52 <DIO_voidSetPortSpecificDirection+0x74>
			break;
		case DIO_PORTC:
			ASSIGN_REG(DDRC, Copy_u8SpecificDirection);
    2e40:	e4 e3       	ldi	r30, 0x34	; 52
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	80 83       	st	Z, r24
    2e48:	04 c0       	rjmp	.+8      	; 0x2e52 <DIO_voidSetPortSpecificDirection+0x74>
			break;
		case DIO_PORTD:
			ASSIGN_REG(DDRD, Copy_u8SpecificDirection);
    2e4a:	e1 e3       	ldi	r30, 0x31	; 49
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8Pin, u8 Copy_u8Stat)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	2d 97       	sbiw	r28, 0x0d	; 13
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	6a 83       	std	Y+2, r22	; 0x02
    2e78:	4b 83       	std	Y+3, r20	; 0x03
	//switch on port type
	switch(Copy_u8PortName)
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	3d 87       	std	Y+13, r19	; 0x0d
    2e82:	2c 87       	std	Y+12, r18	; 0x0c
    2e84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e86:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <DIO_voidSetPinDirection+0x30>
    2e8e:	7b c0       	rjmp	.+246    	; 0x2f86 <DIO_voidSetPinDirection+0x126>
    2e90:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e92:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <DIO_voidSetPinDirection+0x44>
    2e9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e9c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	71 f0       	breq	.+28     	; 0x2ebe <DIO_voidSetPinDirection+0x5e>
    2ea2:	9c c1       	rjmp	.+824    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
    2ea4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ea6:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ea8:	22 30       	cpi	r18, 0x02	; 2
    2eaa:	31 05       	cpc	r19, r1
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <DIO_voidSetPinDirection+0x50>
    2eae:	cf c0       	rjmp	.+414    	; 0x304e <DIO_voidSetPinDirection+0x1ee>
    2eb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eb2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <DIO_voidSetPinDirection+0x5c>
    2eba:	2d c1       	rjmp	.+602    	; 0x3116 <DIO_voidSetPinDirection+0x2b6>
    2ebc:	8f c1       	rjmp	.+798    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
	{
		case DIO_PORTA:
            //switch on State type
			switch(Copy_u8Stat)
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	28 2f       	mov	r18, r24
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	3b 87       	std	Y+11, r19	; 0x0b
    2ec6:	2a 87       	std	Y+10, r18	; 0x0a
    2ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eca:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	91 05       	cpc	r25, r1
    2ed0:	f9 f0       	breq	.+62     	; 0x2f10 <DIO_voidSetPinDirection+0xb0>
    2ed2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ed4:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ed6:	22 30       	cpi	r18, 0x02	; 2
    2ed8:	31 05       	cpc	r19, r1
    2eda:	71 f1       	breq	.+92     	; 0x2f38 <DIO_voidSetPinDirection+0xd8>
    2edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ede:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <DIO_voidSetPinDirection+0x86>
    2ee4:	7b c1       	rjmp	.+758    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
			{
				case INPUT: CLEAR_BIT(DDRA, Copy_u8Pin); break;
    2ee6:	aa e3       	ldi	r26, 0x3A	; 58
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	ea e3       	ldi	r30, 0x3A	; 58
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 2e       	mov	r0, r18
    2efe:	02 c0       	rjmp	.+4      	; 0x2f04 <DIO_voidSetPinDirection+0xa4>
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	0a 94       	dec	r0
    2f06:	e2 f7       	brpl	.-8      	; 0x2f00 <DIO_voidSetPinDirection+0xa0>
    2f08:	80 95       	com	r24
    2f0a:	84 23       	and	r24, r20
    2f0c:	8c 93       	st	X, r24
    2f0e:	66 c1       	rjmp	.+716    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
				case OUTPUT:  SET_BIT(DDRA, Copy_u8Pin); break;
    2f10:	aa e3       	ldi	r26, 0x3A	; 58
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ea e3       	ldi	r30, 0x3A	; 58
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	48 2f       	mov	r20, r24
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	02 2e       	mov	r0, r18
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <DIO_voidSetPinDirection+0xce>
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	0a 94       	dec	r0
    2f30:	e2 f7       	brpl	.-8      	; 0x2f2a <DIO_voidSetPinDirection+0xca>
    2f32:	84 2b       	or	r24, r20
    2f34:	8c 93       	st	X, r24
    2f36:	52 c1       	rjmp	.+676    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
                case IN_PULL_UP: CLEAR_BIT(DDRA, Copy_u8Pin); SET_BIT(PORTA, Copy_u8Pin); break;
    2f38:	aa e3       	ldi	r26, 0x3A	; 58
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	ea e3       	ldi	r30, 0x3A	; 58
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	48 2f       	mov	r20, r24
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <DIO_voidSetPinDirection+0xf4>
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	2a 95       	dec	r18
    2f56:	e2 f7       	brpl	.-8      	; 0x2f50 <DIO_voidSetPinDirection+0xf0>
    2f58:	80 95       	com	r24
    2f5a:	84 23       	and	r24, r20
    2f5c:	8c 93       	st	X, r24
    2f5e:	ab e3       	ldi	r26, 0x3B	; 59
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	eb e3       	ldi	r30, 0x3B	; 59
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	48 2f       	mov	r20, r24
    2f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	02 2e       	mov	r0, r18
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <DIO_voidSetPinDirection+0x11c>
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	0a 94       	dec	r0
    2f7e:	e2 f7       	brpl	.-8      	; 0x2f78 <DIO_voidSetPinDirection+0x118>
    2f80:	84 2b       	or	r24, r20
    2f82:	8c 93       	st	X, r24
    2f84:	2b c1       	rjmp	.+598    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
				default:
					break;
			}
			break;
		case DIO_PORTB:
			switch(Copy_u8Stat)
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	39 87       	std	Y+9, r19	; 0x09
    2f8e:	28 87       	std	Y+8, r18	; 0x08
    2f90:	88 85       	ldd	r24, Y+8	; 0x08
    2f92:	99 85       	ldd	r25, Y+9	; 0x09
    2f94:	81 30       	cpi	r24, 0x01	; 1
    2f96:	91 05       	cpc	r25, r1
    2f98:	f9 f0       	breq	.+62     	; 0x2fd8 <DIO_voidSetPinDirection+0x178>
    2f9a:	28 85       	ldd	r18, Y+8	; 0x08
    2f9c:	39 85       	ldd	r19, Y+9	; 0x09
    2f9e:	22 30       	cpi	r18, 0x02	; 2
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	71 f1       	breq	.+92     	; 0x3000 <DIO_voidSetPinDirection+0x1a0>
    2fa4:	88 85       	ldd	r24, Y+8	; 0x08
    2fa6:	99 85       	ldd	r25, Y+9	; 0x09
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	09 f0       	breq	.+2      	; 0x2fae <DIO_voidSetPinDirection+0x14e>
    2fac:	17 c1       	rjmp	.+558    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
			{
				case INPUT: CLEAR_BIT(DDRB, Copy_u8Pin); break;
    2fae:	a7 e3       	ldi	r26, 0x37	; 55
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e7 e3       	ldi	r30, 0x37	; 55
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	48 2f       	mov	r20, r24
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	02 2e       	mov	r0, r18
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <DIO_voidSetPinDirection+0x16c>
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	0a 94       	dec	r0
    2fce:	e2 f7       	brpl	.-8      	; 0x2fc8 <DIO_voidSetPinDirection+0x168>
    2fd0:	80 95       	com	r24
    2fd2:	84 23       	and	r24, r20
    2fd4:	8c 93       	st	X, r24
    2fd6:	02 c1       	rjmp	.+516    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
				case OUTPUT:  SET_BIT(DDRB, Copy_u8Pin); break;
    2fd8:	a7 e3       	ldi	r26, 0x37	; 55
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e7 e3       	ldi	r30, 0x37	; 55
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	48 2f       	mov	r20, r24
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	02 2e       	mov	r0, r18
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <DIO_voidSetPinDirection+0x196>
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	0a 94       	dec	r0
    2ff8:	e2 f7       	brpl	.-8      	; 0x2ff2 <DIO_voidSetPinDirection+0x192>
    2ffa:	84 2b       	or	r24, r20
    2ffc:	8c 93       	st	X, r24
    2ffe:	ee c0       	rjmp	.+476    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
                case IN_PULL_UP: CLEAR_BIT(DDRB, Copy_u8Pin); SET_BIT(PORTB, Copy_u8Pin); break;
    3000:	a7 e3       	ldi	r26, 0x37	; 55
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e7 e3       	ldi	r30, 0x37	; 55
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	48 2f       	mov	r20, r24
    300c:	8a 81       	ldd	r24, Y+2	; 0x02
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	02 c0       	rjmp	.+4      	; 0x301c <DIO_voidSetPinDirection+0x1bc>
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	2a 95       	dec	r18
    301e:	e2 f7       	brpl	.-8      	; 0x3018 <DIO_voidSetPinDirection+0x1b8>
    3020:	80 95       	com	r24
    3022:	84 23       	and	r24, r20
    3024:	8c 93       	st	X, r24
    3026:	a8 e3       	ldi	r26, 0x38	; 56
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e8 e3       	ldi	r30, 0x38	; 56
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	48 2f       	mov	r20, r24
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	02 2e       	mov	r0, r18
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <DIO_voidSetPinDirection+0x1e4>
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	0a 94       	dec	r0
    3046:	e2 f7       	brpl	.-8      	; 0x3040 <DIO_voidSetPinDirection+0x1e0>
    3048:	84 2b       	or	r24, r20
    304a:	8c 93       	st	X, r24
    304c:	c7 c0       	rjmp	.+398    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
				default:
					break;
			}
			break;
		case DIO_PORTC:
			switch(Copy_u8Stat)
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	28 2f       	mov	r18, r24
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	3f 83       	std	Y+7, r19	; 0x07
    3056:	2e 83       	std	Y+6, r18	; 0x06
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	9f 81       	ldd	r25, Y+7	; 0x07
    305c:	81 30       	cpi	r24, 0x01	; 1
    305e:	91 05       	cpc	r25, r1
    3060:	f9 f0       	breq	.+62     	; 0x30a0 <DIO_voidSetPinDirection+0x240>
    3062:	2e 81       	ldd	r18, Y+6	; 0x06
    3064:	3f 81       	ldd	r19, Y+7	; 0x07
    3066:	22 30       	cpi	r18, 0x02	; 2
    3068:	31 05       	cpc	r19, r1
    306a:	71 f1       	breq	.+92     	; 0x30c8 <DIO_voidSetPinDirection+0x268>
    306c:	8e 81       	ldd	r24, Y+6	; 0x06
    306e:	9f 81       	ldd	r25, Y+7	; 0x07
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	09 f0       	breq	.+2      	; 0x3076 <DIO_voidSetPinDirection+0x216>
    3074:	b3 c0       	rjmp	.+358    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
			{
				case INPUT: CLEAR_BIT(DDRC, Copy_u8Pin); break;
    3076:	a4 e3       	ldi	r26, 0x34	; 52
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e4 e3       	ldi	r30, 0x34	; 52
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	48 2f       	mov	r20, r24
    3082:	8a 81       	ldd	r24, Y+2	; 0x02
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	02 2e       	mov	r0, r18
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <DIO_voidSetPinDirection+0x234>
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	0a 94       	dec	r0
    3096:	e2 f7       	brpl	.-8      	; 0x3090 <DIO_voidSetPinDirection+0x230>
    3098:	80 95       	com	r24
    309a:	84 23       	and	r24, r20
    309c:	8c 93       	st	X, r24
    309e:	9e c0       	rjmp	.+316    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
				case OUTPUT:  SET_BIT(DDRC, Copy_u8Pin); break;
    30a0:	a4 e3       	ldi	r26, 0x34	; 52
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e4 e3       	ldi	r30, 0x34	; 52
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	48 2f       	mov	r20, r24
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	02 2e       	mov	r0, r18
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <DIO_voidSetPinDirection+0x25e>
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	0a 94       	dec	r0
    30c0:	e2 f7       	brpl	.-8      	; 0x30ba <DIO_voidSetPinDirection+0x25a>
    30c2:	84 2b       	or	r24, r20
    30c4:	8c 93       	st	X, r24
    30c6:	8a c0       	rjmp	.+276    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
                case IN_PULL_UP: CLEAR_BIT(DDRC, Copy_u8Pin); SET_BIT(PORTC, Copy_u8Pin); break;
    30c8:	a4 e3       	ldi	r26, 0x34	; 52
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e4 e3       	ldi	r30, 0x34	; 52
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	48 2f       	mov	r20, r24
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <DIO_voidSetPinDirection+0x284>
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	2a 95       	dec	r18
    30e6:	e2 f7       	brpl	.-8      	; 0x30e0 <DIO_voidSetPinDirection+0x280>
    30e8:	80 95       	com	r24
    30ea:	84 23       	and	r24, r20
    30ec:	8c 93       	st	X, r24
    30ee:	a5 e3       	ldi	r26, 0x35	; 53
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	e5 e3       	ldi	r30, 0x35	; 53
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	48 2f       	mov	r20, r24
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	02 2e       	mov	r0, r18
    3106:	02 c0       	rjmp	.+4      	; 0x310c <DIO_voidSetPinDirection+0x2ac>
    3108:	88 0f       	add	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	0a 94       	dec	r0
    310e:	e2 f7       	brpl	.-8      	; 0x3108 <DIO_voidSetPinDirection+0x2a8>
    3110:	84 2b       	or	r24, r20
    3112:	8c 93       	st	X, r24
    3114:	63 c0       	rjmp	.+198    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
				default:
					break;
			}
			break;
		case DIO_PORTD:
			switch(Copy_u8Stat)
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	28 2f       	mov	r18, r24
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	3d 83       	std	Y+5, r19	; 0x05
    311e:	2c 83       	std	Y+4, r18	; 0x04
    3120:	8c 81       	ldd	r24, Y+4	; 0x04
    3122:	9d 81       	ldd	r25, Y+5	; 0x05
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	91 05       	cpc	r25, r1
    3128:	f9 f0       	breq	.+62     	; 0x3168 <DIO_voidSetPinDirection+0x308>
    312a:	2c 81       	ldd	r18, Y+4	; 0x04
    312c:	3d 81       	ldd	r19, Y+5	; 0x05
    312e:	22 30       	cpi	r18, 0x02	; 2
    3130:	31 05       	cpc	r19, r1
    3132:	71 f1       	breq	.+92     	; 0x3190 <DIO_voidSetPinDirection+0x330>
    3134:	8c 81       	ldd	r24, Y+4	; 0x04
    3136:	9d 81       	ldd	r25, Y+5	; 0x05
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	09 f0       	breq	.+2      	; 0x313e <DIO_voidSetPinDirection+0x2de>
    313c:	4f c0       	rjmp	.+158    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
			{
				case INPUT: CLEAR_BIT(DDRD, Copy_u8Pin); break;
    313e:	a1 e3       	ldi	r26, 0x31	; 49
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e1 e3       	ldi	r30, 0x31	; 49
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	48 2f       	mov	r20, r24
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	02 2e       	mov	r0, r18
    3156:	02 c0       	rjmp	.+4      	; 0x315c <DIO_voidSetPinDirection+0x2fc>
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	0a 94       	dec	r0
    315e:	e2 f7       	brpl	.-8      	; 0x3158 <DIO_voidSetPinDirection+0x2f8>
    3160:	80 95       	com	r24
    3162:	84 23       	and	r24, r20
    3164:	8c 93       	st	X, r24
    3166:	3a c0       	rjmp	.+116    	; 0x31dc <DIO_voidSetPinDirection+0x37c>
				case OUTPUT:  SET_BIT(DDRD, Copy_u8Pin); break;
    3168:	a1 e3       	ldi	r26, 0x31	; 49
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	e1 e3       	ldi	r30, 0x31	; 49
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	48 2f       	mov	r20, r24
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	28 2f       	mov	r18, r24
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	02 2e       	mov	r0, r18
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <DIO_voidSetPinDirection+0x326>
    3182:	88 0f       	add	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	0a 94       	dec	r0
    3188:	e2 f7       	brpl	.-8      	; 0x3182 <DIO_voidSetPinDirection+0x322>
    318a:	84 2b       	or	r24, r20
    318c:	8c 93       	st	X, r24
    318e:	26 c0       	rjmp	.+76     	; 0x31dc <DIO_voidSetPinDirection+0x37c>
                case IN_PULL_UP: CLEAR_BIT(DDRD, Copy_u8Pin); SET_BIT(PORTD, Copy_u8Pin); break;
    3190:	a1 e3       	ldi	r26, 0x31	; 49
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	e1 e3       	ldi	r30, 0x31	; 49
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	48 2f       	mov	r20, r24
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	28 2f       	mov	r18, r24
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <DIO_voidSetPinDirection+0x34c>
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	2a 95       	dec	r18
    31ae:	e2 f7       	brpl	.-8      	; 0x31a8 <DIO_voidSetPinDirection+0x348>
    31b0:	80 95       	com	r24
    31b2:	84 23       	and	r24, r20
    31b4:	8c 93       	st	X, r24
    31b6:	a2 e3       	ldi	r26, 0x32	; 50
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e2 e3       	ldi	r30, 0x32	; 50
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	48 2f       	mov	r20, r24
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	02 2e       	mov	r0, r18
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <DIO_voidSetPinDirection+0x374>
    31d0:	88 0f       	add	r24, r24
    31d2:	99 1f       	adc	r25, r25
    31d4:	0a 94       	dec	r0
    31d6:	e2 f7       	brpl	.-8      	; 0x31d0 <DIO_voidSetPinDirection+0x370>
    31d8:	84 2b       	or	r24, r20
    31da:	8c 93       	st	X, r24

		default:
			break;
	}

}
    31dc:	2d 96       	adiw	r28, 0x0d	; 13
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <DIO_voidSetPortSpecificValue>:
 * INPUT Args  : PORT Type, Value
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 * */
void DIO_voidSetPortSpecificValue(u8 Copy_u8PortName, u8 Copy_u8SpecificValue)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <DIO_voidSetPortSpecificValue+0x6>
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <DIO_voidSetPortSpecificValue+0x8>
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	3c 83       	std	Y+4, r19	; 0x04
    3206:	2b 83       	std	Y+3, r18	; 0x03
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	9c 81       	ldd	r25, Y+4	; 0x04
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	91 05       	cpc	r25, r1
    3210:	d1 f0       	breq	.+52     	; 0x3246 <DIO_voidSetPortSpecificValue+0x58>
    3212:	2b 81       	ldd	r18, Y+3	; 0x03
    3214:	3c 81       	ldd	r19, Y+4	; 0x04
    3216:	22 30       	cpi	r18, 0x02	; 2
    3218:	31 05       	cpc	r19, r1
    321a:	2c f4       	brge	.+10     	; 0x3226 <DIO_voidSetPortSpecificValue+0x38>
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	9c 81       	ldd	r25, Y+4	; 0x04
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	61 f0       	breq	.+24     	; 0x323c <DIO_voidSetPortSpecificValue+0x4e>
    3224:	1e c0       	rjmp	.+60     	; 0x3262 <DIO_voidSetPortSpecificValue+0x74>
    3226:	2b 81       	ldd	r18, Y+3	; 0x03
    3228:	3c 81       	ldd	r19, Y+4	; 0x04
    322a:	22 30       	cpi	r18, 0x02	; 2
    322c:	31 05       	cpc	r19, r1
    322e:	81 f0       	breq	.+32     	; 0x3250 <DIO_voidSetPortSpecificValue+0x62>
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	83 30       	cpi	r24, 0x03	; 3
    3236:	91 05       	cpc	r25, r1
    3238:	81 f0       	breq	.+32     	; 0x325a <DIO_voidSetPortSpecificValue+0x6c>
    323a:	13 c0       	rjmp	.+38     	; 0x3262 <DIO_voidSetPortSpecificValue+0x74>
	{
		case DIO_PORTA: ASSIGN_REG(PORTA, Copy_u8SpecificValue); break;
    323c:	eb e3       	ldi	r30, 0x3B	; 59
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	80 83       	st	Z, r24
    3244:	0e c0       	rjmp	.+28     	; 0x3262 <DIO_voidSetPortSpecificValue+0x74>
		case DIO_PORTB: ASSIGN_REG(PORTB, Copy_u8SpecificValue); break;
    3246:	e8 e3       	ldi	r30, 0x38	; 56
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	80 83       	st	Z, r24
    324e:	09 c0       	rjmp	.+18     	; 0x3262 <DIO_voidSetPortSpecificValue+0x74>
		case DIO_PORTC: ASSIGN_REG(PORTC, Copy_u8SpecificValue); break;
    3250:	e5 e3       	ldi	r30, 0x35	; 53
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	80 83       	st	Z, r24
    3258:	04 c0       	rjmp	.+8      	; 0x3262 <DIO_voidSetPortSpecificValue+0x74>
		case DIO_PORTD: ASSIGN_REG(PORTD, Copy_u8SpecificValue); break;
    325a:	e2 e3       	ldi	r30, 0x32	; 50
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	80 83       	st	Z, r24
		default: break;
	}

}
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <DIO_voidSetBitsInPort>:

void DIO_voidSetBitsInPort(u8 Copy_u8PortName, u8 Copy_u8SpecificValue, u8 Copy_u8Mask)
{
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	00 d0       	rcall	.+0      	; 0x3276 <DIO_voidSetBitsInPort+0x6>
    3276:	00 d0       	rcall	.+0      	; 0x3278 <DIO_voidSetBitsInPort+0x8>
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	6a 83       	std	Y+2, r22	; 0x02
    3282:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8PortName)
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	28 2f       	mov	r18, r24
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	3d 83       	std	Y+5, r19	; 0x05
    328c:	2c 83       	std	Y+4, r18	; 0x04
    328e:	8c 81       	ldd	r24, Y+4	; 0x04
    3290:	9d 81       	ldd	r25, Y+5	; 0x05
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	91 05       	cpc	r25, r1
    3296:	59 f1       	breq	.+86     	; 0x32ee <DIO_voidSetBitsInPort+0x7e>
    3298:	2c 81       	ldd	r18, Y+4	; 0x04
    329a:	3d 81       	ldd	r19, Y+5	; 0x05
    329c:	22 30       	cpi	r18, 0x02	; 2
    329e:	31 05       	cpc	r19, r1
    32a0:	2c f4       	brge	.+10     	; 0x32ac <DIO_voidSetBitsInPort+0x3c>
    32a2:	8c 81       	ldd	r24, Y+4	; 0x04
    32a4:	9d 81       	ldd	r25, Y+5	; 0x05
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	69 f0       	breq	.+26     	; 0x32c4 <DIO_voidSetBitsInPort+0x54>
    32aa:	5f c0       	rjmp	.+190    	; 0x336a <DIO_voidSetBitsInPort+0xfa>
    32ac:	2c 81       	ldd	r18, Y+4	; 0x04
    32ae:	3d 81       	ldd	r19, Y+5	; 0x05
    32b0:	22 30       	cpi	r18, 0x02	; 2
    32b2:	31 05       	cpc	r19, r1
    32b4:	89 f1       	breq	.+98     	; 0x3318 <DIO_voidSetBitsInPort+0xa8>
    32b6:	8c 81       	ldd	r24, Y+4	; 0x04
    32b8:	9d 81       	ldd	r25, Y+5	; 0x05
    32ba:	83 30       	cpi	r24, 0x03	; 3
    32bc:	91 05       	cpc	r25, r1
    32be:	09 f4       	brne	.+2      	; 0x32c2 <DIO_voidSetBitsInPort+0x52>
    32c0:	40 c0       	rjmp	.+128    	; 0x3342 <DIO_voidSetBitsInPort+0xd2>
    32c2:	53 c0       	rjmp	.+166    	; 0x336a <DIO_voidSetBitsInPort+0xfa>
	{
		case DIO_PORTA: 
			CLEAR_BITS_REG(PORTA, Copy_u8Mask);
    32c4:	ab e3       	ldi	r26, 0x3B	; 59
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	eb e3       	ldi	r30, 0x3B	; 59
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	98 2f       	mov	r25, r24
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	80 95       	com	r24
    32d4:	89 23       	and	r24, r25
    32d6:	8c 93       	st	X, r24
			SET_BITS_REG(PORTA, (Copy_u8SpecificValue & Copy_u8Mask));
    32d8:	ab e3       	ldi	r26, 0x3B	; 59
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	eb e3       	ldi	r30, 0x3B	; 59
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	20 81       	ld	r18, Z
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	89 23       	and	r24, r25
    32e8:	82 2b       	or	r24, r18
    32ea:	8c 93       	st	X, r24
    32ec:	3e c0       	rjmp	.+124    	; 0x336a <DIO_voidSetBitsInPort+0xfa>
			break;
		case DIO_PORTB: 
			CLEAR_BITS_REG(PORTB, Copy_u8Mask);
    32ee:	a8 e3       	ldi	r26, 0x38	; 56
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	e8 e3       	ldi	r30, 0x38	; 56
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	98 2f       	mov	r25, r24
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	80 95       	com	r24
    32fe:	89 23       	and	r24, r25
    3300:	8c 93       	st	X, r24
			SET_BITS_REG(PORTB, (Copy_u8SpecificValue & Copy_u8Mask));
    3302:	a8 e3       	ldi	r26, 0x38	; 56
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	e8 e3       	ldi	r30, 0x38	; 56
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	20 81       	ld	r18, Z
    330c:	9a 81       	ldd	r25, Y+2	; 0x02
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	89 23       	and	r24, r25
    3312:	82 2b       	or	r24, r18
    3314:	8c 93       	st	X, r24
    3316:	29 c0       	rjmp	.+82     	; 0x336a <DIO_voidSetBitsInPort+0xfa>
			break;
		case DIO_PORTC:
			CLEAR_BITS_REG(PORTC, Copy_u8Mask);
    3318:	a5 e3       	ldi	r26, 0x35	; 53
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e5 e3       	ldi	r30, 0x35	; 53
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	98 2f       	mov	r25, r24
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	80 95       	com	r24
    3328:	89 23       	and	r24, r25
    332a:	8c 93       	st	X, r24
			SET_BITS_REG(PORTC, (Copy_u8SpecificValue & Copy_u8Mask));
    332c:	a5 e3       	ldi	r26, 0x35	; 53
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	e5 e3       	ldi	r30, 0x35	; 53
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	20 81       	ld	r18, Z
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	89 23       	and	r24, r25
    333c:	82 2b       	or	r24, r18
    333e:	8c 93       	st	X, r24
    3340:	14 c0       	rjmp	.+40     	; 0x336a <DIO_voidSetBitsInPort+0xfa>
			break;
		case DIO_PORTD:
			CLEAR_BITS_REG(PORTD, Copy_u8Mask);
    3342:	a2 e3       	ldi	r26, 0x32	; 50
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e2 e3       	ldi	r30, 0x32	; 50
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	98 2f       	mov	r25, r24
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	80 95       	com	r24
    3352:	89 23       	and	r24, r25
    3354:	8c 93       	st	X, r24
			SET_BITS_REG(PORTD, (Copy_u8SpecificValue & Copy_u8Mask));
    3356:	a2 e3       	ldi	r26, 0x32	; 50
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e2 e3       	ldi	r30, 0x32	; 50
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	20 81       	ld	r18, Z
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	89 23       	and	r24, r25
    3366:	82 2b       	or	r24, r18
    3368:	8c 93       	st	X, r24
			break;
		default: 
			break;
	}
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <DIO_u8ReadPort>:
 * INPUT Args  : PORT Type
 * RETURN      : Value Of Port
 * **********************************************************************
 * */
u8 DIO_u8ReadPort(u8 Copy_u8PortName)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	00 d0       	rcall	.+0      	; 0x3380 <DIO_u8ReadPort+0x6>
    3380:	00 d0       	rcall	.+0      	; 0x3382 <DIO_u8ReadPort+0x8>
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortName)
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	28 2f       	mov	r18, r24
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	3c 83       	std	Y+4, r19	; 0x04
    3390:	2b 83       	std	Y+3, r18	; 0x03
    3392:	8b 81       	ldd	r24, Y+3	; 0x03
    3394:	9c 81       	ldd	r25, Y+4	; 0x04
    3396:	81 30       	cpi	r24, 0x01	; 1
    3398:	91 05       	cpc	r25, r1
    339a:	d1 f0       	breq	.+52     	; 0x33d0 <DIO_u8ReadPort+0x56>
    339c:	2b 81       	ldd	r18, Y+3	; 0x03
    339e:	3c 81       	ldd	r19, Y+4	; 0x04
    33a0:	22 30       	cpi	r18, 0x02	; 2
    33a2:	31 05       	cpc	r19, r1
    33a4:	2c f4       	brge	.+10     	; 0x33b0 <DIO_u8ReadPort+0x36>
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	61 f0       	breq	.+24     	; 0x33c6 <DIO_u8ReadPort+0x4c>
    33ae:	1f c0       	rjmp	.+62     	; 0x33ee <DIO_u8ReadPort+0x74>
    33b0:	2b 81       	ldd	r18, Y+3	; 0x03
    33b2:	3c 81       	ldd	r19, Y+4	; 0x04
    33b4:	22 30       	cpi	r18, 0x02	; 2
    33b6:	31 05       	cpc	r19, r1
    33b8:	81 f0       	breq	.+32     	; 0x33da <DIO_u8ReadPort+0x60>
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	9c 81       	ldd	r25, Y+4	; 0x04
    33be:	83 30       	cpi	r24, 0x03	; 3
    33c0:	91 05       	cpc	r25, r1
    33c2:	81 f0       	breq	.+32     	; 0x33e4 <DIO_u8ReadPort+0x6a>
    33c4:	14 c0       	rjmp	.+40     	; 0x33ee <DIO_u8ReadPort+0x74>
	{
		case DIO_PORTA:
			return PINA;
    33c6:	e9 e3       	ldi	r30, 0x39	; 57
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	90 81       	ld	r25, Z
    33cc:	9a 83       	std	Y+2, r25	; 0x02
    33ce:	10 c0       	rjmp	.+32     	; 0x33f0 <DIO_u8ReadPort+0x76>
			break;
		case DIO_PORTB:
			return PINB;
    33d0:	e6 e3       	ldi	r30, 0x36	; 54
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	20 81       	ld	r18, Z
    33d6:	2a 83       	std	Y+2, r18	; 0x02
    33d8:	0b c0       	rjmp	.+22     	; 0x33f0 <DIO_u8ReadPort+0x76>
			break;
		case DIO_PORTC:
			return PINC;
    33da:	e3 e3       	ldi	r30, 0x33	; 51
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	30 81       	ld	r19, Z
    33e0:	3a 83       	std	Y+2, r19	; 0x02
    33e2:	06 c0       	rjmp	.+12     	; 0x33f0 <DIO_u8ReadPort+0x76>
			break;
		case DIO_PORTD:
			return PIND;
    33e4:	e0 e3       	ldi	r30, 0x30	; 48
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	8a 83       	std	Y+2, r24	; 0x02
    33ec:	01 c0       	rjmp	.+2      	; 0x33f0 <DIO_u8ReadPort+0x76>
			break;
		default:
			return 0x00;
    33ee:	1a 82       	std	Y+2, r1	; 0x02
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
			break;
	}
}
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	08 95       	ret

00003400 <DIO_voidWritePin>:
 * INPUT Args  : PORT Type, Pin Number In Port, Value
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 * */
void DIO_voidWritePin(u8 Copy_u8PortName, u8 Copy_u8Pin, u8 Copy_u8Stat)
{
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    3408:	2d 97       	sbiw	r28, 0x0d	; 13
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	6a 83       	std	Y+2, r22	; 0x02
    3418:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	3d 87       	std	Y+13, r19	; 0x0d
    3422:	2c 87       	std	Y+12, r18	; 0x0c
    3424:	8c 85       	ldd	r24, Y+12	; 0x0c
    3426:	9d 85       	ldd	r25, Y+13	; 0x0d
    3428:	81 30       	cpi	r24, 0x01	; 1
    342a:	91 05       	cpc	r25, r1
    342c:	09 f4       	brne	.+2      	; 0x3430 <DIO_voidWritePin+0x30>
    342e:	4f c0       	rjmp	.+158    	; 0x34ce <DIO_voidWritePin+0xce>
    3430:	2c 85       	ldd	r18, Y+12	; 0x0c
    3432:	3d 85       	ldd	r19, Y+13	; 0x0d
    3434:	22 30       	cpi	r18, 0x02	; 2
    3436:	31 05       	cpc	r19, r1
    3438:	2c f4       	brge	.+10     	; 0x3444 <DIO_voidWritePin+0x44>
    343a:	8c 85       	ldd	r24, Y+12	; 0x0c
    343c:	9d 85       	ldd	r25, Y+13	; 0x0d
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	71 f0       	breq	.+28     	; 0x345e <DIO_voidWritePin+0x5e>
    3442:	ec c0       	rjmp	.+472    	; 0x361c <DIO_voidWritePin+0x21c>
    3444:	2c 85       	ldd	r18, Y+12	; 0x0c
    3446:	3d 85       	ldd	r19, Y+13	; 0x0d
    3448:	22 30       	cpi	r18, 0x02	; 2
    344a:	31 05       	cpc	r19, r1
    344c:	09 f4       	brne	.+2      	; 0x3450 <DIO_voidWritePin+0x50>
    344e:	77 c0       	rjmp	.+238    	; 0x353e <DIO_voidWritePin+0x13e>
    3450:	8c 85       	ldd	r24, Y+12	; 0x0c
    3452:	9d 85       	ldd	r25, Y+13	; 0x0d
    3454:	83 30       	cpi	r24, 0x03	; 3
    3456:	91 05       	cpc	r25, r1
    3458:	09 f4       	brne	.+2      	; 0x345c <DIO_voidWritePin+0x5c>
    345a:	a9 c0       	rjmp	.+338    	; 0x35ae <DIO_voidWritePin+0x1ae>
    345c:	df c0       	rjmp	.+446    	; 0x361c <DIO_voidWritePin+0x21c>
	{
		case DIO_PORTA:
			switch(Copy_u8Stat)
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	28 2f       	mov	r18, r24
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	3b 87       	std	Y+11, r19	; 0x0b
    3466:	2a 87       	std	Y+10, r18	; 0x0a
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	9b 85       	ldd	r25, Y+11	; 0x0b
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	31 f0       	breq	.+12     	; 0x347c <DIO_voidWritePin+0x7c>
    3470:	2a 85       	ldd	r18, Y+10	; 0x0a
    3472:	3b 85       	ldd	r19, Y+11	; 0x0b
    3474:	21 30       	cpi	r18, 0x01	; 1
    3476:	31 05       	cpc	r19, r1
    3478:	b1 f0       	breq	.+44     	; 0x34a6 <DIO_voidWritePin+0xa6>
    347a:	d0 c0       	rjmp	.+416    	; 0x361c <DIO_voidWritePin+0x21c>
			{
				case LOW: CLEAR_BIT(PORTA, Copy_u8Pin); break;
    347c:	ab e3       	ldi	r26, 0x3B	; 59
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	eb e3       	ldi	r30, 0x3B	; 59
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	48 2f       	mov	r20, r24
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	28 2f       	mov	r18, r24
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	02 2e       	mov	r0, r18
    3494:	02 c0       	rjmp	.+4      	; 0x349a <DIO_voidWritePin+0x9a>
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	0a 94       	dec	r0
    349c:	e2 f7       	brpl	.-8      	; 0x3496 <DIO_voidWritePin+0x96>
    349e:	80 95       	com	r24
    34a0:	84 23       	and	r24, r20
    34a2:	8c 93       	st	X, r24
    34a4:	bb c0       	rjmp	.+374    	; 0x361c <DIO_voidWritePin+0x21c>
				case HIGH:  SET_BIT(PORTA, Copy_u8Pin); break;
    34a6:	ab e3       	ldi	r26, 0x3B	; 59
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	eb e3       	ldi	r30, 0x3B	; 59
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	48 2f       	mov	r20, r24
    34b2:	8a 81       	ldd	r24, Y+2	; 0x02
    34b4:	28 2f       	mov	r18, r24
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	02 2e       	mov	r0, r18
    34be:	02 c0       	rjmp	.+4      	; 0x34c4 <DIO_voidWritePin+0xc4>
    34c0:	88 0f       	add	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	0a 94       	dec	r0
    34c6:	e2 f7       	brpl	.-8      	; 0x34c0 <DIO_voidWritePin+0xc0>
    34c8:	84 2b       	or	r24, r20
    34ca:	8c 93       	st	X, r24
    34cc:	a7 c0       	rjmp	.+334    	; 0x361c <DIO_voidWritePin+0x21c>
				default: break;
			}
			break;
		case DIO_PORTB:
			switch(Copy_u8Stat)
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	39 87       	std	Y+9, r19	; 0x09
    34d6:	28 87       	std	Y+8, r18	; 0x08
    34d8:	88 85       	ldd	r24, Y+8	; 0x08
    34da:	99 85       	ldd	r25, Y+9	; 0x09
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	31 f0       	breq	.+12     	; 0x34ec <DIO_voidWritePin+0xec>
    34e0:	28 85       	ldd	r18, Y+8	; 0x08
    34e2:	39 85       	ldd	r19, Y+9	; 0x09
    34e4:	21 30       	cpi	r18, 0x01	; 1
    34e6:	31 05       	cpc	r19, r1
    34e8:	b1 f0       	breq	.+44     	; 0x3516 <DIO_voidWritePin+0x116>
    34ea:	98 c0       	rjmp	.+304    	; 0x361c <DIO_voidWritePin+0x21c>
			{
				case LOW: CLEAR_BIT(PORTB, Copy_u8Pin); break;
    34ec:	a8 e3       	ldi	r26, 0x38	; 56
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	e8 e3       	ldi	r30, 0x38	; 56
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	48 2f       	mov	r20, r24
    34f8:	8a 81       	ldd	r24, Y+2	; 0x02
    34fa:	28 2f       	mov	r18, r24
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	02 2e       	mov	r0, r18
    3504:	02 c0       	rjmp	.+4      	; 0x350a <DIO_voidWritePin+0x10a>
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	0a 94       	dec	r0
    350c:	e2 f7       	brpl	.-8      	; 0x3506 <DIO_voidWritePin+0x106>
    350e:	80 95       	com	r24
    3510:	84 23       	and	r24, r20
    3512:	8c 93       	st	X, r24
    3514:	83 c0       	rjmp	.+262    	; 0x361c <DIO_voidWritePin+0x21c>
				case HIGH:  SET_BIT(PORTB, Copy_u8Pin); break;
    3516:	a8 e3       	ldi	r26, 0x38	; 56
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e8 e3       	ldi	r30, 0x38	; 56
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	48 2f       	mov	r20, r24
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	02 2e       	mov	r0, r18
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <DIO_voidWritePin+0x134>
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	0a 94       	dec	r0
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <DIO_voidWritePin+0x130>
    3538:	84 2b       	or	r24, r20
    353a:	8c 93       	st	X, r24
    353c:	6f c0       	rjmp	.+222    	; 0x361c <DIO_voidWritePin+0x21c>
				default: break;
			}
			break;
		case DIO_PORTC:
			switch(Copy_u8Stat)
    353e:	8b 81       	ldd	r24, Y+3	; 0x03
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	3f 83       	std	Y+7, r19	; 0x07
    3546:	2e 83       	std	Y+6, r18	; 0x06
    3548:	8e 81       	ldd	r24, Y+6	; 0x06
    354a:	9f 81       	ldd	r25, Y+7	; 0x07
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	31 f0       	breq	.+12     	; 0x355c <DIO_voidWritePin+0x15c>
    3550:	2e 81       	ldd	r18, Y+6	; 0x06
    3552:	3f 81       	ldd	r19, Y+7	; 0x07
    3554:	21 30       	cpi	r18, 0x01	; 1
    3556:	31 05       	cpc	r19, r1
    3558:	b1 f0       	breq	.+44     	; 0x3586 <DIO_voidWritePin+0x186>
    355a:	60 c0       	rjmp	.+192    	; 0x361c <DIO_voidWritePin+0x21c>
			{
				case LOW: CLEAR_BIT(PORTC, Copy_u8Pin); break;
    355c:	a5 e3       	ldi	r26, 0x35	; 53
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	e5 e3       	ldi	r30, 0x35	; 53
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	48 2f       	mov	r20, r24
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	28 2f       	mov	r18, r24
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	02 2e       	mov	r0, r18
    3574:	02 c0       	rjmp	.+4      	; 0x357a <DIO_voidWritePin+0x17a>
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	0a 94       	dec	r0
    357c:	e2 f7       	brpl	.-8      	; 0x3576 <DIO_voidWritePin+0x176>
    357e:	80 95       	com	r24
    3580:	84 23       	and	r24, r20
    3582:	8c 93       	st	X, r24
    3584:	4b c0       	rjmp	.+150    	; 0x361c <DIO_voidWritePin+0x21c>
				case HIGH:  SET_BIT(PORTC, Copy_u8Pin); break;
    3586:	a5 e3       	ldi	r26, 0x35	; 53
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	e5 e3       	ldi	r30, 0x35	; 53
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	48 2f       	mov	r20, r24
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	02 2e       	mov	r0, r18
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <DIO_voidWritePin+0x1a4>
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	0a 94       	dec	r0
    35a6:	e2 f7       	brpl	.-8      	; 0x35a0 <DIO_voidWritePin+0x1a0>
    35a8:	84 2b       	or	r24, r20
    35aa:	8c 93       	st	X, r24
    35ac:	37 c0       	rjmp	.+110    	; 0x361c <DIO_voidWritePin+0x21c>
				default: break;
			}
			break;
		case DIO_PORTD:
			switch(Copy_u8Stat)
    35ae:	8b 81       	ldd	r24, Y+3	; 0x03
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	3d 83       	std	Y+5, r19	; 0x05
    35b6:	2c 83       	std	Y+4, r18	; 0x04
    35b8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ba:	9d 81       	ldd	r25, Y+5	; 0x05
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	31 f0       	breq	.+12     	; 0x35cc <DIO_voidWritePin+0x1cc>
    35c0:	2c 81       	ldd	r18, Y+4	; 0x04
    35c2:	3d 81       	ldd	r19, Y+5	; 0x05
    35c4:	21 30       	cpi	r18, 0x01	; 1
    35c6:	31 05       	cpc	r19, r1
    35c8:	b1 f0       	breq	.+44     	; 0x35f6 <DIO_voidWritePin+0x1f6>
    35ca:	28 c0       	rjmp	.+80     	; 0x361c <DIO_voidWritePin+0x21c>
			{
				case LOW: CLEAR_BIT(PORTD, Copy_u8Pin); break;
    35cc:	a2 e3       	ldi	r26, 0x32	; 50
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e2 e3       	ldi	r30, 0x32	; 50
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	48 2f       	mov	r20, r24
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	28 2f       	mov	r18, r24
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	02 2e       	mov	r0, r18
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <DIO_voidWritePin+0x1ea>
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	0a 94       	dec	r0
    35ec:	e2 f7       	brpl	.-8      	; 0x35e6 <DIO_voidWritePin+0x1e6>
    35ee:	80 95       	com	r24
    35f0:	84 23       	and	r24, r20
    35f2:	8c 93       	st	X, r24
    35f4:	13 c0       	rjmp	.+38     	; 0x361c <DIO_voidWritePin+0x21c>
				case HIGH:  SET_BIT(PORTD, Copy_u8Pin); break;
    35f6:	a2 e3       	ldi	r26, 0x32	; 50
    35f8:	b0 e0       	ldi	r27, 0x00	; 0
    35fa:	e2 e3       	ldi	r30, 0x32	; 50
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	48 2f       	mov	r20, r24
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	28 2f       	mov	r18, r24
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	02 2e       	mov	r0, r18
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <DIO_voidWritePin+0x214>
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	0a 94       	dec	r0
    3616:	e2 f7       	brpl	.-8      	; 0x3610 <DIO_voidWritePin+0x210>
    3618:	84 2b       	or	r24, r20
    361a:	8c 93       	st	X, r24
				default: break;
			}
			break;
	}
}
    361c:	2d 96       	adiw	r28, 0x0d	; 13
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <DIO_voidReadPin>:
 * INPUT Args  : PORT Type, Pin Number In Port
 * RETURN      : HIGH OR LOW
 * **********************************************************************
 * */
u8 DIO_voidReadPin(u8 Copy_u8PortName, u8 Copy_u8Pin)
{
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	00 d0       	rcall	.+0      	; 0x3634 <DIO_voidReadPin+0x6>
    3634:	00 d0       	rcall	.+0      	; 0x3636 <DIO_voidReadPin+0x8>
    3636:	0f 92       	push	r0
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	3d 83       	std	Y+5, r19	; 0x05
    3648:	2c 83       	std	Y+4, r18	; 0x04
    364a:	4c 81       	ldd	r20, Y+4	; 0x04
    364c:	5d 81       	ldd	r21, Y+5	; 0x05
    364e:	41 30       	cpi	r20, 0x01	; 1
    3650:	51 05       	cpc	r21, r1
    3652:	49 f1       	breq	.+82     	; 0x36a6 <DIO_voidReadPin+0x78>
    3654:	8c 81       	ldd	r24, Y+4	; 0x04
    3656:	9d 81       	ldd	r25, Y+5	; 0x05
    3658:	82 30       	cpi	r24, 0x02	; 2
    365a:	91 05       	cpc	r25, r1
    365c:	34 f4       	brge	.+12     	; 0x366a <DIO_voidReadPin+0x3c>
    365e:	2c 81       	ldd	r18, Y+4	; 0x04
    3660:	3d 81       	ldd	r19, Y+5	; 0x05
    3662:	21 15       	cp	r18, r1
    3664:	31 05       	cpc	r19, r1
    3666:	61 f0       	breq	.+24     	; 0x3680 <DIO_voidReadPin+0x52>
    3668:	57 c0       	rjmp	.+174    	; 0x3718 <DIO_voidReadPin+0xea>
    366a:	4c 81       	ldd	r20, Y+4	; 0x04
    366c:	5d 81       	ldd	r21, Y+5	; 0x05
    366e:	42 30       	cpi	r20, 0x02	; 2
    3670:	51 05       	cpc	r21, r1
    3672:	61 f1       	breq	.+88     	; 0x36cc <DIO_voidReadPin+0x9e>
    3674:	8c 81       	ldd	r24, Y+4	; 0x04
    3676:	9d 81       	ldd	r25, Y+5	; 0x05
    3678:	83 30       	cpi	r24, 0x03	; 3
    367a:	91 05       	cpc	r25, r1
    367c:	d1 f1       	breq	.+116    	; 0x36f2 <DIO_voidReadPin+0xc4>
    367e:	4c c0       	rjmp	.+152    	; 0x3718 <DIO_voidReadPin+0xea>
	{
		case DIO_PORTA:
			return GET_BIT(PINA,Copy_u8Pin);
    3680:	e9 e3       	ldi	r30, 0x39	; 57
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	28 2f       	mov	r18, r24
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	8a 81       	ldd	r24, Y+2	; 0x02
    368c:	88 2f       	mov	r24, r24
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	a9 01       	movw	r20, r18
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <DIO_voidReadPin+0x6a>
    3694:	55 95       	asr	r21
    3696:	47 95       	ror	r20
    3698:	8a 95       	dec	r24
    369a:	e2 f7       	brpl	.-8      	; 0x3694 <DIO_voidReadPin+0x66>
    369c:	ca 01       	movw	r24, r20
    369e:	58 2f       	mov	r21, r24
    36a0:	51 70       	andi	r21, 0x01	; 1
    36a2:	5b 83       	std	Y+3, r21	; 0x03
    36a4:	3a c0       	rjmp	.+116    	; 0x371a <DIO_voidReadPin+0xec>
			break;
		case DIO_PORTB:
			return GET_BIT(PINB,Copy_u8Pin);
    36a6:	e6 e3       	ldi	r30, 0x36	; 54
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	28 2f       	mov	r18, r24
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	88 2f       	mov	r24, r24
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	a9 01       	movw	r20, r18
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <DIO_voidReadPin+0x90>
    36ba:	55 95       	asr	r21
    36bc:	47 95       	ror	r20
    36be:	8a 95       	dec	r24
    36c0:	e2 f7       	brpl	.-8      	; 0x36ba <DIO_voidReadPin+0x8c>
    36c2:	ca 01       	movw	r24, r20
    36c4:	58 2f       	mov	r21, r24
    36c6:	51 70       	andi	r21, 0x01	; 1
    36c8:	5b 83       	std	Y+3, r21	; 0x03
    36ca:	27 c0       	rjmp	.+78     	; 0x371a <DIO_voidReadPin+0xec>
			break;
		case DIO_PORTC:
			return GET_BIT(PINC,Copy_u8Pin);
    36cc:	e3 e3       	ldi	r30, 0x33	; 51
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	88 2f       	mov	r24, r24
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	a9 01       	movw	r20, r18
    36de:	02 c0       	rjmp	.+4      	; 0x36e4 <DIO_voidReadPin+0xb6>
    36e0:	55 95       	asr	r21
    36e2:	47 95       	ror	r20
    36e4:	8a 95       	dec	r24
    36e6:	e2 f7       	brpl	.-8      	; 0x36e0 <DIO_voidReadPin+0xb2>
    36e8:	ca 01       	movw	r24, r20
    36ea:	58 2f       	mov	r21, r24
    36ec:	51 70       	andi	r21, 0x01	; 1
    36ee:	5b 83       	std	Y+3, r21	; 0x03
    36f0:	14 c0       	rjmp	.+40     	; 0x371a <DIO_voidReadPin+0xec>
			break;
		case DIO_PORTD:
			return GET_BIT(PIND,Copy_u8Pin);
    36f2:	e0 e3       	ldi	r30, 0x30	; 48
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	80 81       	ld	r24, Z
    36f8:	28 2f       	mov	r18, r24
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	88 2f       	mov	r24, r24
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	a9 01       	movw	r20, r18
    3704:	02 c0       	rjmp	.+4      	; 0x370a <DIO_voidReadPin+0xdc>
    3706:	55 95       	asr	r21
    3708:	47 95       	ror	r20
    370a:	8a 95       	dec	r24
    370c:	e2 f7       	brpl	.-8      	; 0x3706 <DIO_voidReadPin+0xd8>
    370e:	ca 01       	movw	r24, r20
    3710:	58 2f       	mov	r21, r24
    3712:	51 70       	andi	r21, 0x01	; 1
    3714:	5b 83       	std	Y+3, r21	; 0x03
    3716:	01 c0       	rjmp	.+2      	; 0x371a <DIO_voidReadPin+0xec>
			break;
		default:
			return 0x00;
    3718:	1b 82       	std	Y+3, r1	; 0x03
    371a:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
	}
}
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <DIO_voidTogglePin>:
 * INPUT Args  : PORT Type, Pin Number In Port
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 * */
void DIO_voidTogglePin(u8 Copy_u8PortName, u8 Copy_u8Pin)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	00 d0       	rcall	.+0      	; 0x3732 <DIO_voidTogglePin+0x6>
    3732:	00 d0       	rcall	.+0      	; 0x3734 <DIO_voidTogglePin+0x8>
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	28 2f       	mov	r18, r24
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	3c 83       	std	Y+4, r19	; 0x04
    3744:	2b 83       	std	Y+3, r18	; 0x03
    3746:	8b 81       	ldd	r24, Y+3	; 0x03
    3748:	9c 81       	ldd	r25, Y+4	; 0x04
    374a:	81 30       	cpi	r24, 0x01	; 1
    374c:	91 05       	cpc	r25, r1
    374e:	49 f1       	breq	.+82     	; 0x37a2 <DIO_voidTogglePin+0x76>
    3750:	2b 81       	ldd	r18, Y+3	; 0x03
    3752:	3c 81       	ldd	r19, Y+4	; 0x04
    3754:	22 30       	cpi	r18, 0x02	; 2
    3756:	31 05       	cpc	r19, r1
    3758:	2c f4       	brge	.+10     	; 0x3764 <DIO_voidTogglePin+0x38>
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	9c 81       	ldd	r25, Y+4	; 0x04
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	61 f0       	breq	.+24     	; 0x377a <DIO_voidTogglePin+0x4e>
    3762:	5a c0       	rjmp	.+180    	; 0x3818 <DIO_voidTogglePin+0xec>
    3764:	2b 81       	ldd	r18, Y+3	; 0x03
    3766:	3c 81       	ldd	r19, Y+4	; 0x04
    3768:	22 30       	cpi	r18, 0x02	; 2
    376a:	31 05       	cpc	r19, r1
    376c:	71 f1       	breq	.+92     	; 0x37ca <DIO_voidTogglePin+0x9e>
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	9c 81       	ldd	r25, Y+4	; 0x04
    3772:	83 30       	cpi	r24, 0x03	; 3
    3774:	91 05       	cpc	r25, r1
    3776:	e9 f1       	breq	.+122    	; 0x37f2 <DIO_voidTogglePin+0xc6>
    3778:	4f c0       	rjmp	.+158    	; 0x3818 <DIO_voidTogglePin+0xec>
	{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8Pin);
    377a:	ab e3       	ldi	r26, 0x3B	; 59
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	eb e3       	ldi	r30, 0x3B	; 59
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	80 81       	ld	r24, Z
    3784:	48 2f       	mov	r20, r24
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	28 2f       	mov	r18, r24
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	02 2e       	mov	r0, r18
    3792:	02 c0       	rjmp	.+4      	; 0x3798 <DIO_voidTogglePin+0x6c>
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	0a 94       	dec	r0
    379a:	e2 f7       	brpl	.-8      	; 0x3794 <DIO_voidTogglePin+0x68>
    379c:	84 27       	eor	r24, r20
    379e:	8c 93       	st	X, r24
    37a0:	3b c0       	rjmp	.+118    	; 0x3818 <DIO_voidTogglePin+0xec>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8Pin);
    37a2:	a8 e3       	ldi	r26, 0x38	; 56
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e8 e3       	ldi	r30, 0x38	; 56
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	48 2f       	mov	r20, r24
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	28 2f       	mov	r18, r24
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	02 2e       	mov	r0, r18
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <DIO_voidTogglePin+0x94>
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	0a 94       	dec	r0
    37c2:	e2 f7       	brpl	.-8      	; 0x37bc <DIO_voidTogglePin+0x90>
    37c4:	84 27       	eor	r24, r20
    37c6:	8c 93       	st	X, r24
    37c8:	27 c0       	rjmp	.+78     	; 0x3818 <DIO_voidTogglePin+0xec>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8Pin);
    37ca:	a5 e3       	ldi	r26, 0x35	; 53
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	e5 e3       	ldi	r30, 0x35	; 53
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	48 2f       	mov	r20, r24
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	02 2e       	mov	r0, r18
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <DIO_voidTogglePin+0xbc>
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	0a 94       	dec	r0
    37ea:	e2 f7       	brpl	.-8      	; 0x37e4 <DIO_voidTogglePin+0xb8>
    37ec:	84 27       	eor	r24, r20
    37ee:	8c 93       	st	X, r24
    37f0:	13 c0       	rjmp	.+38     	; 0x3818 <DIO_voidTogglePin+0xec>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD,Copy_u8Pin);
    37f2:	a2 e3       	ldi	r26, 0x32	; 50
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	e2 e3       	ldi	r30, 0x32	; 50
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	48 2f       	mov	r20, r24
    37fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3800:	28 2f       	mov	r18, r24
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	02 2e       	mov	r0, r18
    380a:	02 c0       	rjmp	.+4      	; 0x3810 <DIO_voidTogglePin+0xe4>
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	0a 94       	dec	r0
    3812:	e2 f7       	brpl	.-8      	; 0x380c <DIO_voidTogglePin+0xe0>
    3814:	84 27       	eor	r24, r20
    3816:	8c 93       	st	X, r24
			break;
		default: break;
	}

}
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	08 95       	ret

00003826 <ADC_voidInit>:
volatile u16 ADC_u16_DigitalValue;
volatile u8 Local_u8ReadFlag;


void ADC_voidInit(void)
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    /*Check For The ADC Enable*/
    #if ADC_ENABLE  == ENABLE
        SET_BIT(ADCSRA, ADCSRA_ADEN);
    382e:	a6 e2       	ldi	r26, 0x26	; 38
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e6 e2       	ldi	r30, 0x26	; 38
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	80 68       	ori	r24, 0x80	; 128
    383a:	8c 93       	st	X, r24

    /*Check For The ADC Interrupt*/ 
    #if ADC_INTERRUPT_STATUS == ENABLE
        SET_BIT(ADCSRA, ADCSRA_ADIE);
    #elif ADC_INTERRUPT_STATUS == DISABLE
        CLEAR_BIT(ADCSRA, ADCSRA_ADIE);
    383c:	a6 e2       	ldi	r26, 0x26	; 38
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e6 e2       	ldi	r30, 0x26	; 38
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	87 7f       	andi	r24, 0xF7	; 247
    3848:	8c 93       	st	X, r24
    //     #error ("Error, ADC_REFERENCE_SELECTION Configuration Error")
    // #endif


    /*Set the reference selection options using BitMasking*/
    ADMUX &= REF_CLR_MASK;
    384a:	a7 e2       	ldi	r26, 0x27	; 39
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	e7 e2       	ldi	r30, 0x27	; 39
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	8f 73       	andi	r24, 0x3F	; 63
    3856:	8c 93       	st	X, r24
    ADMUX |= ADC_REFERENCE_SELECTION;
    3858:	a7 e2       	ldi	r26, 0x27	; 39
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	e7 e2       	ldi	r30, 0x27	; 39
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
    3862:	80 64       	ori	r24, 0x40	; 64
    3864:	8c 93       	st	X, r24
        #error("Error, ADC_RESULT Confiuration Error")
    #endif


    /* Check For The Prescaler Values*/
    ADCSRA &= ADC_CLR_SCALER_MASK;
    3866:	a6 e2       	ldi	r26, 0x26	; 38
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	e6 e2       	ldi	r30, 0x26	; 38
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	88 7f       	andi	r24, 0xF8	; 248
    3872:	8c 93       	st	X, r24
    ADCSRA |= ADC_SCALER_SELECTION;
    3874:	a6 e2       	ldi	r26, 0x26	; 38
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	e6 e2       	ldi	r30, 0x26	; 38
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	86 60       	ori	r24, 0x06	; 6
    3880:	8c 93       	st	X, r24

}
    3882:	cf 91       	pop	r28
    3884:	df 91       	pop	r29
    3886:	08 95       	ret

00003888 <ADC_voidInterruptControl>:


void ADC_voidInterruptControl(u8 Copy_u8InterruptStatus)
{
    3888:	df 93       	push	r29
    388a:	cf 93       	push	r28
    388c:	00 d0       	rcall	.+0      	; 0x388e <ADC_voidInterruptControl+0x6>
    388e:	0f 92       	push	r0
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
    3894:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8InterruptStatus)
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	28 2f       	mov	r18, r24
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	3b 83       	std	Y+3, r19	; 0x03
    389e:	2a 83       	std	Y+2, r18	; 0x02
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	9b 81       	ldd	r25, Y+3	; 0x03
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	31 f0       	breq	.+12     	; 0x38b4 <ADC_voidInterruptControl+0x2c>
    38a8:	2a 81       	ldd	r18, Y+2	; 0x02
    38aa:	3b 81       	ldd	r19, Y+3	; 0x03
    38ac:	21 30       	cpi	r18, 0x01	; 1
    38ae:	31 05       	cpc	r19, r1
    38b0:	49 f0       	breq	.+18     	; 0x38c4 <ADC_voidInterruptControl+0x3c>
    38b2:	0f c0       	rjmp	.+30     	; 0x38d2 <ADC_voidInterruptControl+0x4a>
    {
        case DISABLE:
            CLEAR_BIT(ADCSRA, ADCSRA_ADIE);
    38b4:	a6 e2       	ldi	r26, 0x26	; 38
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	e6 e2       	ldi	r30, 0x26	; 38
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	87 7f       	andi	r24, 0xF7	; 247
    38c0:	8c 93       	st	X, r24
    38c2:	07 c0       	rjmp	.+14     	; 0x38d2 <ADC_voidInterruptControl+0x4a>
        break;

        case ENABLE:
            SET_BIT(ADCSRA, ADCSRA_ADIE);
    38c4:	a6 e2       	ldi	r26, 0x26	; 38
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	e6 e2       	ldi	r30, 0x26	; 38
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	88 60       	ori	r24, 0x08	; 8
    38d0:	8c 93       	st	X, r24

        default:
            /*Do Noting*/
        break;
    }
}
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <ADC_u8StartConversionSynchronous>:

u8 ADC_u8StartConversionSynchronous(u8 Copy_u8ChannelNumber) //Polling
{
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <ADC_u8StartConversionSynchronous+0x6>
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8DigitalValue;

    ADMUX &= CHANNEL_CLR_MASK;
    38ea:	a7 e2       	ldi	r26, 0x27	; 39
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e7 e2       	ldi	r30, 0x27	; 39
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	80 7e       	andi	r24, 0xE0	; 224
    38f6:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ChannelNumber;
    38f8:	a7 e2       	ldi	r26, 0x27	; 39
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	e7 e2       	ldi	r30, 0x27	; 39
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	90 81       	ld	r25, Z
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	89 2b       	or	r24, r25
    3906:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, ADCSRA_ADSC);
    3908:	a6 e2       	ldi	r26, 0x26	; 38
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	e6 e2       	ldi	r30, 0x26	; 38
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	80 81       	ld	r24, Z
    3912:	80 64       	ori	r24, 0x40	; 64
    3914:	8c 93       	st	X, r24

    while( (GET_BIT(ADCSRA, ADCSRA_ADIF)) == DISABLE );
    3916:	e6 e2       	ldi	r30, 0x26	; 38
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	82 95       	swap	r24
    391e:	8f 70       	andi	r24, 0x0F	; 15
    3920:	88 2f       	mov	r24, r24
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	81 70       	andi	r24, 0x01	; 1
    3926:	90 70       	andi	r25, 0x00	; 0
    3928:	00 97       	sbiw	r24, 0x00	; 0
    392a:	a9 f3       	breq	.-22     	; 0x3916 <ADC_u8StartConversionSynchronous+0x38>

    CLEAR_BIT(ADCSRA, ADCSRA_ADSC);
    392c:	a6 e2       	ldi	r26, 0x26	; 38
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	e6 e2       	ldi	r30, 0x26	; 38
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	8f 7b       	andi	r24, 0xBF	; 191
    3938:	8c 93       	st	X, r24
    CLEAR_BIT(ADCSRA, ADCSRA_ADIF);
    393a:	a6 e2       	ldi	r26, 0x26	; 38
    393c:	b0 e0       	ldi	r27, 0x00	; 0
    393e:	e6 e2       	ldi	r30, 0x26	; 38
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	80 81       	ld	r24, Z
    3944:	8f 7e       	andi	r24, 0xEF	; 239
    3946:	8c 93       	st	X, r24
#if ADC_RESULT == RIGHT_ADJUST
    Local_u8DigitalValue = (u8)ADC;
#elif ADC_RESULT == LEFT_ADJUST
    Local_u8DigitalValue = ADCH;
#elif ADC_RESULT == FULL_ADC_REG
    Local_u8DigitalValue = (u8)ADC;
    3948:	e4 e2       	ldi	r30, 0x24	; 36
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	91 81       	ldd	r25, Z+1	; 0x01
    3950:	89 83       	std	Y+1, r24	; 0x01
#else
    #error("Error, ADC_RESULT Confiuration Error")
#endif

    return Local_u8DigitalValue;
    3952:	89 81       	ldd	r24, Y+1	; 0x01
}
    3954:	0f 90       	pop	r0
    3956:	0f 90       	pop	r0
    3958:	cf 91       	pop	r28
    395a:	df 91       	pop	r29
    395c:	08 95       	ret

0000395e <ADC_u16StartConversionSynchronous>:

u16 ADC_u16StartConversionSynchronous(u8 Copy_u8ChannelNumber) //Polling
{
    395e:	df 93       	push	r29
    3960:	cf 93       	push	r28
    3962:	0f 92       	push	r0
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	89 83       	std	Y+1, r24	; 0x01
    
    ADMUX &= CHANNEL_CLR_MASK;
    396a:	a7 e2       	ldi	r26, 0x27	; 39
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e7 e2       	ldi	r30, 0x27	; 39
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	80 7e       	andi	r24, 0xE0	; 224
    3976:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ChannelNumber;
    3978:	a7 e2       	ldi	r26, 0x27	; 39
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e7 e2       	ldi	r30, 0x27	; 39
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	90 81       	ld	r25, Z
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	89 2b       	or	r24, r25
    3986:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, ADCSRA_ADSC);
    3988:	a6 e2       	ldi	r26, 0x26	; 38
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e6 e2       	ldi	r30, 0x26	; 38
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	80 64       	ori	r24, 0x40	; 64
    3994:	8c 93       	st	X, r24

    while( (GET_BIT(ADCSRA, ADCSRA_ADIF)) == DISABLE );
    3996:	e6 e2       	ldi	r30, 0x26	; 38
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	82 95       	swap	r24
    399e:	8f 70       	andi	r24, 0x0F	; 15
    39a0:	88 2f       	mov	r24, r24
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	81 70       	andi	r24, 0x01	; 1
    39a6:	90 70       	andi	r25, 0x00	; 0
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	a9 f3       	breq	.-22     	; 0x3996 <ADC_u16StartConversionSynchronous+0x38>

    CLEAR_BIT(ADCSRA, ADCSRA_ADSC);
    39ac:	a6 e2       	ldi	r26, 0x26	; 38
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	e6 e2       	ldi	r30, 0x26	; 38
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	8f 7b       	andi	r24, 0xBF	; 191
    39b8:	8c 93       	st	X, r24
    CLEAR_BIT(ADCSRA, ADCSRA_ADIF);
    39ba:	a6 e2       	ldi	r26, 0x26	; 38
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e6 e2       	ldi	r30, 0x26	; 38
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	8f 7e       	andi	r24, 0xEF	; 239
    39c6:	8c 93       	st	X, r24


    return ADC;
    39c8:	e4 e2       	ldi	r30, 0x24	; 36
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	91 81       	ldd	r25, Z+1	; 0x01
}
    39d0:	0f 90       	pop	r0
    39d2:	cf 91       	pop	r28
    39d4:	df 91       	pop	r29
    39d6:	08 95       	ret

000039d8 <ADC_u8StartConversionAsynchronous>:

u8 ADC_u8StartConversionAsynchronous(u8 Copy_u8ChannelNumber) //Based On Interrupt
{
    39d8:	df 93       	push	r29
    39da:	cf 93       	push	r28
    39dc:	00 d0       	rcall	.+0      	; 0x39de <ADC_u8StartConversionAsynchronous+0x6>
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
    39e2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8DigitalValue = ADC_RESULT_NOT_READY;
    39e4:	8f ef       	ldi	r24, 0xFF	; 255
    39e6:	89 83       	std	Y+1, r24	; 0x01

    if(Local_u8ReadFlag == 0)   
    39e8:	80 91 a2 01 	lds	r24, 0x01A2
    39ec:	88 23       	and	r24, r24
    39ee:	d1 f4       	brne	.+52     	; 0x3a24 <ADC_u8StartConversionAsynchronous+0x4c>
    {
        /*Set ADC Channel*/
        ADMUX &= CHANNEL_CLR_MASK;
    39f0:	a7 e2       	ldi	r26, 0x27	; 39
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	e7 e2       	ldi	r30, 0x27	; 39
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	80 7e       	andi	r24, 0xE0	; 224
    39fc:	8c 93       	st	X, r24
        ADMUX |= Copy_u8ChannelNumber;
    39fe:	a7 e2       	ldi	r26, 0x27	; 39
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	e7 e2       	ldi	r30, 0x27	; 39
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	90 81       	ld	r25, Z
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	89 2b       	or	r24, r25
    3a0c:	8c 93       	st	X, r24

        /*ADC Start Conversion*/
        SET_BIT(ADCSRA, ADCSRA_ADSC);
    3a0e:	a6 e2       	ldi	r26, 0x26	; 38
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	e6 e2       	ldi	r30, 0x26	; 38
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	80 64       	ori	r24, 0x40	; 64
    3a1a:	8c 93       	st	X, r24
        Local_u8ReadFlag = 1;
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	80 93 a2 01 	sts	0x01A2, r24
    3a22:	0b c0       	rjmp	.+22     	; 0x3a3a <ADC_u8StartConversionAsynchronous+0x62>
    } 
    else if(Local_u8ReadFlag == 2)
    3a24:	80 91 a2 01 	lds	r24, 0x01A2
    3a28:	82 30       	cpi	r24, 0x02	; 2
    3a2a:	39 f4       	brne	.+14     	; 0x3a3a <ADC_u8StartConversionAsynchronous+0x62>

            Local_u8DigitalValue = (u8)(ADC_u16_DigitalValue);

        #elif ADC_RESULT == FULL_ADC_REG

            Local_u8DigitalValue = (u8)ADC_u16_DigitalValue;
    3a2c:	80 91 a3 01 	lds	r24, 0x01A3
    3a30:	90 91 a4 01 	lds	r25, 0x01A4
    3a34:	89 83       	std	Y+1, r24	; 0x01

        #endif
        
        Local_u8ReadFlag = 0;
    3a36:	10 92 a2 01 	sts	0x01A2, r1
    }
    
    return Local_u8DigitalValue;
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <ADC_u16StartConversionAsynchronous>:

u16 ADC_u16StartConversionAsynchronous(u8 Copy_u8ChannelNumber) //Based On Interrupt
{
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	00 d0       	rcall	.+0      	; 0x3a4c <ADC_u16StartConversionAsynchronous+0x6>
    3a4c:	0f 92       	push	r0
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	8b 83       	std	Y+3, r24	; 0x03
    u16 Local_u16DigitalValue = ADC_RESULT_NOT_READY;
    3a54:	8f ef       	ldi	r24, 0xFF	; 255
    3a56:	9f ef       	ldi	r25, 0xFF	; 255
    3a58:	9a 83       	std	Y+2, r25	; 0x02
    3a5a:	89 83       	std	Y+1, r24	; 0x01

    if(Local_u8ReadFlag == 0)   
    3a5c:	80 91 a2 01 	lds	r24, 0x01A2
    3a60:	88 23       	and	r24, r24
    3a62:	d1 f4       	brne	.+52     	; 0x3a98 <ADC_u16StartConversionAsynchronous+0x52>
    {
        /*Set ADC Channel*/
        ADMUX &= CHANNEL_CLR_MASK;
    3a64:	a7 e2       	ldi	r26, 0x27	; 39
    3a66:	b0 e0       	ldi	r27, 0x00	; 0
    3a68:	e7 e2       	ldi	r30, 0x27	; 39
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	80 81       	ld	r24, Z
    3a6e:	80 7e       	andi	r24, 0xE0	; 224
    3a70:	8c 93       	st	X, r24
        ADMUX |= Copy_u8ChannelNumber;
    3a72:	a7 e2       	ldi	r26, 0x27	; 39
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	e7 e2       	ldi	r30, 0x27	; 39
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	90 81       	ld	r25, Z
    3a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7e:	89 2b       	or	r24, r25
    3a80:	8c 93       	st	X, r24

        /*ADC Start Conversion*/
        SET_BIT(ADCSRA, ADCSRA_ADSC);
    3a82:	a6 e2       	ldi	r26, 0x26	; 38
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	e6 e2       	ldi	r30, 0x26	; 38
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	80 81       	ld	r24, Z
    3a8c:	80 64       	ori	r24, 0x40	; 64
    3a8e:	8c 93       	st	X, r24
        Local_u8ReadFlag = 1;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	80 93 a2 01 	sts	0x01A2, r24
    3a96:	0c c0       	rjmp	.+24     	; 0x3ab0 <ADC_u16StartConversionAsynchronous+0x6a>
    } 
    else if(Local_u8ReadFlag == 2)
    3a98:	80 91 a2 01 	lds	r24, 0x01A2
    3a9c:	82 30       	cpi	r24, 0x02	; 2
    3a9e:	41 f4       	brne	.+16     	; 0x3ab0 <ADC_u16StartConversionAsynchronous+0x6a>
    {
        Local_u16DigitalValue = ADC_u16_DigitalValue;
    3aa0:	80 91 a3 01 	lds	r24, 0x01A3
    3aa4:	90 91 a4 01 	lds	r25, 0x01A4
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
        Local_u8ReadFlag = 0;
    3aac:	10 92 a2 01 	sts	0x01A2, r1
    }
    
    return Local_u16DigitalValue;
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	08 95       	ret

00003ac0 <__vector_16>:


ISR(ADC_vect)
{
    3ac0:	1f 92       	push	r1
    3ac2:	0f 92       	push	r0
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	0f 92       	push	r0
    3ac8:	11 24       	eor	r1, r1
    3aca:	8f 93       	push	r24
    3acc:	9f 93       	push	r25
    3ace:	ef 93       	push	r30
    3ad0:	ff 93       	push	r31
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62

    Local_u8ReadFlag = 2;
    3ada:	82 e0       	ldi	r24, 0x02	; 2
    3adc:	80 93 a2 01 	sts	0x01A2, r24

    ADC_u16_DigitalValue = (u16)ADCH;

#elif ADC_RESULT == FULL_ADC_REG

    ADC_u16_DigitalValue = ADC;
    3ae0:	e4 e2       	ldi	r30, 0x24	; 36
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	90 93 a4 01 	sts	0x01A4, r25
    3aec:	80 93 a3 01 	sts	0x01A3, r24

#endif
    
    3af0:	cf 91       	pop	r28
    3af2:	df 91       	pop	r29
    3af4:	ff 91       	pop	r31
    3af6:	ef 91       	pop	r30
    3af8:	9f 91       	pop	r25
    3afa:	8f 91       	pop	r24
    3afc:	0f 90       	pop	r0
    3afe:	0f be       	out	0x3f, r0	; 63
    3b00:	0f 90       	pop	r0
    3b02:	1f 90       	pop	r1
    3b04:	18 95       	reti

00003b06 <SevenSeg_voidInit>:


/************************************ Implementation Section ******************************/

void SevenSeg_voidInit(const SevenSeg_t * Copy_SevenSeg)
{
    3b06:	df 93       	push	r29
    3b08:	cf 93       	push	r28
    3b0a:	00 d0       	rcall	.+0      	; 0x3b0c <SevenSeg_voidInit+0x6>
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	9a 83       	std	Y+2, r25	; 0x02
    3b12:	89 83       	std	Y+1, r24	; 0x01
	//Set Seven Segment Port As Output, Initially LOW 
	DIO_voidSetPortDirection(Copy_SevenSeg->Port , OUTPUT);
    3b14:	e9 81       	ldd	r30, Y+1	; 0x01
    3b16:	fa 81       	ldd	r31, Y+2	; 0x02
    3b18:	80 81       	ld	r24, Z
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <DIO_voidSetPortDirection>
	DIO_voidSetPortSpecificValue(Copy_SevenSeg->Port , ~(Copy_SevenSeg->Common_Type));
    3b20:	e9 81       	ldd	r30, Y+1	; 0x01
    3b22:	fa 81       	ldd	r31, Y+2	; 0x02
    3b24:	20 81       	ld	r18, Z
    3b26:	e9 81       	ldd	r30, Y+1	; 0x01
    3b28:	fa 81       	ldd	r31, Y+2	; 0x02
    3b2a:	81 81       	ldd	r24, Z+1	; 0x01
    3b2c:	98 2f       	mov	r25, r24
    3b2e:	90 95       	com	r25
    3b30:	82 2f       	mov	r24, r18
    3b32:	69 2f       	mov	r22, r25
    3b34:	0e 94 f7 18 	call	0x31ee	; 0x31ee <DIO_voidSetPortSpecificValue>
}
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <SevenSeg_voidDisplayData>:

void SevenSeg_voidDisplayData(const SevenSeg_t * Copy_SevenSeg, u8 Copy_u8Data)
{
    3b42:	1f 93       	push	r17
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	00 d0       	rcall	.+0      	; 0x3b4a <SevenSeg_voidDisplayData+0x8>
    3b4a:	0f 92       	push	r0
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	9a 83       	std	Y+2, r25	; 0x02
    3b52:	89 83       	std	Y+1, r24	; 0x01
    3b54:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_SevenSeg->Common_Type == COMMON_ANODE)
    3b56:	e9 81       	ldd	r30, Y+1	; 0x01
    3b58:	fa 81       	ldd	r31, Y+2	; 0x02
    3b5a:	81 81       	ldd	r24, Z+1	; 0x01
    3b5c:	88 23       	and	r24, r24
    3b5e:	61 f4       	brne	.+24     	; 0x3b78 <SevenSeg_voidDisplayData+0x36>
	{
		DIO_voidSetPortSpecificValue(Copy_SevenSeg->Port , SevenSeg_u8CommonAnodeDecoder(Copy_u8Data));
    3b60:	e9 81       	ldd	r30, Y+1	; 0x01
    3b62:	fa 81       	ldd	r31, Y+2	; 0x02
    3b64:	10 81       	ld	r17, Z
    3b66:	8b 81       	ldd	r24, Y+3	; 0x03
    3b68:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <SevenSeg_u8CommonAnodeDecoder>
    3b6c:	98 2f       	mov	r25, r24
    3b6e:	81 2f       	mov	r24, r17
    3b70:	69 2f       	mov	r22, r25
    3b72:	0e 94 f7 18 	call	0x31ee	; 0x31ee <DIO_voidSetPortSpecificValue>
    3b76:	10 c0       	rjmp	.+32     	; 0x3b98 <SevenSeg_voidDisplayData+0x56>
	}
	else if(Copy_SevenSeg->Common_Type == COMMON_CATHODE)
    3b78:	e9 81       	ldd	r30, Y+1	; 0x01
    3b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7c:	81 81       	ldd	r24, Z+1	; 0x01
    3b7e:	81 30       	cpi	r24, 0x01	; 1
    3b80:	59 f4       	brne	.+22     	; 0x3b98 <SevenSeg_voidDisplayData+0x56>
	{
		DIO_voidSetPortSpecificValue(Copy_SevenSeg->Port , SevenSeg_u8CommonCathodeDecoder(Copy_u8Data));
    3b82:	e9 81       	ldd	r30, Y+1	; 0x01
    3b84:	fa 81       	ldd	r31, Y+2	; 0x02
    3b86:	10 81       	ld	r17, Z
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <SevenSeg_u8CommonCathodeDecoder>
    3b8e:	98 2f       	mov	r25, r24
    3b90:	81 2f       	mov	r24, r17
    3b92:	69 2f       	mov	r22, r25
    3b94:	0e 94 f7 18 	call	0x31ee	; 0x31ee <DIO_voidSetPortSpecificValue>
	}
	else{}

}
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	1f 91       	pop	r17
    3ba4:	08 95       	ret

00003ba6 <SevenSeg_voidOFF>:

void SevenSeg_voidOFF(const SevenSeg_t * Copy_SevenSeg)
{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <SevenSeg_voidOFF+0x6>
    3bac:	cd b7       	in	r28, 0x3d	; 61
    3bae:	de b7       	in	r29, 0x3e	; 62
    3bb0:	9a 83       	std	Y+2, r25	; 0x02
    3bb2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_SevenSeg->Common_Type == COMMON_ANODE)
    3bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    3bb8:	81 81       	ldd	r24, Z+1	; 0x01
    3bba:	88 23       	and	r24, r24
    3bbc:	39 f4       	brne	.+14     	; 0x3bcc <SevenSeg_voidOFF+0x26>
	{
		DIO_voidSetPortSpecificValue(Copy_SevenSeg->Port , 0xFF);
    3bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bc2:	80 81       	ld	r24, Z
    3bc4:	6f ef       	ldi	r22, 0xFF	; 255
    3bc6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <DIO_voidSetPortSpecificValue>
    3bca:	0b c0       	rjmp	.+22     	; 0x3be2 <SevenSeg_voidOFF+0x3c>
	}
	else if(Copy_SevenSeg->Common_Type == COMMON_CATHODE)
    3bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    3bce:	fa 81       	ldd	r31, Y+2	; 0x02
    3bd0:	81 81       	ldd	r24, Z+1	; 0x01
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	31 f4       	brne	.+12     	; 0x3be2 <SevenSeg_voidOFF+0x3c>
	{
		DIO_voidSetPortSpecificValue(Copy_SevenSeg->Port , 0x00);
    3bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    3bda:	80 81       	ld	r24, Z
    3bdc:	60 e0       	ldi	r22, 0x00	; 0
    3bde:	0e 94 f7 18 	call	0x31ee	; 0x31ee <DIO_voidSetPortSpecificValue>
	}
	else{}

}
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	cf 91       	pop	r28
    3be8:	df 91       	pop	r29
    3bea:	08 95       	ret

00003bec <SevenSeg_u8CommonAnodeDecoder>:



static u8 SevenSeg_u8CommonAnodeDecoder(u8 Copy_u8Data)
{
    3bec:	df 93       	push	r29
    3bee:	cf 93       	push	r28
    3bf0:	00 d0       	rcall	.+0      	; 0x3bf2 <SevenSeg_u8CommonAnodeDecoder+0x6>
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <SevenSeg_u8CommonAnodeDecoder+0x8>
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ReturnValue = 0;
    3bfa:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8Data)
    3bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfe:	28 2f       	mov	r18, r24
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	3c 83       	std	Y+4, r19	; 0x04
    3c04:	2b 83       	std	Y+3, r18	; 0x03
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0a:	81 34       	cpi	r24, 0x41	; 65
    3c0c:	91 05       	cpc	r25, r1
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <SevenSeg_u8CommonAnodeDecoder+0x26>
    3c10:	c3 c0       	rjmp	.+390    	; 0x3d98 <SevenSeg_u8CommonAnodeDecoder+0x1ac>
    3c12:	2b 81       	ldd	r18, Y+3	; 0x03
    3c14:	3c 81       	ldd	r19, Y+4	; 0x04
    3c16:	22 34       	cpi	r18, 0x42	; 66
    3c18:	31 05       	cpc	r19, r1
    3c1a:	0c f0       	brlt	.+2      	; 0x3c1e <SevenSeg_u8CommonAnodeDecoder+0x32>
    3c1c:	4e c0       	rjmp	.+156    	; 0x3cba <SevenSeg_u8CommonAnodeDecoder+0xce>
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	9c 81       	ldd	r25, Y+4	; 0x04
    3c22:	84 30       	cpi	r24, 0x04	; 4
    3c24:	91 05       	cpc	r25, r1
    3c26:	09 f4       	brne	.+2      	; 0x3c2a <SevenSeg_u8CommonAnodeDecoder+0x3e>
    3c28:	a5 c0       	rjmp	.+330    	; 0x3d74 <SevenSeg_u8CommonAnodeDecoder+0x188>
    3c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c2e:	25 30       	cpi	r18, 0x05	; 5
    3c30:	31 05       	cpc	r19, r1
    3c32:	f4 f4       	brge	.+60     	; 0x3c70 <SevenSeg_u8CommonAnodeDecoder+0x84>
    3c34:	8b 81       	ldd	r24, Y+3	; 0x03
    3c36:	9c 81       	ldd	r25, Y+4	; 0x04
    3c38:	81 30       	cpi	r24, 0x01	; 1
    3c3a:	91 05       	cpc	r25, r1
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <SevenSeg_u8CommonAnodeDecoder+0x54>
    3c3e:	91 c0       	rjmp	.+290    	; 0x3d62 <SevenSeg_u8CommonAnodeDecoder+0x176>
    3c40:	2b 81       	ldd	r18, Y+3	; 0x03
    3c42:	3c 81       	ldd	r19, Y+4	; 0x04
    3c44:	22 30       	cpi	r18, 0x02	; 2
    3c46:	31 05       	cpc	r19, r1
    3c48:	34 f4       	brge	.+12     	; 0x3c56 <SevenSeg_u8CommonAnodeDecoder+0x6a>
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4e:	00 97       	sbiw	r24, 0x00	; 0
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <SevenSeg_u8CommonAnodeDecoder+0x68>
    3c52:	84 c0       	rjmp	.+264    	; 0x3d5c <SevenSeg_u8CommonAnodeDecoder+0x170>
    3c54:	b2 c0       	rjmp	.+356    	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    3c56:	2b 81       	ldd	r18, Y+3	; 0x03
    3c58:	3c 81       	ldd	r19, Y+4	; 0x04
    3c5a:	22 30       	cpi	r18, 0x02	; 2
    3c5c:	31 05       	cpc	r19, r1
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <SevenSeg_u8CommonAnodeDecoder+0x76>
    3c60:	83 c0       	rjmp	.+262    	; 0x3d68 <SevenSeg_u8CommonAnodeDecoder+0x17c>
    3c62:	8b 81       	ldd	r24, Y+3	; 0x03
    3c64:	9c 81       	ldd	r25, Y+4	; 0x04
    3c66:	83 30       	cpi	r24, 0x03	; 3
    3c68:	91 05       	cpc	r25, r1
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <SevenSeg_u8CommonAnodeDecoder+0x82>
    3c6c:	80 c0       	rjmp	.+256    	; 0x3d6e <SevenSeg_u8CommonAnodeDecoder+0x182>
    3c6e:	a5 c0       	rjmp	.+330    	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    3c70:	2b 81       	ldd	r18, Y+3	; 0x03
    3c72:	3c 81       	ldd	r19, Y+4	; 0x04
    3c74:	27 30       	cpi	r18, 0x07	; 7
    3c76:	31 05       	cpc	r19, r1
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <SevenSeg_u8CommonAnodeDecoder+0x90>
    3c7a:	85 c0       	rjmp	.+266    	; 0x3d86 <SevenSeg_u8CommonAnodeDecoder+0x19a>
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c80:	88 30       	cpi	r24, 0x08	; 8
    3c82:	91 05       	cpc	r25, r1
    3c84:	6c f4       	brge	.+26     	; 0x3ca0 <SevenSeg_u8CommonAnodeDecoder+0xb4>
    3c86:	2b 81       	ldd	r18, Y+3	; 0x03
    3c88:	3c 81       	ldd	r19, Y+4	; 0x04
    3c8a:	25 30       	cpi	r18, 0x05	; 5
    3c8c:	31 05       	cpc	r19, r1
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <SevenSeg_u8CommonAnodeDecoder+0xa6>
    3c90:	74 c0       	rjmp	.+232    	; 0x3d7a <SevenSeg_u8CommonAnodeDecoder+0x18e>
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	86 30       	cpi	r24, 0x06	; 6
    3c98:	91 05       	cpc	r25, r1
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <SevenSeg_u8CommonAnodeDecoder+0xb2>
    3c9c:	71 c0       	rjmp	.+226    	; 0x3d80 <SevenSeg_u8CommonAnodeDecoder+0x194>
    3c9e:	8d c0       	rjmp	.+282    	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    3ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ca4:	28 30       	cpi	r18, 0x08	; 8
    3ca6:	31 05       	cpc	r19, r1
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <SevenSeg_u8CommonAnodeDecoder+0xc0>
    3caa:	70 c0       	rjmp	.+224    	; 0x3d8c <SevenSeg_u8CommonAnodeDecoder+0x1a0>
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	89 30       	cpi	r24, 0x09	; 9
    3cb2:	91 05       	cpc	r25, r1
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <SevenSeg_u8CommonAnodeDecoder+0xcc>
    3cb6:	6d c0       	rjmp	.+218    	; 0x3d92 <SevenSeg_u8CommonAnodeDecoder+0x1a6>
    3cb8:	80 c0       	rjmp	.+256    	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    3cba:	2b 81       	ldd	r18, Y+3	; 0x03
    3cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    3cbe:	21 36       	cpi	r18, 0x61	; 97
    3cc0:	31 05       	cpc	r19, r1
    3cc2:	09 f4       	brne	.+2      	; 0x3cc6 <SevenSeg_u8CommonAnodeDecoder+0xda>
    3cc4:	69 c0       	rjmp	.+210    	; 0x3d98 <SevenSeg_u8CommonAnodeDecoder+0x1ac>
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cca:	82 36       	cpi	r24, 0x62	; 98
    3ccc:	91 05       	cpc	r25, r1
    3cce:	2c f5       	brge	.+74     	; 0x3d1a <SevenSeg_u8CommonAnodeDecoder+0x12e>
    3cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    3cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    3cd4:	24 34       	cpi	r18, 0x44	; 68
    3cd6:	31 05       	cpc	r19, r1
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <SevenSeg_u8CommonAnodeDecoder+0xf0>
    3cda:	67 c0       	rjmp	.+206    	; 0x3daa <SevenSeg_u8CommonAnodeDecoder+0x1be>
    3cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cde:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce0:	85 34       	cpi	r24, 0x45	; 69
    3ce2:	91 05       	cpc	r25, r1
    3ce4:	6c f4       	brge	.+26     	; 0x3d00 <SevenSeg_u8CommonAnodeDecoder+0x114>
    3ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    3cea:	22 34       	cpi	r18, 0x42	; 66
    3cec:	31 05       	cpc	r19, r1
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <SevenSeg_u8CommonAnodeDecoder+0x106>
    3cf0:	56 c0       	rjmp	.+172    	; 0x3d9e <SevenSeg_u8CommonAnodeDecoder+0x1b2>
    3cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf6:	83 34       	cpi	r24, 0x43	; 67
    3cf8:	91 05       	cpc	r25, r1
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <SevenSeg_u8CommonAnodeDecoder+0x112>
    3cfc:	53 c0       	rjmp	.+166    	; 0x3da4 <SevenSeg_u8CommonAnodeDecoder+0x1b8>
    3cfe:	5d c0       	rjmp	.+186    	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    3d00:	2b 81       	ldd	r18, Y+3	; 0x03
    3d02:	3c 81       	ldd	r19, Y+4	; 0x04
    3d04:	25 34       	cpi	r18, 0x45	; 69
    3d06:	31 05       	cpc	r19, r1
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <SevenSeg_u8CommonAnodeDecoder+0x120>
    3d0a:	52 c0       	rjmp	.+164    	; 0x3db0 <SevenSeg_u8CommonAnodeDecoder+0x1c4>
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d10:	86 34       	cpi	r24, 0x46	; 70
    3d12:	91 05       	cpc	r25, r1
    3d14:	09 f4       	brne	.+2      	; 0x3d18 <SevenSeg_u8CommonAnodeDecoder+0x12c>
    3d16:	4f c0       	rjmp	.+158    	; 0x3db6 <SevenSeg_u8CommonAnodeDecoder+0x1ca>
    3d18:	50 c0       	rjmp	.+160    	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    3d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d1e:	24 36       	cpi	r18, 0x64	; 100
    3d20:	31 05       	cpc	r19, r1
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <SevenSeg_u8CommonAnodeDecoder+0x13a>
    3d24:	42 c0       	rjmp	.+132    	; 0x3daa <SevenSeg_u8CommonAnodeDecoder+0x1be>
    3d26:	8b 81       	ldd	r24, Y+3	; 0x03
    3d28:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2a:	85 36       	cpi	r24, 0x65	; 101
    3d2c:	91 05       	cpc	r25, r1
    3d2e:	5c f4       	brge	.+22     	; 0x3d46 <SevenSeg_u8CommonAnodeDecoder+0x15a>
    3d30:	2b 81       	ldd	r18, Y+3	; 0x03
    3d32:	3c 81       	ldd	r19, Y+4	; 0x04
    3d34:	22 36       	cpi	r18, 0x62	; 98
    3d36:	31 05       	cpc	r19, r1
    3d38:	91 f1       	breq	.+100    	; 0x3d9e <SevenSeg_u8CommonAnodeDecoder+0x1b2>
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3e:	83 36       	cpi	r24, 0x63	; 99
    3d40:	91 05       	cpc	r25, r1
    3d42:	81 f1       	breq	.+96     	; 0x3da4 <SevenSeg_u8CommonAnodeDecoder+0x1b8>
    3d44:	3a c0       	rjmp	.+116    	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    3d46:	2b 81       	ldd	r18, Y+3	; 0x03
    3d48:	3c 81       	ldd	r19, Y+4	; 0x04
    3d4a:	25 36       	cpi	r18, 0x65	; 101
    3d4c:	31 05       	cpc	r19, r1
    3d4e:	81 f1       	breq	.+96     	; 0x3db0 <SevenSeg_u8CommonAnodeDecoder+0x1c4>
    3d50:	8b 81       	ldd	r24, Y+3	; 0x03
    3d52:	9c 81       	ldd	r25, Y+4	; 0x04
    3d54:	86 36       	cpi	r24, 0x66	; 102
    3d56:	91 05       	cpc	r25, r1
    3d58:	71 f1       	breq	.+92     	; 0x3db6 <SevenSeg_u8CommonAnodeDecoder+0x1ca>
    3d5a:	2f c0       	rjmp	.+94     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
    {
        case 0: //0b1000 0000
            Local_u8ReturnValue = 0x80; break;
    3d5c:	80 e8       	ldi	r24, 0x80	; 128
    3d5e:	89 83       	std	Y+1, r24	; 0x01
    3d60:	2c c0       	rjmp	.+88     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 1: //0b1111 1001
            Local_u8ReturnValue = 0xF9; break;
    3d62:	89 ef       	ldi	r24, 0xF9	; 249
    3d64:	89 83       	std	Y+1, r24	; 0x01
    3d66:	29 c0       	rjmp	.+82     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 2: //0b1010 0100
            Local_u8ReturnValue = 0xA4; break;
    3d68:	84 ea       	ldi	r24, 0xA4	; 164
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    3d6c:	26 c0       	rjmp	.+76     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 3: //0b1011 0000
            Local_u8ReturnValue = 0xB0; break;
    3d6e:	80 eb       	ldi	r24, 0xB0	; 176
    3d70:	89 83       	std	Y+1, r24	; 0x01
    3d72:	23 c0       	rjmp	.+70     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 4: //0b1001 1001
            Local_u8ReturnValue = 0x99; break;
    3d74:	89 e9       	ldi	r24, 0x99	; 153
    3d76:	89 83       	std	Y+1, r24	; 0x01
    3d78:	20 c0       	rjmp	.+64     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 5: //0b1001 0010
            Local_u8ReturnValue = 0x92; break;
    3d7a:	82 e9       	ldi	r24, 0x92	; 146
    3d7c:	89 83       	std	Y+1, r24	; 0x01
    3d7e:	1d c0       	rjmp	.+58     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 6: //0b1000 0010
            Local_u8ReturnValue = 0x82; break;
    3d80:	82 e8       	ldi	r24, 0x82	; 130
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	1a c0       	rjmp	.+52     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 7: //0b1111 1000
            Local_u8ReturnValue = 0xF8; break;
    3d86:	88 ef       	ldi	r24, 0xF8	; 248
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	17 c0       	rjmp	.+46     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 8: //0b1000 0000
            Local_u8ReturnValue = 0x80; break;
    3d8c:	80 e8       	ldi	r24, 0x80	; 128
    3d8e:	89 83       	std	Y+1, r24	; 0x01
    3d90:	14 c0       	rjmp	.+40     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
        case 9: //0b1001 0000
            Local_u8ReturnValue = 0x90; break;
    3d92:	80 e9       	ldi	r24, 0x90	; 144
    3d94:	89 83       	std	Y+1, r24	; 0x01
    3d96:	11 c0       	rjmp	.+34     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
		case 'a':
		case 'A': //0b1000 1000
            Local_u8ReturnValue = 0x88; break;
    3d98:	88 e8       	ldi	r24, 0x88	; 136
    3d9a:	89 83       	std	Y+1, r24	; 0x01
    3d9c:	0e c0       	rjmp	.+28     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
		case 'b':
		case 'B': //0b1000 0011
            Local_u8ReturnValue = 0x83; break;
    3d9e:	83 e8       	ldi	r24, 0x83	; 131
    3da0:	89 83       	std	Y+1, r24	; 0x01
    3da2:	0b c0       	rjmp	.+22     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
		case 'c':
		case 'C': //0b1100 0110
            Local_u8ReturnValue = 0xC6; break;
    3da4:	86 ec       	ldi	r24, 0xC6	; 198
    3da6:	89 83       	std	Y+1, r24	; 0x01
    3da8:	08 c0       	rjmp	.+16     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
		case 'd':
		case 'D': //0b1010 0001
            Local_u8ReturnValue = 0xA1; break;
    3daa:	81 ea       	ldi	r24, 0xA1	; 161
    3dac:	89 83       	std	Y+1, r24	; 0x01
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
		case 'e':
		case 'E': //0b1000 0110
            Local_u8ReturnValue = 0x86; break;
    3db0:	86 e8       	ldi	r24, 0x86	; 134
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <SevenSeg_u8CommonAnodeDecoder+0x1ce>
		case 'f':
		case 'F': //0b1000 1110
            Local_u8ReturnValue = 0x8E; break;
    3db6:	8e e8       	ldi	r24, 0x8E	; 142
    3db8:	89 83       	std	Y+1, r24	; 0x01

        default:
            break;
    }

    return Local_u8ReturnValue;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <SevenSeg_u8CommonCathodeDecoder>:



static u8 SevenSeg_u8CommonCathodeDecoder(u8 Copy_u8Data)
{
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <SevenSeg_u8CommonCathodeDecoder+0x6>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <SevenSeg_u8CommonCathodeDecoder+0x8>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ReturnValue = 0;
    3dd8:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8Data)
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	28 2f       	mov	r18, r24
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	3c 83       	std	Y+4, r19	; 0x04
    3de2:	2b 83       	std	Y+3, r18	; 0x03
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	81 34       	cpi	r24, 0x41	; 65
    3dea:	91 05       	cpc	r25, r1
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <SevenSeg_u8CommonCathodeDecoder+0x26>
    3dee:	c3 c0       	rjmp	.+390    	; 0x3f76 <SevenSeg_u8CommonCathodeDecoder+0x1ac>
    3df0:	2b 81       	ldd	r18, Y+3	; 0x03
    3df2:	3c 81       	ldd	r19, Y+4	; 0x04
    3df4:	22 34       	cpi	r18, 0x42	; 66
    3df6:	31 05       	cpc	r19, r1
    3df8:	0c f0       	brlt	.+2      	; 0x3dfc <SevenSeg_u8CommonCathodeDecoder+0x32>
    3dfa:	4e c0       	rjmp	.+156    	; 0x3e98 <SevenSeg_u8CommonCathodeDecoder+0xce>
    3dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3e00:	84 30       	cpi	r24, 0x04	; 4
    3e02:	91 05       	cpc	r25, r1
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <SevenSeg_u8CommonCathodeDecoder+0x3e>
    3e06:	a5 c0       	rjmp	.+330    	; 0x3f52 <SevenSeg_u8CommonCathodeDecoder+0x188>
    3e08:	2b 81       	ldd	r18, Y+3	; 0x03
    3e0a:	3c 81       	ldd	r19, Y+4	; 0x04
    3e0c:	25 30       	cpi	r18, 0x05	; 5
    3e0e:	31 05       	cpc	r19, r1
    3e10:	f4 f4       	brge	.+60     	; 0x3e4e <SevenSeg_u8CommonCathodeDecoder+0x84>
    3e12:	8b 81       	ldd	r24, Y+3	; 0x03
    3e14:	9c 81       	ldd	r25, Y+4	; 0x04
    3e16:	81 30       	cpi	r24, 0x01	; 1
    3e18:	91 05       	cpc	r25, r1
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <SevenSeg_u8CommonCathodeDecoder+0x54>
    3e1c:	91 c0       	rjmp	.+290    	; 0x3f40 <SevenSeg_u8CommonCathodeDecoder+0x176>
    3e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    3e20:	3c 81       	ldd	r19, Y+4	; 0x04
    3e22:	22 30       	cpi	r18, 0x02	; 2
    3e24:	31 05       	cpc	r19, r1
    3e26:	34 f4       	brge	.+12     	; 0x3e34 <SevenSeg_u8CommonCathodeDecoder+0x6a>
    3e28:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	09 f4       	brne	.+2      	; 0x3e32 <SevenSeg_u8CommonCathodeDecoder+0x68>
    3e30:	84 c0       	rjmp	.+264    	; 0x3f3a <SevenSeg_u8CommonCathodeDecoder+0x170>
    3e32:	b2 c0       	rjmp	.+356    	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    3e34:	2b 81       	ldd	r18, Y+3	; 0x03
    3e36:	3c 81       	ldd	r19, Y+4	; 0x04
    3e38:	22 30       	cpi	r18, 0x02	; 2
    3e3a:	31 05       	cpc	r19, r1
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <SevenSeg_u8CommonCathodeDecoder+0x76>
    3e3e:	83 c0       	rjmp	.+262    	; 0x3f46 <SevenSeg_u8CommonCathodeDecoder+0x17c>
    3e40:	8b 81       	ldd	r24, Y+3	; 0x03
    3e42:	9c 81       	ldd	r25, Y+4	; 0x04
    3e44:	83 30       	cpi	r24, 0x03	; 3
    3e46:	91 05       	cpc	r25, r1
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <SevenSeg_u8CommonCathodeDecoder+0x82>
    3e4a:	80 c0       	rjmp	.+256    	; 0x3f4c <SevenSeg_u8CommonCathodeDecoder+0x182>
    3e4c:	a5 c0       	rjmp	.+330    	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    3e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    3e50:	3c 81       	ldd	r19, Y+4	; 0x04
    3e52:	27 30       	cpi	r18, 0x07	; 7
    3e54:	31 05       	cpc	r19, r1
    3e56:	09 f4       	brne	.+2      	; 0x3e5a <SevenSeg_u8CommonCathodeDecoder+0x90>
    3e58:	85 c0       	rjmp	.+266    	; 0x3f64 <SevenSeg_u8CommonCathodeDecoder+0x19a>
    3e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5e:	88 30       	cpi	r24, 0x08	; 8
    3e60:	91 05       	cpc	r25, r1
    3e62:	6c f4       	brge	.+26     	; 0x3e7e <SevenSeg_u8CommonCathodeDecoder+0xb4>
    3e64:	2b 81       	ldd	r18, Y+3	; 0x03
    3e66:	3c 81       	ldd	r19, Y+4	; 0x04
    3e68:	25 30       	cpi	r18, 0x05	; 5
    3e6a:	31 05       	cpc	r19, r1
    3e6c:	09 f4       	brne	.+2      	; 0x3e70 <SevenSeg_u8CommonCathodeDecoder+0xa6>
    3e6e:	74 c0       	rjmp	.+232    	; 0x3f58 <SevenSeg_u8CommonCathodeDecoder+0x18e>
    3e70:	8b 81       	ldd	r24, Y+3	; 0x03
    3e72:	9c 81       	ldd	r25, Y+4	; 0x04
    3e74:	86 30       	cpi	r24, 0x06	; 6
    3e76:	91 05       	cpc	r25, r1
    3e78:	09 f4       	brne	.+2      	; 0x3e7c <SevenSeg_u8CommonCathodeDecoder+0xb2>
    3e7a:	71 c0       	rjmp	.+226    	; 0x3f5e <SevenSeg_u8CommonCathodeDecoder+0x194>
    3e7c:	8d c0       	rjmp	.+282    	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    3e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3e80:	3c 81       	ldd	r19, Y+4	; 0x04
    3e82:	28 30       	cpi	r18, 0x08	; 8
    3e84:	31 05       	cpc	r19, r1
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <SevenSeg_u8CommonCathodeDecoder+0xc0>
    3e88:	70 c0       	rjmp	.+224    	; 0x3f6a <SevenSeg_u8CommonCathodeDecoder+0x1a0>
    3e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8e:	89 30       	cpi	r24, 0x09	; 9
    3e90:	91 05       	cpc	r25, r1
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <SevenSeg_u8CommonCathodeDecoder+0xcc>
    3e94:	6d c0       	rjmp	.+218    	; 0x3f70 <SevenSeg_u8CommonCathodeDecoder+0x1a6>
    3e96:	80 c0       	rjmp	.+256    	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    3e98:	2b 81       	ldd	r18, Y+3	; 0x03
    3e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    3e9c:	21 36       	cpi	r18, 0x61	; 97
    3e9e:	31 05       	cpc	r19, r1
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <SevenSeg_u8CommonCathodeDecoder+0xda>
    3ea2:	69 c0       	rjmp	.+210    	; 0x3f76 <SevenSeg_u8CommonCathodeDecoder+0x1ac>
    3ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea8:	82 36       	cpi	r24, 0x62	; 98
    3eaa:	91 05       	cpc	r25, r1
    3eac:	2c f5       	brge	.+74     	; 0x3ef8 <SevenSeg_u8CommonCathodeDecoder+0x12e>
    3eae:	2b 81       	ldd	r18, Y+3	; 0x03
    3eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    3eb2:	24 34       	cpi	r18, 0x44	; 68
    3eb4:	31 05       	cpc	r19, r1
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <SevenSeg_u8CommonCathodeDecoder+0xf0>
    3eb8:	67 c0       	rjmp	.+206    	; 0x3f88 <SevenSeg_u8CommonCathodeDecoder+0x1be>
    3eba:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ebe:	85 34       	cpi	r24, 0x45	; 69
    3ec0:	91 05       	cpc	r25, r1
    3ec2:	6c f4       	brge	.+26     	; 0x3ede <SevenSeg_u8CommonCathodeDecoder+0x114>
    3ec4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ec6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ec8:	22 34       	cpi	r18, 0x42	; 66
    3eca:	31 05       	cpc	r19, r1
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <SevenSeg_u8CommonCathodeDecoder+0x106>
    3ece:	56 c0       	rjmp	.+172    	; 0x3f7c <SevenSeg_u8CommonCathodeDecoder+0x1b2>
    3ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed4:	83 34       	cpi	r24, 0x43	; 67
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	09 f4       	brne	.+2      	; 0x3edc <SevenSeg_u8CommonCathodeDecoder+0x112>
    3eda:	53 c0       	rjmp	.+166    	; 0x3f82 <SevenSeg_u8CommonCathodeDecoder+0x1b8>
    3edc:	5d c0       	rjmp	.+186    	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    3ede:	2b 81       	ldd	r18, Y+3	; 0x03
    3ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ee2:	25 34       	cpi	r18, 0x45	; 69
    3ee4:	31 05       	cpc	r19, r1
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <SevenSeg_u8CommonCathodeDecoder+0x120>
    3ee8:	52 c0       	rjmp	.+164    	; 0x3f8e <SevenSeg_u8CommonCathodeDecoder+0x1c4>
    3eea:	8b 81       	ldd	r24, Y+3	; 0x03
    3eec:	9c 81       	ldd	r25, Y+4	; 0x04
    3eee:	86 34       	cpi	r24, 0x46	; 70
    3ef0:	91 05       	cpc	r25, r1
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <SevenSeg_u8CommonCathodeDecoder+0x12c>
    3ef4:	4f c0       	rjmp	.+158    	; 0x3f94 <SevenSeg_u8CommonCathodeDecoder+0x1ca>
    3ef6:	50 c0       	rjmp	.+160    	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    3ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    3efa:	3c 81       	ldd	r19, Y+4	; 0x04
    3efc:	24 36       	cpi	r18, 0x64	; 100
    3efe:	31 05       	cpc	r19, r1
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <SevenSeg_u8CommonCathodeDecoder+0x13a>
    3f02:	42 c0       	rjmp	.+132    	; 0x3f88 <SevenSeg_u8CommonCathodeDecoder+0x1be>
    3f04:	8b 81       	ldd	r24, Y+3	; 0x03
    3f06:	9c 81       	ldd	r25, Y+4	; 0x04
    3f08:	85 36       	cpi	r24, 0x65	; 101
    3f0a:	91 05       	cpc	r25, r1
    3f0c:	5c f4       	brge	.+22     	; 0x3f24 <SevenSeg_u8CommonCathodeDecoder+0x15a>
    3f0e:	2b 81       	ldd	r18, Y+3	; 0x03
    3f10:	3c 81       	ldd	r19, Y+4	; 0x04
    3f12:	22 36       	cpi	r18, 0x62	; 98
    3f14:	31 05       	cpc	r19, r1
    3f16:	91 f1       	breq	.+100    	; 0x3f7c <SevenSeg_u8CommonCathodeDecoder+0x1b2>
    3f18:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f1c:	83 36       	cpi	r24, 0x63	; 99
    3f1e:	91 05       	cpc	r25, r1
    3f20:	81 f1       	breq	.+96     	; 0x3f82 <SevenSeg_u8CommonCathodeDecoder+0x1b8>
    3f22:	3a c0       	rjmp	.+116    	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    3f24:	2b 81       	ldd	r18, Y+3	; 0x03
    3f26:	3c 81       	ldd	r19, Y+4	; 0x04
    3f28:	25 36       	cpi	r18, 0x65	; 101
    3f2a:	31 05       	cpc	r19, r1
    3f2c:	81 f1       	breq	.+96     	; 0x3f8e <SevenSeg_u8CommonCathodeDecoder+0x1c4>
    3f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f30:	9c 81       	ldd	r25, Y+4	; 0x04
    3f32:	86 36       	cpi	r24, 0x66	; 102
    3f34:	91 05       	cpc	r25, r1
    3f36:	71 f1       	breq	.+92     	; 0x3f94 <SevenSeg_u8CommonCathodeDecoder+0x1ca>
    3f38:	2f c0       	rjmp	.+94     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
    {
        case 0: //0b0011 1111
            Local_u8ReturnValue = 0x3F; break;
    3f3a:	8f e3       	ldi	r24, 0x3F	; 63
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	2c c0       	rjmp	.+88     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 1: //0b0000 0110
            Local_u8ReturnValue = 0x06; break;
    3f40:	86 e0       	ldi	r24, 0x06	; 6
    3f42:	89 83       	std	Y+1, r24	; 0x01
    3f44:	29 c0       	rjmp	.+82     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 2: //0b0101 1011
            Local_u8ReturnValue = 0x5B; break;
    3f46:	8b e5       	ldi	r24, 0x5B	; 91
    3f48:	89 83       	std	Y+1, r24	; 0x01
    3f4a:	26 c0       	rjmp	.+76     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 3: //0b0100 1111
            Local_u8ReturnValue = 0x4F; break;
    3f4c:	8f e4       	ldi	r24, 0x4F	; 79
    3f4e:	89 83       	std	Y+1, r24	; 0x01
    3f50:	23 c0       	rjmp	.+70     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 4: //0b0110 0110
            Local_u8ReturnValue = 0x66; break;
    3f52:	86 e6       	ldi	r24, 0x66	; 102
    3f54:	89 83       	std	Y+1, r24	; 0x01
    3f56:	20 c0       	rjmp	.+64     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 5: //0b0110 1101
            Local_u8ReturnValue = 0x6D; break;
    3f58:	8d e6       	ldi	r24, 0x6D	; 109
    3f5a:	89 83       	std	Y+1, r24	; 0x01
    3f5c:	1d c0       	rjmp	.+58     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 6: //0b0111 1101
            Local_u8ReturnValue = 0x7D; break;
    3f5e:	8d e7       	ldi	r24, 0x7D	; 125
    3f60:	89 83       	std	Y+1, r24	; 0x01
    3f62:	1a c0       	rjmp	.+52     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 7: //0b0000 0111
            Local_u8ReturnValue = 0x07; break;
    3f64:	87 e0       	ldi	r24, 0x07	; 7
    3f66:	89 83       	std	Y+1, r24	; 0x01
    3f68:	17 c0       	rjmp	.+46     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 8: //0b0111 1111
            Local_u8ReturnValue = 0x7F; break;
    3f6a:	8f e7       	ldi	r24, 0x7F	; 127
    3f6c:	89 83       	std	Y+1, r24	; 0x01
    3f6e:	14 c0       	rjmp	.+40     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
        case 9: //0b0110 1111
            Local_u8ReturnValue = 0x6F; break;
    3f70:	8f e6       	ldi	r24, 0x6F	; 111
    3f72:	89 83       	std	Y+1, r24	; 0x01
    3f74:	11 c0       	rjmp	.+34     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
		case 'a':
		case 'A': //0b0111 0111
            Local_u8ReturnValue = 0x77; break;
    3f76:	87 e7       	ldi	r24, 0x77	; 119
    3f78:	89 83       	std	Y+1, r24	; 0x01
    3f7a:	0e c0       	rjmp	.+28     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
		case 'b':
		case 'B': //0b0111 1100
            Local_u8ReturnValue = 0x7C; break;
    3f7c:	8c e7       	ldi	r24, 0x7C	; 124
    3f7e:	89 83       	std	Y+1, r24	; 0x01
    3f80:	0b c0       	rjmp	.+22     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
		case 'c':
		case 'C': //0b0011 1001
            Local_u8ReturnValue = 0x39; break;
    3f82:	89 e3       	ldi	r24, 0x39	; 57
    3f84:	89 83       	std	Y+1, r24	; 0x01
    3f86:	08 c0       	rjmp	.+16     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
		case 'd':
		case 'D': //0b0101 1110
            Local_u8ReturnValue = 0x5E; break;
    3f88:	8e e5       	ldi	r24, 0x5E	; 94
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	05 c0       	rjmp	.+10     	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
		case 'e':
		case 'E': //0b0111 1001
            Local_u8ReturnValue = 0x79; break;
    3f8e:	89 e7       	ldi	r24, 0x79	; 121
    3f90:	89 83       	std	Y+1, r24	; 0x01
    3f92:	02 c0       	rjmp	.+4      	; 0x3f98 <SevenSeg_u8CommonCathodeDecoder+0x1ce>
		case 'f':
		case 'F': //0b0111 0001
            Local_u8ReturnValue = 0x71; break;
    3f94:	81 e7       	ldi	r24, 0x71	; 113
    3f96:	89 83       	std	Y+1, r24	; 0x01
		
        default:
            break;
    }
    
    return Local_u8ReturnValue;
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	08 95       	ret

00003fa8 <LM35_voidInit>:
#include "LM35_private.h"
#include "LM35_config.h"


void LM35_voidInit(LM35_t * LM35)
{
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	00 d0       	rcall	.+0      	; 0x3fae <LM35_voidInit+0x6>
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	9a 83       	std	Y+2, r25	; 0x02
    3fb4:	89 83       	std	Y+1, r24	; 0x01
    static u8 Local_u8InitFlag = 0;
    
    DIO_voidSetPinDirection(LM35->Port, LM35->Pin, INPUT);
    3fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3fba:	80 81       	ld	r24, Z
    3fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    3fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc0:	91 81       	ldd	r25, Z+1	; 0x01
    3fc2:	69 2f       	mov	r22, r25
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>

    if(Local_u8InitFlag == 0)
    3fca:	80 91 98 01 	lds	r24, 0x0198
    3fce:	88 23       	and	r24, r24
    3fd0:	29 f4       	brne	.+10     	; 0x3fdc <LM35_voidInit+0x34>
    {
        ADC_voidInit();
    3fd2:	0e 94 13 1c 	call	0x3826	; 0x3826 <ADC_voidInit>
        Local_u8InitFlag = 1;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	80 93 98 01 	sts	0x0198, r24
    }
    else{}

}
    3fdc:	0f 90       	pop	r0
    3fde:	0f 90       	pop	r0
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	08 95       	ret

00003fe6 <LM35_u8GetTemp>:

u8  LM35_u8GetTemp(LM35_t * LM35)
{
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
    3fee:	2d 97       	sbiw	r28, 0x0d	; 13
    3ff0:	0f b6       	in	r0, 0x3f	; 63
    3ff2:	f8 94       	cli
    3ff4:	de bf       	out	0x3e, r29	; 62
    3ff6:	0f be       	out	0x3f, r0	; 63
    3ff8:	cd bf       	out	0x3d, r28	; 61
    3ffa:	9d 87       	std	Y+13, r25	; 0x0d
    3ffc:	8c 87       	std	Y+12, r24	; 0x0c
    u16 Local_u16DigitalValue;
    f32 Local_f32MilliVolt;
    f32 Local_f32AcurateDegree;
    u8 Local_u8Degree;

    Local_u16DigitalValue = ADC_u16StartConversionSynchronous(LM35->Pin);
    3ffe:	ec 85       	ldd	r30, Y+12	; 0x0c
    4000:	fd 85       	ldd	r31, Y+13	; 0x0d
    4002:	81 81       	ldd	r24, Z+1	; 0x01
    4004:	0e 94 af 1c 	call	0x395e	; 0x395e <ADC_u16StartConversionSynchronous>
    4008:	9b 87       	std	Y+11, r25	; 0x0b
    400a:	8a 87       	std	Y+10, r24	; 0x0a
    Local_f32MilliVolt = ((f32)Local_u16DigitalValue * MAX_MILLI_VOLT) / (f32)RESOLUTION;
    400c:	8a 85       	ldd	r24, Y+10	; 0x0a
    400e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4010:	cc 01       	movw	r24, r24
    4012:	a0 e0       	ldi	r26, 0x00	; 0
    4014:	b0 e0       	ldi	r27, 0x00	; 0
    4016:	bc 01       	movw	r22, r24
    4018:	cd 01       	movw	r24, r26
    401a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e4       	ldi	r19, 0x40	; 64
    402a:	4c e9       	ldi	r20, 0x9C	; 156
    402c:	55 e4       	ldi	r21, 0x45	; 69
    402e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4032:	dc 01       	movw	r26, r24
    4034:	cb 01       	movw	r24, r22
    4036:	bc 01       	movw	r22, r24
    4038:	cd 01       	movw	r24, r26
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e8       	ldi	r20, 0x80	; 128
    4040:	54 e4       	ldi	r21, 0x44	; 68
    4042:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	8e 83       	std	Y+6, r24	; 0x06
    404c:	9f 83       	std	Y+7, r25	; 0x07
    404e:	a8 87       	std	Y+8, r26	; 0x08
    4050:	b9 87       	std	Y+9, r27	; 0x09

    Local_f32AcurateDegree = Local_f32MilliVolt / MILLI_VOLT_DEGREE;
    4052:	6e 81       	ldd	r22, Y+6	; 0x06
    4054:	7f 81       	ldd	r23, Y+7	; 0x07
    4056:	88 85       	ldd	r24, Y+8	; 0x08
    4058:	99 85       	ldd	r25, Y+9	; 0x09
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	40 e2       	ldi	r20, 0x20	; 32
    4060:	51 e4       	ldi	r21, 0x41	; 65
    4062:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	8a 83       	std	Y+2, r24	; 0x02
    406c:	9b 83       	std	Y+3, r25	; 0x03
    406e:	ac 83       	std	Y+4, r26	; 0x04
    4070:	bd 83       	std	Y+5, r27	; 0x05

    if((Local_f32AcurateDegree - (s32)Local_f32AcurateDegree) >= 0.5)
    4072:	6a 81       	ldd	r22, Y+2	; 0x02
    4074:	7b 81       	ldd	r23, Y+3	; 0x03
    4076:	8c 81       	ldd	r24, Y+4	; 0x04
    4078:	9d 81       	ldd	r25, Y+5	; 0x05
    407a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	aa 27       	eor	r26, r26
    4084:	97 fd       	sbrc	r25, 7
    4086:	a0 95       	com	r26
    4088:	ba 2f       	mov	r27, r26
    408a:	bc 01       	movw	r22, r24
    408c:	cd 01       	movw	r24, r26
    408e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4092:	9b 01       	movw	r18, r22
    4094:	ac 01       	movw	r20, r24
    4096:	6a 81       	ldd	r22, Y+2	; 0x02
    4098:	7b 81       	ldd	r23, Y+3	; 0x03
    409a:	8c 81       	ldd	r24, Y+4	; 0x04
    409c:	9d 81       	ldd	r25, Y+5	; 0x05
    409e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	bc 01       	movw	r22, r24
    40a8:	cd 01       	movw	r24, r26
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e0       	ldi	r20, 0x00	; 0
    40b0:	5f e3       	ldi	r21, 0x3F	; 63
    40b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    40b6:	88 23       	and	r24, r24
    40b8:	84 f0       	brlt	.+32     	; 0x40da <LM35_u8GetTemp+0xf4>
    {
    	Local_f32AcurateDegree += 1.0;
    40ba:	6a 81       	ldd	r22, Y+2	; 0x02
    40bc:	7b 81       	ldd	r23, Y+3	; 0x03
    40be:	8c 81       	ldd	r24, Y+4	; 0x04
    40c0:	9d 81       	ldd	r25, Y+5	; 0x05
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	40 e8       	ldi	r20, 0x80	; 128
    40c8:	5f e3       	ldi	r21, 0x3F	; 63
    40ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    40ce:	dc 01       	movw	r26, r24
    40d0:	cb 01       	movw	r24, r22
    40d2:	8a 83       	std	Y+2, r24	; 0x02
    40d4:	9b 83       	std	Y+3, r25	; 0x03
    40d6:	ac 83       	std	Y+4, r26	; 0x04
    40d8:	bd 83       	std	Y+5, r27	; 0x05
    }

    Local_u8Degree = (u8)Local_f32AcurateDegree;
    40da:	6a 81       	ldd	r22, Y+2	; 0x02
    40dc:	7b 81       	ldd	r23, Y+3	; 0x03
    40de:	8c 81       	ldd	r24, Y+4	; 0x04
    40e0:	9d 81       	ldd	r25, Y+5	; 0x05
    40e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e6:	dc 01       	movw	r26, r24
    40e8:	cb 01       	movw	r24, r22
    40ea:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8Degree;
    40ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    40ee:	2d 96       	adiw	r28, 0x0d	; 13
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
    40fa:	cf 91       	pop	r28
    40fc:	df 91       	pop	r29
    40fe:	08 95       	ret

00004100 <LED_voidInit>:
 * INPUT Args  : Reference To The LED Structure 
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 * */
void LED_voidInit(const LED_t* Copy_pLed)
{
    4100:	df 93       	push	r29
    4102:	cf 93       	push	r28
    4104:	00 d0       	rcall	.+0      	; 0x4106 <LED_voidInit+0x6>
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	9a 83       	std	Y+2, r25	; 0x02
    410c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pLed)
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	9a 81       	ldd	r25, Y+2	; 0x02
    4112:	00 97       	sbiw	r24, 0x00	; 0
    4114:	51 f0       	breq	.+20     	; 0x412a <LED_voidInit+0x2a>
	{
		DIO_voidSetPinDirection(Copy_pLed->port, Copy_pLed->pin, OUTPUT);
    4116:	e9 81       	ldd	r30, Y+1	; 0x01
    4118:	fa 81       	ldd	r31, Y+2	; 0x02
    411a:	80 81       	ld	r24, Z
    411c:	e9 81       	ldd	r30, Y+1	; 0x01
    411e:	fa 81       	ldd	r31, Y+2	; 0x02
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	69 2f       	mov	r22, r25
    4124:	41 e0       	ldi	r20, 0x01	; 1
    4126:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
	}
	else{}
}
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	cf 91       	pop	r28
    4130:	df 91       	pop	r29
    4132:	08 95       	ret

00004134 <LED_voidON>:
 * INPUT Args  : Reference To The LED Structure 
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 * */
void LED_voidON(const LED_t* Copy_pLed)
{
    4134:	df 93       	push	r29
    4136:	cf 93       	push	r28
    4138:	00 d0       	rcall	.+0      	; 0x413a <LED_voidON+0x6>
    413a:	cd b7       	in	r28, 0x3d	; 61
    413c:	de b7       	in	r29, 0x3e	; 62
    413e:	9a 83       	std	Y+2, r25	; 0x02
    4140:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pLed)
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	9a 81       	ldd	r25, Y+2	; 0x02
    4146:	00 97       	sbiw	r24, 0x00	; 0
    4148:	69 f0       	breq	.+26     	; 0x4164 <LED_voidON+0x30>
		{
			DIO_voidWritePin(Copy_pLed->port, Copy_pLed->pin, Copy_pLed->ON_VOLT_LEVEL);
    414a:	e9 81       	ldd	r30, Y+1	; 0x01
    414c:	fa 81       	ldd	r31, Y+2	; 0x02
    414e:	80 81       	ld	r24, Z
    4150:	e9 81       	ldd	r30, Y+1	; 0x01
    4152:	fa 81       	ldd	r31, Y+2	; 0x02
    4154:	21 81       	ldd	r18, Z+1	; 0x01
    4156:	e9 81       	ldd	r30, Y+1	; 0x01
    4158:	fa 81       	ldd	r31, Y+2	; 0x02
    415a:	92 81       	ldd	r25, Z+2	; 0x02
    415c:	62 2f       	mov	r22, r18
    415e:	49 2f       	mov	r20, r25
    4160:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
		}
		else{}
}
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	cf 91       	pop	r28
    416a:	df 91       	pop	r29
    416c:	08 95       	ret

0000416e <LED_voidOFF>:
 * INPUT Args  : Reference To The LED Structure 
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 * */
void LED_voidOFF(const LED_t* Copy_pLed)
{
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	00 d0       	rcall	.+0      	; 0x4174 <LED_voidOFF+0x6>
    4174:	00 d0       	rcall	.+0      	; 0x4176 <LED_voidOFF+0x8>
    4176:	0f 92       	push	r0
    4178:	cd b7       	in	r28, 0x3d	; 61
    417a:	de b7       	in	r29, 0x3e	; 62
    417c:	9a 83       	std	Y+2, r25	; 0x02
    417e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pLed)
    4180:	89 81       	ldd	r24, Y+1	; 0x01
    4182:	9a 81       	ldd	r25, Y+2	; 0x02
    4184:	00 97       	sbiw	r24, 0x00	; 0
    4186:	a9 f0       	breq	.+42     	; 0x41b2 <LED_voidOFF+0x44>
	{
		DIO_voidWritePin(Copy_pLed->port, Copy_pLed->pin, !(Copy_pLed->ON_VOLT_LEVEL));
    4188:	e9 81       	ldd	r30, Y+1	; 0x01
    418a:	fa 81       	ldd	r31, Y+2	; 0x02
    418c:	80 81       	ld	r24, Z
    418e:	8d 83       	std	Y+5, r24	; 0x05
    4190:	e9 81       	ldd	r30, Y+1	; 0x01
    4192:	fa 81       	ldd	r31, Y+2	; 0x02
    4194:	81 81       	ldd	r24, Z+1	; 0x01
    4196:	8c 83       	std	Y+4, r24	; 0x04
    4198:	e9 81       	ldd	r30, Y+1	; 0x01
    419a:	fa 81       	ldd	r31, Y+2	; 0x02
    419c:	82 81       	ldd	r24, Z+2	; 0x02
    419e:	1b 82       	std	Y+3, r1	; 0x03
    41a0:	88 23       	and	r24, r24
    41a2:	11 f4       	brne	.+4      	; 0x41a8 <LED_voidOFF+0x3a>
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	8b 83       	std	Y+3, r24	; 0x03
    41a8:	8d 81       	ldd	r24, Y+5	; 0x05
    41aa:	6c 81       	ldd	r22, Y+4	; 0x04
    41ac:	4b 81       	ldd	r20, Y+3	; 0x03
    41ae:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
	}
	else{}
}
    41b2:	0f 90       	pop	r0
    41b4:	0f 90       	pop	r0
    41b6:	0f 90       	pop	r0
    41b8:	0f 90       	pop	r0
    41ba:	0f 90       	pop	r0
    41bc:	cf 91       	pop	r28
    41be:	df 91       	pop	r29
    41c0:	08 95       	ret

000041c2 <LCD_voidInit>:

}

#elif (LCD_MODE == FOUR_BIT_MODE_SEPARATE_PORT_PINS)
void LCD_voidInit(void)
{
    41c2:	df 93       	push	r29
    41c4:	cf 93       	push	r28
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62
    41ca:	2e 97       	sbiw	r28, 0x0e	; 14
    41cc:	0f b6       	in	r0, 0x3f	; 63
    41ce:	f8 94       	cli
    41d0:	de bf       	out	0x3e, r29	; 62
    41d2:	0f be       	out	0x3f, r0	; 63
    41d4:	cd bf       	out	0x3d, r28	; 61
    //initialize Data Pins
    DIO_voidSetPinDirection(LCD_D4_PORT, D4, OUTPUT);
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	41 e0       	ldi	r20, 0x01	; 1
    41dc:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_D5_PORT, D5, OUTPUT);
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	60 e0       	ldi	r22, 0x00	; 0
    41e4:	41 e0       	ldi	r20, 0x01	; 1
    41e6:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_D6_PORT, D6, OUTPUT);
    41ea:	82 e0       	ldi	r24, 0x02	; 2
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	41 e0       	ldi	r20, 0x01	; 1
    41f0:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_D7_PORT, D7, OUTPUT);
    41f4:	83 e0       	ldi	r24, 0x03	; 3
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	41 e0       	ldi	r20, 0x01	; 1
    41fa:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
    //Initialize Control Pins
	DIO_voidSetPinDirection(LCD_RS_PORT, RS, OUTPUT);
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	61 e0       	ldi	r22, 0x01	; 1
    4202:	41 e0       	ldi	r20, 0x01	; 1
    4204:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
#if RW != NC
	DIO_voidSetPinDirection(LCD_RW_PORT, RW, OUTPUT);
#endif
	DIO_voidSetPinDirection(LCD_EN_PORT, EN, OUTPUT);
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	61 e0       	ldi	r22, 0x01	; 1
    420c:	41 e0       	ldi	r20, 0x01	; 1
    420e:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	a8 e4       	ldi	r26, 0x48	; 72
    4218:	b2 e4       	ldi	r27, 0x42	; 66
    421a:	8b 87       	std	Y+11, r24	; 0x0b
    421c:	9c 87       	std	Y+12, r25	; 0x0c
    421e:	ad 87       	std	Y+13, r26	; 0x0d
    4220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4222:	6b 85       	ldd	r22, Y+11	; 0x0b
    4224:	7c 85       	ldd	r23, Y+12	; 0x0c
    4226:	8d 85       	ldd	r24, Y+13	; 0x0d
    4228:	9e 85       	ldd	r25, Y+14	; 0x0e
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	4a ef       	ldi	r20, 0xFA	; 250
    4230:	54 e4       	ldi	r21, 0x44	; 68
    4232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4236:	dc 01       	movw	r26, r24
    4238:	cb 01       	movw	r24, r22
    423a:	8f 83       	std	Y+7, r24	; 0x07
    423c:	98 87       	std	Y+8, r25	; 0x08
    423e:	a9 87       	std	Y+9, r26	; 0x09
    4240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4242:	6f 81       	ldd	r22, Y+7	; 0x07
    4244:	78 85       	ldd	r23, Y+8	; 0x08
    4246:	89 85       	ldd	r24, Y+9	; 0x09
    4248:	9a 85       	ldd	r25, Y+10	; 0x0a
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	40 e8       	ldi	r20, 0x80	; 128
    4250:	5f e3       	ldi	r21, 0x3F	; 63
    4252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4256:	88 23       	and	r24, r24
    4258:	2c f4       	brge	.+10     	; 0x4264 <LCD_voidInit+0xa2>
		__ticks = 1;
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	9e 83       	std	Y+6, r25	; 0x06
    4260:	8d 83       	std	Y+5, r24	; 0x05
    4262:	3f c0       	rjmp	.+126    	; 0x42e2 <LCD_voidInit+0x120>
	else if (__tmp > 65535)
    4264:	6f 81       	ldd	r22, Y+7	; 0x07
    4266:	78 85       	ldd	r23, Y+8	; 0x08
    4268:	89 85       	ldd	r24, Y+9	; 0x09
    426a:	9a 85       	ldd	r25, Y+10	; 0x0a
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	3f ef       	ldi	r19, 0xFF	; 255
    4270:	4f e7       	ldi	r20, 0x7F	; 127
    4272:	57 e4       	ldi	r21, 0x47	; 71
    4274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4278:	18 16       	cp	r1, r24
    427a:	4c f5       	brge	.+82     	; 0x42ce <LCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    427c:	6b 85       	ldd	r22, Y+11	; 0x0b
    427e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4280:	8d 85       	ldd	r24, Y+13	; 0x0d
    4282:	9e 85       	ldd	r25, Y+14	; 0x0e
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	40 e2       	ldi	r20, 0x20	; 32
    428a:	51 e4       	ldi	r21, 0x41	; 65
    428c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	bc 01       	movw	r22, r24
    4296:	cd 01       	movw	r24, r26
    4298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	9e 83       	std	Y+6, r25	; 0x06
    42a2:	8d 83       	std	Y+5, r24	; 0x05
    42a4:	0f c0       	rjmp	.+30     	; 0x42c4 <LCD_voidInit+0x102>
    42a6:	88 ec       	ldi	r24, 0xC8	; 200
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	9c 83       	std	Y+4, r25	; 0x04
    42ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42ae:	8b 81       	ldd	r24, Y+3	; 0x03
    42b0:	9c 81       	ldd	r25, Y+4	; 0x04
    42b2:	01 97       	sbiw	r24, 0x01	; 1
    42b4:	f1 f7       	brne	.-4      	; 0x42b2 <LCD_voidInit+0xf0>
    42b6:	9c 83       	std	Y+4, r25	; 0x04
    42b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ba:	8d 81       	ldd	r24, Y+5	; 0x05
    42bc:	9e 81       	ldd	r25, Y+6	; 0x06
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	9e 83       	std	Y+6, r25	; 0x06
    42c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42c4:	8d 81       	ldd	r24, Y+5	; 0x05
    42c6:	9e 81       	ldd	r25, Y+6	; 0x06
    42c8:	00 97       	sbiw	r24, 0x00	; 0
    42ca:	69 f7       	brne	.-38     	; 0x42a6 <LCD_voidInit+0xe4>
    42cc:	14 c0       	rjmp	.+40     	; 0x42f6 <LCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ce:	6f 81       	ldd	r22, Y+7	; 0x07
    42d0:	78 85       	ldd	r23, Y+8	; 0x08
    42d2:	89 85       	ldd	r24, Y+9	; 0x09
    42d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	9e 83       	std	Y+6, r25	; 0x06
    42e0:	8d 83       	std	Y+5, r24	; 0x05
    42e2:	8d 81       	ldd	r24, Y+5	; 0x05
    42e4:	9e 81       	ldd	r25, Y+6	; 0x06
    42e6:	9a 83       	std	Y+2, r25	; 0x02
    42e8:	89 83       	std	Y+1, r24	; 0x01
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	9a 81       	ldd	r25, Y+2	; 0x02
    42ee:	01 97       	sbiw	r24, 0x01	; 1
    42f0:	f1 f7       	brne	.-4      	; 0x42ee <LCD_voidInit+0x12c>
    42f2:	9a 83       	std	Y+2, r25	; 0x02
    42f4:	89 83       	std	Y+1, r24	; 0x01

	//wait for more than 30ms
	_delay_ms(50);

    LCD_voidSendCommand(CMD_SET_4BIT_MODE);
    42f6:	82 e0       	ldi	r24, 0x02	; 2
    42f8:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>

	LCD_voidSendCommand(CMD_SET_4BIT_2LINE_7DOTS);
    42fc:	88 e2       	ldi	r24, 0x28	; 40
    42fe:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>

	LCD_voidSendCommand(CMD_ON_OFF_DISPLAY_ON);
    4302:	8c e0       	ldi	r24, 0x0C	; 12
    4304:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>

	LCD_voidSendCommand(CMD_CLEAR_DISPLAY);
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>
}
    430e:	2e 96       	adiw	r28, 0x0e	; 14
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	f8 94       	cli
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	0f be       	out	0x3f, r0	; 63
    4318:	cd bf       	out	0x3d, r28	; 61
    431a:	cf 91       	pop	r28
    431c:	df 91       	pop	r29
    431e:	08 95       	ret

00004320 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Data)
{
    4320:	df 93       	push	r29
    4322:	cf 93       	push	r28
    4324:	cd b7       	in	r28, 0x3d	; 61
    4326:	de b7       	in	r29, 0x3e	; 62
    4328:	6d 97       	sbiw	r28, 0x1d	; 29
    432a:	0f b6       	in	r0, 0x3f	; 63
    432c:	f8 94       	cli
    432e:	de bf       	out	0x3e, r29	; 62
    4330:	0f be       	out	0x3f, r0	; 63
    4332:	cd bf       	out	0x3d, r28	; 61
    4334:	8d 8f       	std	Y+29, r24	; 0x1d
    //SET RS Pin To Send Command (RS -> 0: Command, 1: Data)
    DIO_voidWritePin(LCD_RS_PORT, RS, HIGH);
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	61 e0       	ldi	r22, 0x01	; 1
    433a:	41 e0       	ldi	r20, 0x01	; 1
    433c:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
#if RW != NC
    //Clear RW Pin To Write The Command (RW -> 0: Write, 1: Read)
    DIO_voidWritePin(LCD_RW_PORT, RW, LOW);
#endif

    DIO_voidWritePin(LCD_D4_PORT, D4, GET_BIT(Copy_u8Data, BIT4));
    4340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4342:	82 95       	swap	r24
    4344:	8f 70       	andi	r24, 0x0F	; 15
    4346:	98 2f       	mov	r25, r24
    4348:	91 70       	andi	r25, 0x01	; 1
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	60 e0       	ldi	r22, 0x00	; 0
    434e:	49 2f       	mov	r20, r25
    4350:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D5_PORT, D5, GET_BIT(Copy_u8Data, BIT5));
    4354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4356:	82 95       	swap	r24
    4358:	86 95       	lsr	r24
    435a:	87 70       	andi	r24, 0x07	; 7
    435c:	98 2f       	mov	r25, r24
    435e:	91 70       	andi	r25, 0x01	; 1
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	49 2f       	mov	r20, r25
    4366:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D6_PORT, D6, GET_BIT(Copy_u8Data, BIT6));
    436a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    436c:	82 95       	swap	r24
    436e:	86 95       	lsr	r24
    4370:	86 95       	lsr	r24
    4372:	83 70       	andi	r24, 0x03	; 3
    4374:	98 2f       	mov	r25, r24
    4376:	91 70       	andi	r25, 0x01	; 1
    4378:	82 e0       	ldi	r24, 0x02	; 2
    437a:	60 e0       	ldi	r22, 0x00	; 0
    437c:	49 2f       	mov	r20, r25
    437e:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D7_PORT, D7, GET_BIT(Copy_u8Data, BIT7));
    4382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4384:	98 2f       	mov	r25, r24
    4386:	99 1f       	adc	r25, r25
    4388:	99 27       	eor	r25, r25
    438a:	99 1f       	adc	r25, r25
    438c:	83 e0       	ldi	r24, 0x03	; 3
    438e:	60 e0       	ldi	r22, 0x00	; 0
    4390:	49 2f       	mov	r20, r25
    4392:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>

    //Send Enable Pulse
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	61 e0       	ldi	r22, 0x01	; 1
    439a:	40 e0       	ldi	r20, 0x00	; 0
    439c:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    //HIGH
    DIO_voidWritePin(LCD_EN_PORT, EN, HIGH);
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	61 e0       	ldi	r22, 0x01	; 1
    43a4:	41 e0       	ldi	r20, 0x01	; 1
    43a6:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	a0 e0       	ldi	r26, 0x00	; 0
    43b0:	b0 e4       	ldi	r27, 0x40	; 64
    43b2:	89 8f       	std	Y+25, r24	; 0x19
    43b4:	9a 8f       	std	Y+26, r25	; 0x1a
    43b6:	ab 8f       	std	Y+27, r26	; 0x1b
    43b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ba:	69 8d       	ldd	r22, Y+25	; 0x19
    43bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	4a ef       	ldi	r20, 0xFA	; 250
    43c8:	54 e4       	ldi	r21, 0x44	; 68
    43ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	8d 8b       	std	Y+21, r24	; 0x15
    43d4:	9e 8b       	std	Y+22, r25	; 0x16
    43d6:	af 8b       	std	Y+23, r26	; 0x17
    43d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43da:	6d 89       	ldd	r22, Y+21	; 0x15
    43dc:	7e 89       	ldd	r23, Y+22	; 0x16
    43de:	8f 89       	ldd	r24, Y+23	; 0x17
    43e0:	98 8d       	ldd	r25, Y+24	; 0x18
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	40 e8       	ldi	r20, 0x80	; 128
    43e8:	5f e3       	ldi	r21, 0x3F	; 63
    43ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ee:	88 23       	and	r24, r24
    43f0:	2c f4       	brge	.+10     	; 0x43fc <LCD_voidSendChar+0xdc>
		__ticks = 1;
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	9c 8b       	std	Y+20, r25	; 0x14
    43f8:	8b 8b       	std	Y+19, r24	; 0x13
    43fa:	3f c0       	rjmp	.+126    	; 0x447a <LCD_voidSendChar+0x15a>
	else if (__tmp > 65535)
    43fc:	6d 89       	ldd	r22, Y+21	; 0x15
    43fe:	7e 89       	ldd	r23, Y+22	; 0x16
    4400:	8f 89       	ldd	r24, Y+23	; 0x17
    4402:	98 8d       	ldd	r25, Y+24	; 0x18
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	3f ef       	ldi	r19, 0xFF	; 255
    4408:	4f e7       	ldi	r20, 0x7F	; 127
    440a:	57 e4       	ldi	r21, 0x47	; 71
    440c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4410:	18 16       	cp	r1, r24
    4412:	4c f5       	brge	.+82     	; 0x4466 <LCD_voidSendChar+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4414:	69 8d       	ldd	r22, Y+25	; 0x19
    4416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    441a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e2       	ldi	r20, 0x20	; 32
    4422:	51 e4       	ldi	r21, 0x41	; 65
    4424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	bc 01       	movw	r22, r24
    442e:	cd 01       	movw	r24, r26
    4430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4434:	dc 01       	movw	r26, r24
    4436:	cb 01       	movw	r24, r22
    4438:	9c 8b       	std	Y+20, r25	; 0x14
    443a:	8b 8b       	std	Y+19, r24	; 0x13
    443c:	0f c0       	rjmp	.+30     	; 0x445c <LCD_voidSendChar+0x13c>
    443e:	88 ec       	ldi	r24, 0xC8	; 200
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	9a 8b       	std	Y+18, r25	; 0x12
    4444:	89 8b       	std	Y+17, r24	; 0x11
    4446:	89 89       	ldd	r24, Y+17	; 0x11
    4448:	9a 89       	ldd	r25, Y+18	; 0x12
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	f1 f7       	brne	.-4      	; 0x444a <LCD_voidSendChar+0x12a>
    444e:	9a 8b       	std	Y+18, r25	; 0x12
    4450:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4452:	8b 89       	ldd	r24, Y+19	; 0x13
    4454:	9c 89       	ldd	r25, Y+20	; 0x14
    4456:	01 97       	sbiw	r24, 0x01	; 1
    4458:	9c 8b       	std	Y+20, r25	; 0x14
    445a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445c:	8b 89       	ldd	r24, Y+19	; 0x13
    445e:	9c 89       	ldd	r25, Y+20	; 0x14
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	69 f7       	brne	.-38     	; 0x443e <LCD_voidSendChar+0x11e>
    4464:	14 c0       	rjmp	.+40     	; 0x448e <LCD_voidSendChar+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4466:	6d 89       	ldd	r22, Y+21	; 0x15
    4468:	7e 89       	ldd	r23, Y+22	; 0x16
    446a:	8f 89       	ldd	r24, Y+23	; 0x17
    446c:	98 8d       	ldd	r25, Y+24	; 0x18
    446e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	9c 8b       	std	Y+20, r25	; 0x14
    4478:	8b 8b       	std	Y+19, r24	; 0x13
    447a:	8b 89       	ldd	r24, Y+19	; 0x13
    447c:	9c 89       	ldd	r25, Y+20	; 0x14
    447e:	98 8b       	std	Y+16, r25	; 0x10
    4480:	8f 87       	std	Y+15, r24	; 0x0f
    4482:	8f 85       	ldd	r24, Y+15	; 0x0f
    4484:	98 89       	ldd	r25, Y+16	; 0x10
    4486:	01 97       	sbiw	r24, 0x01	; 1
    4488:	f1 f7       	brne	.-4      	; 0x4486 <LCD_voidSendChar+0x166>
    448a:	98 8b       	std	Y+16, r25	; 0x10
    448c:	8f 87       	std	Y+15, r24	; 0x0f
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	61 e0       	ldi	r22, 0x01	; 1
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>

    DIO_voidWritePin(LCD_D4_PORT, D4, GET_BIT(Copy_u8Data, BIT0));
    4498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    449a:	98 2f       	mov	r25, r24
    449c:	91 70       	andi	r25, 0x01	; 1
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	60 e0       	ldi	r22, 0x00	; 0
    44a2:	49 2f       	mov	r20, r25
    44a4:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D5_PORT, D5, GET_BIT(Copy_u8Data, BIT1));
    44a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44aa:	86 95       	lsr	r24
    44ac:	98 2f       	mov	r25, r24
    44ae:	91 70       	andi	r25, 0x01	; 1
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	60 e0       	ldi	r22, 0x00	; 0
    44b4:	49 2f       	mov	r20, r25
    44b6:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D6_PORT, D6, GET_BIT(Copy_u8Data, BIT2));
    44ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44bc:	86 95       	lsr	r24
    44be:	86 95       	lsr	r24
    44c0:	98 2f       	mov	r25, r24
    44c2:	91 70       	andi	r25, 0x01	; 1
    44c4:	82 e0       	ldi	r24, 0x02	; 2
    44c6:	60 e0       	ldi	r22, 0x00	; 0
    44c8:	49 2f       	mov	r20, r25
    44ca:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D7_PORT, D7, GET_BIT(Copy_u8Data, BIT3));
    44ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44d0:	86 95       	lsr	r24
    44d2:	86 95       	lsr	r24
    44d4:	86 95       	lsr	r24
    44d6:	98 2f       	mov	r25, r24
    44d8:	91 70       	andi	r25, 0x01	; 1
    44da:	83 e0       	ldi	r24, 0x03	; 3
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	49 2f       	mov	r20, r25
    44e0:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>

    //Send Enable Pulse
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	61 e0       	ldi	r22, 0x01	; 1
    44e8:	40 e0       	ldi	r20, 0x00	; 0
    44ea:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    //HIGH
    DIO_voidWritePin(LCD_EN_PORT, EN, HIGH);
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	61 e0       	ldi	r22, 0x01	; 1
    44f2:	41 e0       	ldi	r20, 0x01	; 1
    44f4:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	a0 e0       	ldi	r26, 0x00	; 0
    44fe:	b0 e4       	ldi	r27, 0x40	; 64
    4500:	8b 87       	std	Y+11, r24	; 0x0b
    4502:	9c 87       	std	Y+12, r25	; 0x0c
    4504:	ad 87       	std	Y+13, r26	; 0x0d
    4506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4508:	6b 85       	ldd	r22, Y+11	; 0x0b
    450a:	7c 85       	ldd	r23, Y+12	; 0x0c
    450c:	8d 85       	ldd	r24, Y+13	; 0x0d
    450e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	4a ef       	ldi	r20, 0xFA	; 250
    4516:	54 e4       	ldi	r21, 0x44	; 68
    4518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	8f 83       	std	Y+7, r24	; 0x07
    4522:	98 87       	std	Y+8, r25	; 0x08
    4524:	a9 87       	std	Y+9, r26	; 0x09
    4526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4528:	6f 81       	ldd	r22, Y+7	; 0x07
    452a:	78 85       	ldd	r23, Y+8	; 0x08
    452c:	89 85       	ldd	r24, Y+9	; 0x09
    452e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	40 e8       	ldi	r20, 0x80	; 128
    4536:	5f e3       	ldi	r21, 0x3F	; 63
    4538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    453c:	88 23       	and	r24, r24
    453e:	2c f4       	brge	.+10     	; 0x454a <LCD_voidSendChar+0x22a>
		__ticks = 1;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	9e 83       	std	Y+6, r25	; 0x06
    4546:	8d 83       	std	Y+5, r24	; 0x05
    4548:	3f c0       	rjmp	.+126    	; 0x45c8 <LCD_voidSendChar+0x2a8>
	else if (__tmp > 65535)
    454a:	6f 81       	ldd	r22, Y+7	; 0x07
    454c:	78 85       	ldd	r23, Y+8	; 0x08
    454e:	89 85       	ldd	r24, Y+9	; 0x09
    4550:	9a 85       	ldd	r25, Y+10	; 0x0a
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	3f ef       	ldi	r19, 0xFF	; 255
    4556:	4f e7       	ldi	r20, 0x7F	; 127
    4558:	57 e4       	ldi	r21, 0x47	; 71
    455a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    455e:	18 16       	cp	r1, r24
    4560:	4c f5       	brge	.+82     	; 0x45b4 <LCD_voidSendChar+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4562:	6b 85       	ldd	r22, Y+11	; 0x0b
    4564:	7c 85       	ldd	r23, Y+12	; 0x0c
    4566:	8d 85       	ldd	r24, Y+13	; 0x0d
    4568:	9e 85       	ldd	r25, Y+14	; 0x0e
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e2       	ldi	r20, 0x20	; 32
    4570:	51 e4       	ldi	r21, 0x41	; 65
    4572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	bc 01       	movw	r22, r24
    457c:	cd 01       	movw	r24, r26
    457e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	8d 83       	std	Y+5, r24	; 0x05
    458a:	0f c0       	rjmp	.+30     	; 0x45aa <LCD_voidSendChar+0x28a>
    458c:	88 ec       	ldi	r24, 0xC8	; 200
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	9c 83       	std	Y+4, r25	; 0x04
    4592:	8b 83       	std	Y+3, r24	; 0x03
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	9c 81       	ldd	r25, Y+4	; 0x04
    4598:	01 97       	sbiw	r24, 0x01	; 1
    459a:	f1 f7       	brne	.-4      	; 0x4598 <LCD_voidSendChar+0x278>
    459c:	9c 83       	std	Y+4, r25	; 0x04
    459e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a0:	8d 81       	ldd	r24, Y+5	; 0x05
    45a2:	9e 81       	ldd	r25, Y+6	; 0x06
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	9e 83       	std	Y+6, r25	; 0x06
    45a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45aa:	8d 81       	ldd	r24, Y+5	; 0x05
    45ac:	9e 81       	ldd	r25, Y+6	; 0x06
    45ae:	00 97       	sbiw	r24, 0x00	; 0
    45b0:	69 f7       	brne	.-38     	; 0x458c <LCD_voidSendChar+0x26c>
    45b2:	14 c0       	rjmp	.+40     	; 0x45dc <LCD_voidSendChar+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b4:	6f 81       	ldd	r22, Y+7	; 0x07
    45b6:	78 85       	ldd	r23, Y+8	; 0x08
    45b8:	89 85       	ldd	r24, Y+9	; 0x09
    45ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    45bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	9e 83       	std	Y+6, r25	; 0x06
    45c6:	8d 83       	std	Y+5, r24	; 0x05
    45c8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ca:	9e 81       	ldd	r25, Y+6	; 0x06
    45cc:	9a 83       	std	Y+2, r25	; 0x02
    45ce:	89 83       	std	Y+1, r24	; 0x01
    45d0:	89 81       	ldd	r24, Y+1	; 0x01
    45d2:	9a 81       	ldd	r25, Y+2	; 0x02
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	f1 f7       	brne	.-4      	; 0x45d4 <LCD_voidSendChar+0x2b4>
    45d8:	9a 83       	std	Y+2, r25	; 0x02
    45da:	89 83       	std	Y+1, r24	; 0x01
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	61 e0       	ldi	r22, 0x01	; 1
    45e0:	40 e0       	ldi	r20, 0x00	; 0
    45e2:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>

}
    45e6:	6d 96       	adiw	r28, 0x1d	; 29
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	f8 94       	cli
    45ec:	de bf       	out	0x3e, r29	; 62
    45ee:	0f be       	out	0x3f, r0	; 63
    45f0:	cd bf       	out	0x3d, r28	; 61
    45f2:	cf 91       	pop	r28
    45f4:	df 91       	pop	r29
    45f6:	08 95       	ret

000045f8 <LCD_voidSendCommand>:


static void LCD_voidSendCommand(u8 Copy_u8Command)
{
    45f8:	df 93       	push	r29
    45fa:	cf 93       	push	r28
    45fc:	cd b7       	in	r28, 0x3d	; 61
    45fe:	de b7       	in	r29, 0x3e	; 62
    4600:	6d 97       	sbiw	r28, 0x1d	; 29
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	f8 94       	cli
    4606:	de bf       	out	0x3e, r29	; 62
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	8d 8f       	std	Y+29, r24	; 0x1d
    //Clear RS Pin To Send Command (RS -> 0: Command, 1: Data)
    DIO_voidWritePin(LCD_RS_PORT, RS, LOW);
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	61 e0       	ldi	r22, 0x01	; 1
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
#if RW != NC
    //Clear RW Pin To Write The Command (RW -> 0: Write, 1: Read)
    DIO_voidWritePin(LCD_RW_PORT, RW, LOW);
#endif

    DIO_voidWritePin(LCD_D4_PORT, D4, GET_BIT(Copy_u8Command, BIT4));
    4618:	8d 8d       	ldd	r24, Y+29	; 0x1d
    461a:	82 95       	swap	r24
    461c:	8f 70       	andi	r24, 0x0F	; 15
    461e:	98 2f       	mov	r25, r24
    4620:	91 70       	andi	r25, 0x01	; 1
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	60 e0       	ldi	r22, 0x00	; 0
    4626:	49 2f       	mov	r20, r25
    4628:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D5_PORT, D5, GET_BIT(Copy_u8Command, BIT5));
    462c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    462e:	82 95       	swap	r24
    4630:	86 95       	lsr	r24
    4632:	87 70       	andi	r24, 0x07	; 7
    4634:	98 2f       	mov	r25, r24
    4636:	91 70       	andi	r25, 0x01	; 1
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	60 e0       	ldi	r22, 0x00	; 0
    463c:	49 2f       	mov	r20, r25
    463e:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D6_PORT, D6, GET_BIT(Copy_u8Command, BIT6));
    4642:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4644:	82 95       	swap	r24
    4646:	86 95       	lsr	r24
    4648:	86 95       	lsr	r24
    464a:	83 70       	andi	r24, 0x03	; 3
    464c:	98 2f       	mov	r25, r24
    464e:	91 70       	andi	r25, 0x01	; 1
    4650:	82 e0       	ldi	r24, 0x02	; 2
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	49 2f       	mov	r20, r25
    4656:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D7_PORT, D7, GET_BIT(Copy_u8Command, BIT7));
    465a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    465c:	98 2f       	mov	r25, r24
    465e:	99 1f       	adc	r25, r25
    4660:	99 27       	eor	r25, r25
    4662:	99 1f       	adc	r25, r25
    4664:	83 e0       	ldi	r24, 0x03	; 3
    4666:	60 e0       	ldi	r22, 0x00	; 0
    4668:	49 2f       	mov	r20, r25
    466a:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>

    //Send Enable Pulse
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	61 e0       	ldi	r22, 0x01	; 1
    4672:	40 e0       	ldi	r20, 0x00	; 0
    4674:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    //HIGH
    DIO_voidWritePin(LCD_EN_PORT, EN, HIGH);
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	61 e0       	ldi	r22, 0x01	; 1
    467c:	41 e0       	ldi	r20, 0x01	; 1
    467e:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	a0 e0       	ldi	r26, 0x00	; 0
    4688:	b0 e4       	ldi	r27, 0x40	; 64
    468a:	89 8f       	std	Y+25, r24	; 0x19
    468c:	9a 8f       	std	Y+26, r25	; 0x1a
    468e:	ab 8f       	std	Y+27, r26	; 0x1b
    4690:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4692:	69 8d       	ldd	r22, Y+25	; 0x19
    4694:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	4a ef       	ldi	r20, 0xFA	; 250
    46a0:	54 e4       	ldi	r21, 0x44	; 68
    46a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	8d 8b       	std	Y+21, r24	; 0x15
    46ac:	9e 8b       	std	Y+22, r25	; 0x16
    46ae:	af 8b       	std	Y+23, r26	; 0x17
    46b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46b2:	6d 89       	ldd	r22, Y+21	; 0x15
    46b4:	7e 89       	ldd	r23, Y+22	; 0x16
    46b6:	8f 89       	ldd	r24, Y+23	; 0x17
    46b8:	98 8d       	ldd	r25, Y+24	; 0x18
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	40 e8       	ldi	r20, 0x80	; 128
    46c0:	5f e3       	ldi	r21, 0x3F	; 63
    46c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46c6:	88 23       	and	r24, r24
    46c8:	2c f4       	brge	.+10     	; 0x46d4 <LCD_voidSendCommand+0xdc>
		__ticks = 1;
    46ca:	81 e0       	ldi	r24, 0x01	; 1
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	9c 8b       	std	Y+20, r25	; 0x14
    46d0:	8b 8b       	std	Y+19, r24	; 0x13
    46d2:	3f c0       	rjmp	.+126    	; 0x4752 <LCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
    46d4:	6d 89       	ldd	r22, Y+21	; 0x15
    46d6:	7e 89       	ldd	r23, Y+22	; 0x16
    46d8:	8f 89       	ldd	r24, Y+23	; 0x17
    46da:	98 8d       	ldd	r25, Y+24	; 0x18
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	3f ef       	ldi	r19, 0xFF	; 255
    46e0:	4f e7       	ldi	r20, 0x7F	; 127
    46e2:	57 e4       	ldi	r21, 0x47	; 71
    46e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46e8:	18 16       	cp	r1, r24
    46ea:	4c f5       	brge	.+82     	; 0x473e <LCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ec:	69 8d       	ldd	r22, Y+25	; 0x19
    46ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	40 e2       	ldi	r20, 0x20	; 32
    46fa:	51 e4       	ldi	r21, 0x41	; 65
    46fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4700:	dc 01       	movw	r26, r24
    4702:	cb 01       	movw	r24, r22
    4704:	bc 01       	movw	r22, r24
    4706:	cd 01       	movw	r24, r26
    4708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    470c:	dc 01       	movw	r26, r24
    470e:	cb 01       	movw	r24, r22
    4710:	9c 8b       	std	Y+20, r25	; 0x14
    4712:	8b 8b       	std	Y+19, r24	; 0x13
    4714:	0f c0       	rjmp	.+30     	; 0x4734 <LCD_voidSendCommand+0x13c>
    4716:	88 ec       	ldi	r24, 0xC8	; 200
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	9a 8b       	std	Y+18, r25	; 0x12
    471c:	89 8b       	std	Y+17, r24	; 0x11
    471e:	89 89       	ldd	r24, Y+17	; 0x11
    4720:	9a 89       	ldd	r25, Y+18	; 0x12
    4722:	01 97       	sbiw	r24, 0x01	; 1
    4724:	f1 f7       	brne	.-4      	; 0x4722 <LCD_voidSendCommand+0x12a>
    4726:	9a 8b       	std	Y+18, r25	; 0x12
    4728:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    472a:	8b 89       	ldd	r24, Y+19	; 0x13
    472c:	9c 89       	ldd	r25, Y+20	; 0x14
    472e:	01 97       	sbiw	r24, 0x01	; 1
    4730:	9c 8b       	std	Y+20, r25	; 0x14
    4732:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4734:	8b 89       	ldd	r24, Y+19	; 0x13
    4736:	9c 89       	ldd	r25, Y+20	; 0x14
    4738:	00 97       	sbiw	r24, 0x00	; 0
    473a:	69 f7       	brne	.-38     	; 0x4716 <LCD_voidSendCommand+0x11e>
    473c:	14 c0       	rjmp	.+40     	; 0x4766 <LCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473e:	6d 89       	ldd	r22, Y+21	; 0x15
    4740:	7e 89       	ldd	r23, Y+22	; 0x16
    4742:	8f 89       	ldd	r24, Y+23	; 0x17
    4744:	98 8d       	ldd	r25, Y+24	; 0x18
    4746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    474a:	dc 01       	movw	r26, r24
    474c:	cb 01       	movw	r24, r22
    474e:	9c 8b       	std	Y+20, r25	; 0x14
    4750:	8b 8b       	std	Y+19, r24	; 0x13
    4752:	8b 89       	ldd	r24, Y+19	; 0x13
    4754:	9c 89       	ldd	r25, Y+20	; 0x14
    4756:	98 8b       	std	Y+16, r25	; 0x10
    4758:	8f 87       	std	Y+15, r24	; 0x0f
    475a:	8f 85       	ldd	r24, Y+15	; 0x0f
    475c:	98 89       	ldd	r25, Y+16	; 0x10
    475e:	01 97       	sbiw	r24, 0x01	; 1
    4760:	f1 f7       	brne	.-4      	; 0x475e <LCD_voidSendCommand+0x166>
    4762:	98 8b       	std	Y+16, r25	; 0x10
    4764:	8f 87       	std	Y+15, r24	; 0x0f
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	61 e0       	ldi	r22, 0x01	; 1
    476a:	40 e0       	ldi	r20, 0x00	; 0
    476c:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>

    DIO_voidWritePin(LCD_D4_PORT, D4, GET_BIT(Copy_u8Command, BIT0));
    4770:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4772:	98 2f       	mov	r25, r24
    4774:	91 70       	andi	r25, 0x01	; 1
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	60 e0       	ldi	r22, 0x00	; 0
    477a:	49 2f       	mov	r20, r25
    477c:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D5_PORT, D5, GET_BIT(Copy_u8Command, BIT1));
    4780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4782:	86 95       	lsr	r24
    4784:	98 2f       	mov	r25, r24
    4786:	91 70       	andi	r25, 0x01	; 1
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	60 e0       	ldi	r22, 0x00	; 0
    478c:	49 2f       	mov	r20, r25
    478e:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D6_PORT, D6, GET_BIT(Copy_u8Command, BIT2));
    4792:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4794:	86 95       	lsr	r24
    4796:	86 95       	lsr	r24
    4798:	98 2f       	mov	r25, r24
    479a:	91 70       	andi	r25, 0x01	; 1
    479c:	82 e0       	ldi	r24, 0x02	; 2
    479e:	60 e0       	ldi	r22, 0x00	; 0
    47a0:	49 2f       	mov	r20, r25
    47a2:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    DIO_voidWritePin(LCD_D7_PORT, D7, GET_BIT(Copy_u8Command, BIT3));
    47a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47a8:	86 95       	lsr	r24
    47aa:	86 95       	lsr	r24
    47ac:	86 95       	lsr	r24
    47ae:	98 2f       	mov	r25, r24
    47b0:	91 70       	andi	r25, 0x01	; 1
    47b2:	83 e0       	ldi	r24, 0x03	; 3
    47b4:	60 e0       	ldi	r22, 0x00	; 0
    47b6:	49 2f       	mov	r20, r25
    47b8:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    //Send Enable Pulse
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	61 e0       	ldi	r22, 0x01	; 1
    47c0:	40 e0       	ldi	r20, 0x00	; 0
    47c2:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    //HIGH
    DIO_voidWritePin(LCD_EN_PORT, EN, HIGH);
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	61 e0       	ldi	r22, 0x01	; 1
    47ca:	41 e0       	ldi	r20, 0x01	; 1
    47cc:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	a0 e0       	ldi	r26, 0x00	; 0
    47d6:	b0 e4       	ldi	r27, 0x40	; 64
    47d8:	8b 87       	std	Y+11, r24	; 0x0b
    47da:	9c 87       	std	Y+12, r25	; 0x0c
    47dc:	ad 87       	std	Y+13, r26	; 0x0d
    47de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	4a ef       	ldi	r20, 0xFA	; 250
    47ee:	54 e4       	ldi	r21, 0x44	; 68
    47f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f4:	dc 01       	movw	r26, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	8f 83       	std	Y+7, r24	; 0x07
    47fa:	98 87       	std	Y+8, r25	; 0x08
    47fc:	a9 87       	std	Y+9, r26	; 0x09
    47fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4800:	6f 81       	ldd	r22, Y+7	; 0x07
    4802:	78 85       	ldd	r23, Y+8	; 0x08
    4804:	89 85       	ldd	r24, Y+9	; 0x09
    4806:	9a 85       	ldd	r25, Y+10	; 0x0a
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	40 e8       	ldi	r20, 0x80	; 128
    480e:	5f e3       	ldi	r21, 0x3F	; 63
    4810:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4814:	88 23       	and	r24, r24
    4816:	2c f4       	brge	.+10     	; 0x4822 <LCD_voidSendCommand+0x22a>
		__ticks = 1;
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	9e 83       	std	Y+6, r25	; 0x06
    481e:	8d 83       	std	Y+5, r24	; 0x05
    4820:	3f c0       	rjmp	.+126    	; 0x48a0 <LCD_voidSendCommand+0x2a8>
	else if (__tmp > 65535)
    4822:	6f 81       	ldd	r22, Y+7	; 0x07
    4824:	78 85       	ldd	r23, Y+8	; 0x08
    4826:	89 85       	ldd	r24, Y+9	; 0x09
    4828:	9a 85       	ldd	r25, Y+10	; 0x0a
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	3f ef       	ldi	r19, 0xFF	; 255
    482e:	4f e7       	ldi	r20, 0x7F	; 127
    4830:	57 e4       	ldi	r21, 0x47	; 71
    4832:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4836:	18 16       	cp	r1, r24
    4838:	4c f5       	brge	.+82     	; 0x488c <LCD_voidSendCommand+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483a:	6b 85       	ldd	r22, Y+11	; 0x0b
    483c:	7c 85       	ldd	r23, Y+12	; 0x0c
    483e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4840:	9e 85       	ldd	r25, Y+14	; 0x0e
    4842:	20 e0       	ldi	r18, 0x00	; 0
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	40 e2       	ldi	r20, 0x20	; 32
    4848:	51 e4       	ldi	r21, 0x41	; 65
    484a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    484e:	dc 01       	movw	r26, r24
    4850:	cb 01       	movw	r24, r22
    4852:	bc 01       	movw	r22, r24
    4854:	cd 01       	movw	r24, r26
    4856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	9e 83       	std	Y+6, r25	; 0x06
    4860:	8d 83       	std	Y+5, r24	; 0x05
    4862:	0f c0       	rjmp	.+30     	; 0x4882 <LCD_voidSendCommand+0x28a>
    4864:	88 ec       	ldi	r24, 0xC8	; 200
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	9c 83       	std	Y+4, r25	; 0x04
    486a:	8b 83       	std	Y+3, r24	; 0x03
    486c:	8b 81       	ldd	r24, Y+3	; 0x03
    486e:	9c 81       	ldd	r25, Y+4	; 0x04
    4870:	01 97       	sbiw	r24, 0x01	; 1
    4872:	f1 f7       	brne	.-4      	; 0x4870 <LCD_voidSendCommand+0x278>
    4874:	9c 83       	std	Y+4, r25	; 0x04
    4876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4878:	8d 81       	ldd	r24, Y+5	; 0x05
    487a:	9e 81       	ldd	r25, Y+6	; 0x06
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	9e 83       	std	Y+6, r25	; 0x06
    4880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4882:	8d 81       	ldd	r24, Y+5	; 0x05
    4884:	9e 81       	ldd	r25, Y+6	; 0x06
    4886:	00 97       	sbiw	r24, 0x00	; 0
    4888:	69 f7       	brne	.-38     	; 0x4864 <LCD_voidSendCommand+0x26c>
    488a:	14 c0       	rjmp	.+40     	; 0x48b4 <LCD_voidSendCommand+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    488c:	6f 81       	ldd	r22, Y+7	; 0x07
    488e:	78 85       	ldd	r23, Y+8	; 0x08
    4890:	89 85       	ldd	r24, Y+9	; 0x09
    4892:	9a 85       	ldd	r25, Y+10	; 0x0a
    4894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	9e 83       	std	Y+6, r25	; 0x06
    489e:	8d 83       	std	Y+5, r24	; 0x05
    48a0:	8d 81       	ldd	r24, Y+5	; 0x05
    48a2:	9e 81       	ldd	r25, Y+6	; 0x06
    48a4:	9a 83       	std	Y+2, r25	; 0x02
    48a6:	89 83       	std	Y+1, r24	; 0x01
    48a8:	89 81       	ldd	r24, Y+1	; 0x01
    48aa:	9a 81       	ldd	r25, Y+2	; 0x02
    48ac:	01 97       	sbiw	r24, 0x01	; 1
    48ae:	f1 f7       	brne	.-4      	; 0x48ac <LCD_voidSendCommand+0x2b4>
    48b0:	9a 83       	std	Y+2, r25	; 0x02
    48b2:	89 83       	std	Y+1, r24	; 0x01
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_voidWritePin(LCD_EN_PORT, EN, LOW);
    48b4:	81 e0       	ldi	r24, 0x01	; 1
    48b6:	61 e0       	ldi	r22, 0x01	; 1
    48b8:	40 e0       	ldi	r20, 0x00	; 0
    48ba:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
}
    48be:	6d 96       	adiw	r28, 0x1d	; 29
    48c0:	0f b6       	in	r0, 0x3f	; 63
    48c2:	f8 94       	cli
    48c4:	de bf       	out	0x3e, r29	; 62
    48c6:	0f be       	out	0x3f, r0	; 63
    48c8:	cd bf       	out	0x3d, r28	; 61
    48ca:	cf 91       	pop	r28
    48cc:	df 91       	pop	r29
    48ce:	08 95       	ret

000048d0 <LCD_voidGoToXY>:

#endif


void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    48d0:	df 93       	push	r29
    48d2:	cf 93       	push	r28
    48d4:	00 d0       	rcall	.+0      	; 0x48d6 <LCD_voidGoToXY+0x6>
    48d6:	0f 92       	push	r0
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
    48dc:	8a 83       	std	Y+2, r24	; 0x02
    48de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CharAddress = 0;
    48e0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos == 0)
    48e2:	8a 81       	ldd	r24, Y+2	; 0x02
    48e4:	88 23       	and	r24, r24
    48e6:	31 f4       	brne	.+12     	; 0x48f4 <LCD_voidGoToXY+0x24>
	{
		if(Copy_u8YPos < 16)
    48e8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ea:	80 31       	cpi	r24, 0x10	; 16
    48ec:	60 f4       	brcc	.+24     	; 0x4906 <LCD_voidGoToXY+0x36>
		{
			//Address = Y-Position
			Local_u8CharAddress = Copy_u8YPos;
    48ee:	8b 81       	ldd	r24, Y+3	; 0x03
    48f0:	89 83       	std	Y+1, r24	; 0x01
    48f2:	09 c0       	rjmp	.+18     	; 0x4906 <LCD_voidGoToXY+0x36>
		}else{}
	}
	else if(Copy_u8XPos == 1)
    48f4:	8a 81       	ldd	r24, Y+2	; 0x02
    48f6:	81 30       	cpi	r24, 0x01	; 1
    48f8:	31 f4       	brne	.+12     	; 0x4906 <LCD_voidGoToXY+0x36>
	{
		if(Copy_u8YPos < 16)
    48fa:	8b 81       	ldd	r24, Y+3	; 0x03
    48fc:	80 31       	cpi	r24, 0x10	; 16
    48fe:	18 f4       	brcc	.+6      	; 0x4906 <LCD_voidGoToXY+0x36>
		{
			Local_u8CharAddress = Copy_u8YPos + ROW1_OFFSET;
    4900:	8b 81       	ldd	r24, Y+3	; 0x03
    4902:	80 5c       	subi	r24, 0xC0	; 192
    4904:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Raise Error
	}

	Local_u8CharAddress += ROW1_CMD;
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	80 58       	subi	r24, 0x80	; 128
    490a:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8CharAddress);
    490c:	89 81       	ldd	r24, Y+1	; 0x01
    490e:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>

}
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	cf 91       	pop	r28
    491a:	df 91       	pop	r29
    491c:	08 95       	ret

0000491e <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
    491e:	df 93       	push	r29
    4920:	cf 93       	push	r28
    4922:	00 d0       	rcall	.+0      	; 0x4924 <LCD_voidSendString+0x6>
    4924:	0f 92       	push	r0
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	9b 83       	std	Y+3, r25	; 0x03
    492c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    492e:	19 82       	std	Y+1, r1	; 0x01
    4930:	0e c0       	rjmp	.+28     	; 0x494e <LCD_voidSendString+0x30>

	while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
	{
		LCD_voidSendChar(Copy_pu8StringArray[Local_u8LoopCounter]);
    4932:	89 81       	ldd	r24, Y+1	; 0x01
    4934:	28 2f       	mov	r18, r24
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	8a 81       	ldd	r24, Y+2	; 0x02
    493a:	9b 81       	ldd	r25, Y+3	; 0x03
    493c:	fc 01       	movw	r30, r24
    493e:	e2 0f       	add	r30, r18
    4940:	f3 1f       	adc	r31, r19
    4942:	80 81       	ld	r24, Z
    4944:	0e 94 90 21 	call	0x4320	; 0x4320 <LCD_voidSendChar>
		Local_u8LoopCounter++;
    4948:	89 81       	ldd	r24, Y+1	; 0x01
    494a:	8f 5f       	subi	r24, 0xFF	; 255
    494c:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
	u8 Local_u8LoopCounter = 0;

	while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    494e:	89 81       	ldd	r24, Y+1	; 0x01
    4950:	28 2f       	mov	r18, r24
    4952:	30 e0       	ldi	r19, 0x00	; 0
    4954:	8a 81       	ldd	r24, Y+2	; 0x02
    4956:	9b 81       	ldd	r25, Y+3	; 0x03
    4958:	fc 01       	movw	r30, r24
    495a:	e2 0f       	add	r30, r18
    495c:	f3 1f       	adc	r31, r19
    495e:	80 81       	ld	r24, Z
    4960:	88 23       	and	r24, r24
    4962:	39 f7       	brne	.-50     	; 0x4932 <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(Copy_pu8StringArray[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0
    496a:	cf 91       	pop	r28
    496c:	df 91       	pop	r29
    496e:	08 95       	ret

00004970 <LCD_voidSendNumber>:


void LCD_voidSendNumber(s32 Copy_s32Number)
{
    4970:	df 93       	push	r29
    4972:	cf 93       	push	r28
    4974:	cd b7       	in	r28, 0x3d	; 61
    4976:	de b7       	in	r29, 0x3e	; 62
    4978:	2e 97       	sbiw	r28, 0x0e	; 14
    497a:	0f b6       	in	r0, 0x3f	; 63
    497c:	f8 94       	cli
    497e:	de bf       	out	0x3e, r29	; 62
    4980:	0f be       	out	0x3f, r0	; 63
    4982:	cd bf       	out	0x3d, r28	; 61
    4984:	9e 87       	std	Y+14, r25	; 0x0e
    4986:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Local_u8DigitsDataArray[10] = {0};
    4988:	8a e0       	ldi	r24, 0x0A	; 10
    498a:	fe 01       	movw	r30, r28
    498c:	33 96       	adiw	r30, 0x03	; 3
    498e:	df 01       	movw	r26, r30
    4990:	98 2f       	mov	r25, r24
    4992:	1d 92       	st	X+, r1
    4994:	9a 95       	dec	r25
    4996:	e9 f7       	brne	.-6      	; 0x4992 <LCD_voidSendNumber+0x22>
	s8 Local_s8LoopCounter = 0;
    4998:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8NumberSign  = 0; //0 -> Positive Number, 1 for Negative Number
    499a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Number >= 0)
    499c:	8d 85       	ldd	r24, Y+13	; 0x0d
    499e:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a0:	99 23       	and	r25, r25
    49a2:	14 f0       	brlt	.+4      	; 0x49a8 <LCD_voidSendNumber+0x38>
	{
		Local_u8NumberSign = POSITIVE;
    49a4:	19 82       	std	Y+1, r1	; 0x01
    49a6:	0d c0       	rjmp	.+26     	; 0x49c2 <LCD_voidSendNumber+0x52>
	}
	else
	{	//Convert The Number To Positive, and take the sign
		Local_u8NumberSign = NEGATIVE;
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	89 83       	std	Y+1, r24	; 0x01
        //Get The First Complement
		Copy_s32Number--;
    49ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	9e 87       	std	Y+14, r25	; 0x0e
    49b4:	8d 87       	std	Y+13, r24	; 0x0d
        //Get The Positive Value
		Copy_s32Number = ~Copy_s32Number;
    49b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ba:	80 95       	com	r24
    49bc:	90 95       	com	r25
    49be:	9e 87       	std	Y+14, r25	; 0x0e
    49c0:	8d 87       	std	Y+13, r24	; 0x0d
	}

    if(Copy_s32Number == 0)
    49c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	81 f5       	brne	.+96     	; 0x4a2a <LCD_voidSendNumber+0xba>
    {
        Local_u8DigitsDataArray[Local_s8LoopCounter] = '0';
    49ca:	8a 81       	ldd	r24, Y+2	; 0x02
    49cc:	28 2f       	mov	r18, r24
    49ce:	33 27       	eor	r19, r19
    49d0:	27 fd       	sbrc	r18, 7
    49d2:	30 95       	com	r19
    49d4:	ce 01       	movw	r24, r28
    49d6:	03 96       	adiw	r24, 0x03	; 3
    49d8:	fc 01       	movw	r30, r24
    49da:	e2 0f       	add	r30, r18
    49dc:	f3 1f       	adc	r31, r19
    49de:	80 e3       	ldi	r24, 0x30	; 48
    49e0:	80 83       	st	Z, r24
        Local_s8LoopCounter++;
    49e2:	8a 81       	ldd	r24, Y+2	; 0x02
    49e4:	8f 5f       	subi	r24, 0xFF	; 255
    49e6:	8a 83       	std	Y+2, r24	; 0x02
    49e8:	20 c0       	rjmp	.+64     	; 0x4a2a <LCD_voidSendNumber+0xba>
    }else{}

	while(Copy_s32Number != 0)
	{	//Split the Number to digits, Get there ASCII, and store them in array.
		Local_u8DigitsDataArray[Local_s8LoopCounter] = (Copy_s32Number % 10) + '0';
    49ea:	8a 81       	ldd	r24, Y+2	; 0x02
    49ec:	e8 2f       	mov	r30, r24
    49ee:	ff 27       	eor	r31, r31
    49f0:	e7 fd       	sbrc	r30, 7
    49f2:	f0 95       	com	r31
    49f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49f8:	2a e0       	ldi	r18, 0x0A	; 10
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	b9 01       	movw	r22, r18
    49fe:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__divmodhi4>
    4a02:	28 2f       	mov	r18, r24
    4a04:	20 5d       	subi	r18, 0xD0	; 208
    4a06:	ce 01       	movw	r24, r28
    4a08:	03 96       	adiw	r24, 0x03	; 3
    4a0a:	e8 0f       	add	r30, r24
    4a0c:	f9 1f       	adc	r31, r25
    4a0e:	20 83       	st	Z, r18
		Copy_s32Number /= 10;
    4a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a14:	2a e0       	ldi	r18, 0x0A	; 10
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	b9 01       	movw	r22, r18
    4a1a:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__divmodhi4>
    4a1e:	cb 01       	movw	r24, r22
    4a20:	9e 87       	std	Y+14, r25	; 0x0e
    4a22:	8d 87       	std	Y+13, r24	; 0x0d
		Local_s8LoopCounter++;
    4a24:	8a 81       	ldd	r24, Y+2	; 0x02
    4a26:	8f 5f       	subi	r24, 0xFF	; 255
    4a28:	8a 83       	std	Y+2, r24	; 0x02
    {
        Local_u8DigitsDataArray[Local_s8LoopCounter] = '0';
        Local_s8LoopCounter++;
    }else{}

	while(Copy_s32Number != 0)
    4a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a2e:	00 97       	sbiw	r24, 0x00	; 0
    4a30:	e1 f6       	brne	.-72     	; 0x49ea <LCD_voidSendNumber+0x7a>
		Local_u8DigitsDataArray[Local_s8LoopCounter] = (Copy_s32Number % 10) + '0';
		Copy_s32Number /= 10;
		Local_s8LoopCounter++;
	}

	Local_s8LoopCounter--;
    4a32:	8a 81       	ldd	r24, Y+2	; 0x02
    4a34:	81 50       	subi	r24, 0x01	; 1
    4a36:	8a 83       	std	Y+2, r24	; 0x02

	if(Local_u8NumberSign == NEGATIVE)
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	81 30       	cpi	r24, 0x01	; 1
    4a3c:	a1 f4       	brne	.+40     	; 0x4a66 <LCD_voidSendNumber+0xf6>
	{
		LCD_voidSendChar('-');
    4a3e:	8d e2       	ldi	r24, 0x2D	; 45
    4a40:	0e 94 90 21 	call	0x4320	; 0x4320 <LCD_voidSendChar>
    4a44:	10 c0       	rjmp	.+32     	; 0x4a66 <LCD_voidSendNumber+0xf6>
	}else{}

	while(Local_s8LoopCounter >= 0)
	{
		LCD_voidSendChar(Local_u8DigitsDataArray[Local_s8LoopCounter]);
    4a46:	8a 81       	ldd	r24, Y+2	; 0x02
    4a48:	28 2f       	mov	r18, r24
    4a4a:	33 27       	eor	r19, r19
    4a4c:	27 fd       	sbrc	r18, 7
    4a4e:	30 95       	com	r19
    4a50:	ce 01       	movw	r24, r28
    4a52:	03 96       	adiw	r24, 0x03	; 3
    4a54:	fc 01       	movw	r30, r24
    4a56:	e2 0f       	add	r30, r18
    4a58:	f3 1f       	adc	r31, r19
    4a5a:	80 81       	ld	r24, Z
    4a5c:	0e 94 90 21 	call	0x4320	; 0x4320 <LCD_voidSendChar>
		Local_s8LoopCounter--;
    4a60:	8a 81       	ldd	r24, Y+2	; 0x02
    4a62:	81 50       	subi	r24, 0x01	; 1
    4a64:	8a 83       	std	Y+2, r24	; 0x02
	if(Local_u8NumberSign == NEGATIVE)
	{
		LCD_voidSendChar('-');
	}else{}

	while(Local_s8LoopCounter >= 0)
    4a66:	8a 81       	ldd	r24, Y+2	; 0x02
    4a68:	88 23       	and	r24, r24
    4a6a:	6c f7       	brge	.-38     	; 0x4a46 <LCD_voidSendNumber+0xd6>
	{
		LCD_voidSendChar(Local_u8DigitsDataArray[Local_s8LoopCounter]);
		Local_s8LoopCounter--;
	}
}
    4a6c:	2e 96       	adiw	r28, 0x0e	; 14
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	f8 94       	cli
    4a72:	de bf       	out	0x3e, r29	; 62
    4a74:	0f be       	out	0x3f, r0	; 63
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	cf 91       	pop	r28
    4a7a:	df 91       	pop	r29
    4a7c:	08 95       	ret

00004a7e <LCD_voidSendCustomCharachter>:

void LCD_voidSendCustomCharachter(u8 * Copy_pu8CharArray,
								  u8 Copy_u8PatternNumber,
								  u8 Copy_u8XPos,
								  u8 Copy_u8YPos)
{
    4a7e:	df 93       	push	r29
    4a80:	cf 93       	push	r28
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
    4a86:	27 97       	sbiw	r28, 0x07	; 7
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	f8 94       	cli
    4a8c:	de bf       	out	0x3e, r29	; 62
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	cd bf       	out	0x3d, r28	; 61
    4a92:	9c 83       	std	Y+4, r25	; 0x04
    4a94:	8b 83       	std	Y+3, r24	; 0x03
    4a96:	6d 83       	std	Y+5, r22	; 0x05
    4a98:	4e 83       	std	Y+6, r20	; 0x06
    4a9a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8LoopCounter = 0;
    4a9c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8CGRAMAddress = 0;
    4a9e:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    4aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa2:	88 2f       	mov	r24, r24
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	88 0f       	add	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	88 0f       	add	r24, r24
    4aac:	99 1f       	adc	r25, r25
    4aae:	88 0f       	add	r24, r24
    4ab0:	99 1f       	adc	r25, r25
    4ab2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CGRAMAddress, 6);
    4ab4:	89 81       	ldd	r24, Y+1	; 0x01
    4ab6:	80 64       	ori	r24, 0x40	; 64
    4ab8:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>

	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8; Local_u8LoopCounter++)
    4ac0:	1a 82       	std	Y+2, r1	; 0x02
    4ac2:	0e c0       	rjmp	.+28     	; 0x4ae0 <LCD_voidSendCustomCharachter+0x62>
	{
		LCD_voidSendChar(Copy_pu8CharArray[Local_u8LoopCounter]);
    4ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac6:	28 2f       	mov	r18, r24
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	8b 81       	ldd	r24, Y+3	; 0x03
    4acc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ace:	fc 01       	movw	r30, r24
    4ad0:	e2 0f       	add	r30, r18
    4ad2:	f3 1f       	adc	r31, r19
    4ad4:	80 81       	ld	r24, Z
    4ad6:	0e 94 90 21 	call	0x4320	; 0x4320 <LCD_voidSendChar>
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
	SET_BIT(Local_u8CGRAMAddress, 6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8; Local_u8LoopCounter++)
    4ada:	8a 81       	ldd	r24, Y+2	; 0x02
    4adc:	8f 5f       	subi	r24, 0xFF	; 255
    4ade:	8a 83       	std	Y+2, r24	; 0x02
    4ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae2:	88 30       	cpi	r24, 0x08	; 8
    4ae4:	78 f3       	brcs	.-34     	; 0x4ac4 <LCD_voidSendCustomCharachter+0x46>
	{
		LCD_voidSendChar(Copy_pu8CharArray[Local_u8LoopCounter]);
	}

	LCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    4ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    4aea:	0e 94 68 24 	call	0x48d0	; 0x48d0 <LCD_voidGoToXY>

	LCD_voidSendChar(Copy_u8PatternNumber);
    4aee:	8d 81       	ldd	r24, Y+5	; 0x05
    4af0:	0e 94 90 21 	call	0x4320	; 0x4320 <LCD_voidSendChar>

}
    4af4:	27 96       	adiw	r28, 0x07	; 7
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	f8 94       	cli
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	cd bf       	out	0x3d, r28	; 61
    4b00:	cf 91       	pop	r28
    4b02:	df 91       	pop	r29
    4b04:	08 95       	ret

00004b06 <LCD_voidDisplayOn>:


void LCD_voidDisplayOn(void)
{
    4b06:	df 93       	push	r29
    4b08:	cf 93       	push	r28
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(CMD_ON_OFF_DISPLAY_ON);
    4b0e:	8c e0       	ldi	r24, 0x0C	; 12
    4b10:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>
}
    4b14:	cf 91       	pop	r28
    4b16:	df 91       	pop	r29
    4b18:	08 95       	ret

00004b1a <LCD_voidDisplayOff>:

void LCD_voidDisplayOff(void)
{
    4b1a:	df 93       	push	r29
    4b1c:	cf 93       	push	r28
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(CMD_ON_OFF_DISPLAY_OFF);
    4b22:	88 e0       	ldi	r24, 0x08	; 8
    4b24:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>
}
    4b28:	cf 91       	pop	r28
    4b2a:	df 91       	pop	r29
    4b2c:	08 95       	ret

00004b2e <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    4b2e:	df 93       	push	r29
    4b30:	cf 93       	push	r28
    4b32:	cd b7       	in	r28, 0x3d	; 61
    4b34:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(CMD_CLEAR_DISPLAY);
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>
}
    4b3c:	cf 91       	pop	r28
    4b3e:	df 91       	pop	r29
    4b40:	08 95       	ret

00004b42 <LCD_voidCursorOn>:

void LCD_voidCursorOn(void)
{
    4b42:	df 93       	push	r29
    4b44:	cf 93       	push	r28
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(CMD_ON_OFF_CURSOR_ON);
    4b4a:	8e e0       	ldi	r24, 0x0E	; 14
    4b4c:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>
}
    4b50:	cf 91       	pop	r28
    4b52:	df 91       	pop	r29
    4b54:	08 95       	ret

00004b56 <LCD_voidCursorBlink>:

void LCD_voidCursorBlink(void)
{
    4b56:	df 93       	push	r29
    4b58:	cf 93       	push	r28
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(CMD_ON_OFF_CURSOR_BLINK);
    4b5e:	8f e0       	ldi	r24, 0x0F	; 15
    4b60:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>
}
    4b64:	cf 91       	pop	r28
    4b66:	df 91       	pop	r29
    4b68:	08 95       	ret

00004b6a <LCD_voidCursorOff>:

void LCD_voidCursorOff(void)
{
    4b6a:	df 93       	push	r29
    4b6c:	cf 93       	push	r28
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(CMD_ON_OFF_CURSOR_OFF);
    4b72:	8c e0       	ldi	r24, 0x0C	; 12
    4b74:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <LCD_voidSendCommand>
}
    4b78:	cf 91       	pop	r28
    4b7a:	df 91       	pop	r29
    4b7c:	08 95       	ret

00004b7e <KPD_voidInit>:
#include "KPD_config.h"



void KPD_voidInit(void)
{
    4b7e:	df 93       	push	r29
    4b80:	cf 93       	push	r28
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
	//Set Rows Pins as Input pull up
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW0_PIN, IN_PULL_UP);
    4b86:	82 e0       	ldi	r24, 0x02	; 2
    4b88:	60 e0       	ldi	r22, 0x00	; 0
    4b8a:	42 e0       	ldi	r20, 0x02	; 2
    4b8c:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW1_PIN, IN_PULL_UP);
    4b90:	82 e0       	ldi	r24, 0x02	; 2
    4b92:	61 e0       	ldi	r22, 0x01	; 1
    4b94:	42 e0       	ldi	r20, 0x02	; 2
    4b96:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW2_PIN, IN_PULL_UP);
    4b9a:	82 e0       	ldi	r24, 0x02	; 2
    4b9c:	62 e0       	ldi	r22, 0x02	; 2
    4b9e:	42 e0       	ldi	r20, 0x02	; 2
    4ba0:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW3_PIN, IN_PULL_UP);
    4ba4:	82 e0       	ldi	r24, 0x02	; 2
    4ba6:	62 e0       	ldi	r22, 0x02	; 2
    4ba8:	42 e0       	ldi	r20, 0x02	; 2
    4baa:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>

	//Set Colomns Pins as Output High
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, OUTPUT);
    4bae:	82 e0       	ldi	r24, 0x02	; 2
    4bb0:	60 e0       	ldi	r22, 0x00	; 0
    4bb2:	41 e0       	ldi	r20, 0x01	; 1
    4bb4:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, OUTPUT);
    4bb8:	82 e0       	ldi	r24, 0x02	; 2
    4bba:	61 e0       	ldi	r22, 0x01	; 1
    4bbc:	41 e0       	ldi	r20, 0x01	; 1
    4bbe:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, OUTPUT);
    4bc2:	82 e0       	ldi	r24, 0x02	; 2
    4bc4:	62 e0       	ldi	r22, 0x02	; 2
    4bc6:	41 e0       	ldi	r20, 0x01	; 1
    4bc8:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, OUTPUT);
    4bcc:	82 e0       	ldi	r24, 0x02	; 2
    4bce:	62 e0       	ldi	r22, 0x02	; 2
    4bd0:	41 e0       	ldi	r20, 0x01	; 1
    4bd2:	0e 94 30 17 	call	0x2e60	; 0x2e60 <DIO_voidSetPinDirection>
}
    4bd6:	cf 91       	pop	r28
    4bd8:	df 91       	pop	r29
    4bda:	08 95       	ret

00004bdc <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    4bdc:	df 93       	push	r29
    4bde:	cf 93       	push	r28
    4be0:	00 d0       	rcall	.+0      	; 0x4be2 <KPD_u8GetPressedKey+0x6>
    4be2:	00 d0       	rcall	.+0      	; 0x4be4 <KPD_u8GetPressedKey+0x8>
    4be4:	0f 92       	push	r0
    4be6:	cd b7       	in	r28, 0x3d	; 61
    4be8:	de b7       	in	r29, 0x3e	; 62
	

	u8 Local_u8RowsCounter;
	u8 Local_u8ColmsCounter;
	u8 Local_u8RowValue;
	u8 Local_u8PressedKey = KPD_NO_KEY_PRESSED;
    4bea:	8f ef       	ldi	r24, 0xFF	; 255
    4bec:	89 83       	std	Y+1, r24	; 0x01

	for(Local_u8ColmsCounter=0; Local_u8ColmsCounter<KPD_COLUMNS_NUM; Local_u8ColmsCounter++)
    4bee:	1b 82       	std	Y+3, r1	; 0x03
    4bf0:	57 c0       	rjmp	.+174    	; 0x4ca0 <KPD_u8GetPressedKey+0xc4>
	{
		DIO_voidWritePin(KPD_COLUMNS_PORT, KPD_u8ColumnsArray[Local_u8ColmsCounter], LOW);
    4bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf4:	88 2f       	mov	r24, r24
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	e8 59       	subi	r30, 0x98	; 152
    4bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    4bfe:	90 81       	ld	r25, Z
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	69 2f       	mov	r22, r25
    4c04:	40 e0       	ldi	r20, 0x00	; 0
    4c06:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>

		for(Local_u8RowsCounter=0; Local_u8RowsCounter<KPD_ROWS_NUM; Local_u8RowsCounter++)
    4c0a:	1c 82       	std	Y+4, r1	; 0x04
    4c0c:	37 c0       	rjmp	.+110    	; 0x4c7c <KPD_u8GetPressedKey+0xa0>
		{
			Local_u8RowValue = DIO_voidReadPin(KPD_ROWS_PORT, KPD_u8RowsArray[Local_u8RowsCounter]);
    4c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c10:	88 2f       	mov	r24, r24
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	fc 01       	movw	r30, r24
    4c16:	e4 59       	subi	r30, 0x94	; 148
    4c18:	fe 4f       	sbci	r31, 0xFE	; 254
    4c1a:	90 81       	ld	r25, Z
    4c1c:	82 e0       	ldi	r24, 0x02	; 2
    4c1e:	69 2f       	mov	r22, r25
    4c20:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_voidReadPin>
    4c24:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_u8RowValue == LOW)
    4c26:	8a 81       	ldd	r24, Y+2	; 0x02
    4c28:	88 23       	and	r24, r24
    4c2a:	29 f5       	brne	.+74     	; 0x4c76 <KPD_u8GetPressedKey+0x9a>
			{
				Local_u8PressedKey = KPD_u8CharsArray[Local_u8RowsCounter][Local_u8ColmsCounter];
    4c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c2e:	48 2f       	mov	r20, r24
    4c30:	50 e0       	ldi	r21, 0x00	; 0
    4c32:	8b 81       	ldd	r24, Y+3	; 0x03
    4c34:	28 2f       	mov	r18, r24
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	ca 01       	movw	r24, r20
    4c3a:	88 0f       	add	r24, r24
    4c3c:	99 1f       	adc	r25, r25
    4c3e:	88 0f       	add	r24, r24
    4c40:	99 1f       	adc	r25, r25
    4c42:	82 0f       	add	r24, r18
    4c44:	93 1f       	adc	r25, r19
    4c46:	fc 01       	movw	r30, r24
    4c48:	e0 59       	subi	r30, 0x90	; 144
    4c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c4c:	80 81       	ld	r24, Z
    4c4e:	89 83       	std	Y+1, r24	; 0x01
    4c50:	0c c0       	rjmp	.+24     	; 0x4c6a <KPD_u8GetPressedKey+0x8e>

				while(Local_u8RowValue == LOW)
				{
					Local_u8RowValue = DIO_voidReadPin(KPD_ROWS_PORT, KPD_u8RowsArray[Local_u8RowsCounter]);
    4c52:	8c 81       	ldd	r24, Y+4	; 0x04
    4c54:	88 2f       	mov	r24, r24
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	fc 01       	movw	r30, r24
    4c5a:	e4 59       	subi	r30, 0x94	; 148
    4c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c5e:	90 81       	ld	r25, Z
    4c60:	82 e0       	ldi	r24, 0x02	; 2
    4c62:	69 2f       	mov	r22, r25
    4c64:	0e 94 17 1b 	call	0x362e	; 0x362e <DIO_voidReadPin>
    4c68:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_u8RowValue == LOW)
			{
				Local_u8PressedKey = KPD_u8CharsArray[Local_u8RowsCounter][Local_u8ColmsCounter];

				while(Local_u8RowValue == LOW)
    4c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6c:	88 23       	and	r24, r24
    4c6e:	89 f3       	breq	.-30     	; 0x4c52 <KPD_u8GetPressedKey+0x76>
				{
					Local_u8RowValue = DIO_voidReadPin(KPD_ROWS_PORT, KPD_u8RowsArray[Local_u8RowsCounter]);
				}
				
				return Local_u8PressedKey;
    4c70:	89 81       	ldd	r24, Y+1	; 0x01
    4c72:	8d 83       	std	Y+5, r24	; 0x05
    4c74:	1b c0       	rjmp	.+54     	; 0x4cac <KPD_u8GetPressedKey+0xd0>

	for(Local_u8ColmsCounter=0; Local_u8ColmsCounter<KPD_COLUMNS_NUM; Local_u8ColmsCounter++)
	{
		DIO_voidWritePin(KPD_COLUMNS_PORT, KPD_u8ColumnsArray[Local_u8ColmsCounter], LOW);

		for(Local_u8RowsCounter=0; Local_u8RowsCounter<KPD_ROWS_NUM; Local_u8RowsCounter++)
    4c76:	8c 81       	ldd	r24, Y+4	; 0x04
    4c78:	8f 5f       	subi	r24, 0xFF	; 255
    4c7a:	8c 83       	std	Y+4, r24	; 0x04
    4c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c7e:	84 30       	cpi	r24, 0x04	; 4
    4c80:	30 f2       	brcs	.-116    	; 0x4c0e <KPD_u8GetPressedKey+0x32>
				
				return Local_u8PressedKey;
			}
		}

		DIO_voidWritePin(KPD_COLUMNS_PORT, KPD_u8ColumnsArray[Local_u8ColmsCounter], HIGH);
    4c82:	8b 81       	ldd	r24, Y+3	; 0x03
    4c84:	88 2f       	mov	r24, r24
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	fc 01       	movw	r30, r24
    4c8a:	e8 59       	subi	r30, 0x98	; 152
    4c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c8e:	90 81       	ld	r25, Z
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	69 2f       	mov	r22, r25
    4c94:	41 e0       	ldi	r20, 0x01	; 1
    4c96:	0e 94 00 1a 	call	0x3400	; 0x3400 <DIO_voidWritePin>
	u8 Local_u8RowsCounter;
	u8 Local_u8ColmsCounter;
	u8 Local_u8RowValue;
	u8 Local_u8PressedKey = KPD_NO_KEY_PRESSED;

	for(Local_u8ColmsCounter=0; Local_u8ColmsCounter<KPD_COLUMNS_NUM; Local_u8ColmsCounter++)
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	8f 5f       	subi	r24, 0xFF	; 255
    4c9e:	8b 83       	std	Y+3, r24	; 0x03
    4ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca2:	84 30       	cpi	r24, 0x04	; 4
    4ca4:	08 f4       	brcc	.+2      	; 0x4ca8 <KPD_u8GetPressedKey+0xcc>
    4ca6:	a5 cf       	rjmp	.-182    	; 0x4bf2 <KPD_u8GetPressedKey+0x16>
		}

		DIO_voidWritePin(KPD_COLUMNS_PORT, KPD_u8ColumnsArray[Local_u8ColmsCounter], HIGH);
	}

	return Local_u8PressedKey;
    4ca8:	89 81       	ldd	r24, Y+1	; 0x01
    4caa:	8d 83       	std	Y+5, r24	; 0x05
    4cac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4cae:	0f 90       	pop	r0
    4cb0:	0f 90       	pop	r0
    4cb2:	0f 90       	pop	r0
    4cb4:	0f 90       	pop	r0
    4cb6:	0f 90       	pop	r0
    4cb8:	cf 91       	pop	r28
    4cba:	df 91       	pop	r29
    4cbc:	08 95       	ret

00004cbe <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_private.h"
#include "EEPROM_config.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8Data)
{
    4cbe:	df 93       	push	r29
    4cc0:	cf 93       	push	r28
    4cc2:	00 d0       	rcall	.+0      	; 0x4cc4 <EEPROM_voidSendDataByte+0x6>
    4cc4:	00 d0       	rcall	.+0      	; 0x4cc6 <EEPROM_voidSendDataByte+0x8>
    4cc6:	cd b7       	in	r28, 0x3d	; 61
    4cc8:	de b7       	in	r29, 0x3e	; 62
    4cca:	9b 83       	std	Y+3, r25	; 0x03
    4ccc:	8a 83       	std	Y+2, r24	; 0x02
    4cce:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8SlaveAddress = FIXED_ADDRESS | (A2_CONNECTION << 2) | (u8)(Copy_u16LocationAddress >> 8);
    4cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd4:	89 2f       	mov	r24, r25
    4cd6:	99 27       	eor	r25, r25
    4cd8:	80 65       	ori	r24, 0x50	; 80
    4cda:	89 83       	std	Y+1, r24	; 0x01
    /*Send Start Condition*/
    TWI_ERRSendStartCondition();
    4cdc:	0e 94 18 12 	call	0x2430	; 0x2430 <TWI_ERRSendStartCondition>
    /*Send Slave Address + Write Request*/
    TWI_ERRSendSlaveAddressWithWrite(Local_u8SlaveAddress);
    4ce0:	89 81       	ldd	r24, Y+1	; 0x01
    4ce2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <TWI_ERRSendSlaveAddressWithWrite>
    /*Send Location Address*/
    TWI_ERRSendDataPacket((u8)Copy_u16LocationAddress);
    4ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <TWI_ERRSendDataPacket>
    /*Send Data*/
    TWI_ERRSendDataPacket(Copy_u8Data);
    4cec:	8c 81       	ldd	r24, Y+4	; 0x04
    4cee:	0e 94 db 12 	call	0x25b6	; 0x25b6 <TWI_ERRSendDataPacket>
    /*Send Stop Condition*/
    TWI_voidSendStopCondition();
    4cf2:	0e 94 33 13 	call	0x2666	; 0x2666 <TWI_voidSendStopCondition>
    /*Delay 5msec*/
    //_delay_ms(5);
}
    4cf6:	0f 90       	pop	r0
    4cf8:	0f 90       	pop	r0
    4cfa:	0f 90       	pop	r0
    4cfc:	0f 90       	pop	r0
    4cfe:	cf 91       	pop	r28
    4d00:	df 91       	pop	r29
    4d02:	08 95       	ret

00004d04 <EEPROM_voidReceiveDataByte>:

void EEPROM_voidReceiveDataByte(u16 Copy_u16LocationAddress, u8 * Copy_pu8ReceivedData)
{
    4d04:	df 93       	push	r29
    4d06:	cf 93       	push	r28
    4d08:	00 d0       	rcall	.+0      	; 0x4d0a <EEPROM_voidReceiveDataByte+0x6>
    4d0a:	00 d0       	rcall	.+0      	; 0x4d0c <EEPROM_voidReceiveDataByte+0x8>
    4d0c:	0f 92       	push	r0
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
    4d12:	9b 83       	std	Y+3, r25	; 0x03
    4d14:	8a 83       	std	Y+2, r24	; 0x02
    4d16:	7d 83       	std	Y+5, r23	; 0x05
    4d18:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8SlaveAddress = FIXED_ADDRESS | (A2_CONNECTION << 2) | (u8)(Copy_u16LocationAddress >> 8);
    4d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1e:	89 2f       	mov	r24, r25
    4d20:	99 27       	eor	r25, r25
    4d22:	80 65       	ori	r24, 0x50	; 80
    4d24:	89 83       	std	Y+1, r24	; 0x01
    /*Send Start Condition*/
    TWI_ERRSendStartCondition();
    4d26:	0e 94 18 12 	call	0x2430	; 0x2430 <TWI_ERRSendStartCondition>
    /*Send Slave Address + Write Request*/
    TWI_ERRSendSlaveAddressWithWrite(Local_u8SlaveAddress);
    4d2a:	89 81       	ldd	r24, Y+1	; 0x01
    4d2c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <TWI_ERRSendSlaveAddressWithWrite>
    /*Send Location Address*/
    TWI_ERRSendDataPacket((u8)Copy_u16LocationAddress);
    4d30:	8a 81       	ldd	r24, Y+2	; 0x02
    4d32:	0e 94 db 12 	call	0x25b6	; 0x25b6 <TWI_ERRSendDataPacket>
    /*Send Repeated Start Condition*/
    TWI_ERRSendRepeatedStartCondition();
    4d36:	0e 94 42 12 	call	0x2484	; 0x2484 <TWI_ERRSendRepeatedStartCondition>
    /*Send Slave Address + Read Request*/
    TWI_voidSendSlaveAddressWithRead(Local_u8SlaveAddress);
    4d3a:	89 81       	ldd	r24, Y+1	; 0x01
    4d3c:	0e 94 a4 12 	call	0x2548	; 0x2548 <TWI_voidSendSlaveAddressWithRead>
    /*Receive Data*/
    TWI_ERRReceiveDataPacket(Copy_pu8ReceivedData);
    4d40:	8c 81       	ldd	r24, Y+4	; 0x04
    4d42:	9d 81       	ldd	r25, Y+5	; 0x05
    4d44:	0e 94 04 13 	call	0x2608	; 0x2608 <TWI_ERRReceiveDataPacket>
    /*Send Stop Condition*/
    TWI_voidSendStopCondition();
    4d48:	0e 94 33 13 	call	0x2666	; 0x2666 <TWI_voidSendStopCondition>
}
    4d4c:	0f 90       	pop	r0
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	cf 91       	pop	r28
    4d58:	df 91       	pop	r29
    4d5a:	08 95       	ret

00004d5c <main>:
#include "../HAL/LCD/LCD_interface.h"
#include "../Services/POV_Display/POV_interface.h"


s32 main(void)
{
    4d5c:	df 93       	push	r29
    4d5e:	cf 93       	push	r28
    4d60:	cd b7       	in	r28, 0x3d	; 61
    4d62:	de b7       	in	r29, 0x3e	; 62

    POV_voidInit();
    4d64:	0e 94 75 07 	call	0xeea	; 0xeea <POV_voidInit>
    LCD_voidInit();
    4d68:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <LCD_voidInit>

    while (1)
    {

        POV_voidStartDisplay();
    4d6c:	0e 94 8a 07 	call	0xf14	; 0xf14 <POV_voidStartDisplay>
    4d70:	fd cf       	rjmp	.-6      	; 0x4d6c <main+0x10>

00004d72 <__mulsi3>:
    4d72:	62 9f       	mul	r22, r18
    4d74:	d0 01       	movw	r26, r0
    4d76:	73 9f       	mul	r23, r19
    4d78:	f0 01       	movw	r30, r0
    4d7a:	82 9f       	mul	r24, r18
    4d7c:	e0 0d       	add	r30, r0
    4d7e:	f1 1d       	adc	r31, r1
    4d80:	64 9f       	mul	r22, r20
    4d82:	e0 0d       	add	r30, r0
    4d84:	f1 1d       	adc	r31, r1
    4d86:	92 9f       	mul	r25, r18
    4d88:	f0 0d       	add	r31, r0
    4d8a:	83 9f       	mul	r24, r19
    4d8c:	f0 0d       	add	r31, r0
    4d8e:	74 9f       	mul	r23, r20
    4d90:	f0 0d       	add	r31, r0
    4d92:	65 9f       	mul	r22, r21
    4d94:	f0 0d       	add	r31, r0
    4d96:	99 27       	eor	r25, r25
    4d98:	72 9f       	mul	r23, r18
    4d9a:	b0 0d       	add	r27, r0
    4d9c:	e1 1d       	adc	r30, r1
    4d9e:	f9 1f       	adc	r31, r25
    4da0:	63 9f       	mul	r22, r19
    4da2:	b0 0d       	add	r27, r0
    4da4:	e1 1d       	adc	r30, r1
    4da6:	f9 1f       	adc	r31, r25
    4da8:	bd 01       	movw	r22, r26
    4daa:	cf 01       	movw	r24, r30
    4dac:	11 24       	eor	r1, r1
    4dae:	08 95       	ret

00004db0 <__udivmodhi4>:
    4db0:	aa 1b       	sub	r26, r26
    4db2:	bb 1b       	sub	r27, r27
    4db4:	51 e1       	ldi	r21, 0x11	; 17
    4db6:	07 c0       	rjmp	.+14     	; 0x4dc6 <__udivmodhi4_ep>

00004db8 <__udivmodhi4_loop>:
    4db8:	aa 1f       	adc	r26, r26
    4dba:	bb 1f       	adc	r27, r27
    4dbc:	a6 17       	cp	r26, r22
    4dbe:	b7 07       	cpc	r27, r23
    4dc0:	10 f0       	brcs	.+4      	; 0x4dc6 <__udivmodhi4_ep>
    4dc2:	a6 1b       	sub	r26, r22
    4dc4:	b7 0b       	sbc	r27, r23

00004dc6 <__udivmodhi4_ep>:
    4dc6:	88 1f       	adc	r24, r24
    4dc8:	99 1f       	adc	r25, r25
    4dca:	5a 95       	dec	r21
    4dcc:	a9 f7       	brne	.-22     	; 0x4db8 <__udivmodhi4_loop>
    4dce:	80 95       	com	r24
    4dd0:	90 95       	com	r25
    4dd2:	bc 01       	movw	r22, r24
    4dd4:	cd 01       	movw	r24, r26
    4dd6:	08 95       	ret

00004dd8 <__divmodhi4>:
    4dd8:	97 fb       	bst	r25, 7
    4dda:	09 2e       	mov	r0, r25
    4ddc:	07 26       	eor	r0, r23
    4dde:	0a d0       	rcall	.+20     	; 0x4df4 <__divmodhi4_neg1>
    4de0:	77 fd       	sbrc	r23, 7
    4de2:	04 d0       	rcall	.+8      	; 0x4dec <__divmodhi4_neg2>
    4de4:	e5 df       	rcall	.-54     	; 0x4db0 <__udivmodhi4>
    4de6:	06 d0       	rcall	.+12     	; 0x4df4 <__divmodhi4_neg1>
    4de8:	00 20       	and	r0, r0
    4dea:	1a f4       	brpl	.+6      	; 0x4df2 <__divmodhi4_exit>

00004dec <__divmodhi4_neg2>:
    4dec:	70 95       	com	r23
    4dee:	61 95       	neg	r22
    4df0:	7f 4f       	sbci	r23, 0xFF	; 255

00004df2 <__divmodhi4_exit>:
    4df2:	08 95       	ret

00004df4 <__divmodhi4_neg1>:
    4df4:	f6 f7       	brtc	.-4      	; 0x4df2 <__divmodhi4_exit>
    4df6:	90 95       	com	r25
    4df8:	81 95       	neg	r24
    4dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfc:	08 95       	ret

00004dfe <__udivmodsi4>:
    4dfe:	a1 e2       	ldi	r26, 0x21	; 33
    4e00:	1a 2e       	mov	r1, r26
    4e02:	aa 1b       	sub	r26, r26
    4e04:	bb 1b       	sub	r27, r27
    4e06:	fd 01       	movw	r30, r26
    4e08:	0d c0       	rjmp	.+26     	; 0x4e24 <__udivmodsi4_ep>

00004e0a <__udivmodsi4_loop>:
    4e0a:	aa 1f       	adc	r26, r26
    4e0c:	bb 1f       	adc	r27, r27
    4e0e:	ee 1f       	adc	r30, r30
    4e10:	ff 1f       	adc	r31, r31
    4e12:	a2 17       	cp	r26, r18
    4e14:	b3 07       	cpc	r27, r19
    4e16:	e4 07       	cpc	r30, r20
    4e18:	f5 07       	cpc	r31, r21
    4e1a:	20 f0       	brcs	.+8      	; 0x4e24 <__udivmodsi4_ep>
    4e1c:	a2 1b       	sub	r26, r18
    4e1e:	b3 0b       	sbc	r27, r19
    4e20:	e4 0b       	sbc	r30, r20
    4e22:	f5 0b       	sbc	r31, r21

00004e24 <__udivmodsi4_ep>:
    4e24:	66 1f       	adc	r22, r22
    4e26:	77 1f       	adc	r23, r23
    4e28:	88 1f       	adc	r24, r24
    4e2a:	99 1f       	adc	r25, r25
    4e2c:	1a 94       	dec	r1
    4e2e:	69 f7       	brne	.-38     	; 0x4e0a <__udivmodsi4_loop>
    4e30:	60 95       	com	r22
    4e32:	70 95       	com	r23
    4e34:	80 95       	com	r24
    4e36:	90 95       	com	r25
    4e38:	9b 01       	movw	r18, r22
    4e3a:	ac 01       	movw	r20, r24
    4e3c:	bd 01       	movw	r22, r26
    4e3e:	cf 01       	movw	r24, r30
    4e40:	08 95       	ret

00004e42 <__prologue_saves__>:
    4e42:	2f 92       	push	r2
    4e44:	3f 92       	push	r3
    4e46:	4f 92       	push	r4
    4e48:	5f 92       	push	r5
    4e4a:	6f 92       	push	r6
    4e4c:	7f 92       	push	r7
    4e4e:	8f 92       	push	r8
    4e50:	9f 92       	push	r9
    4e52:	af 92       	push	r10
    4e54:	bf 92       	push	r11
    4e56:	cf 92       	push	r12
    4e58:	df 92       	push	r13
    4e5a:	ef 92       	push	r14
    4e5c:	ff 92       	push	r15
    4e5e:	0f 93       	push	r16
    4e60:	1f 93       	push	r17
    4e62:	cf 93       	push	r28
    4e64:	df 93       	push	r29
    4e66:	cd b7       	in	r28, 0x3d	; 61
    4e68:	de b7       	in	r29, 0x3e	; 62
    4e6a:	ca 1b       	sub	r28, r26
    4e6c:	db 0b       	sbc	r29, r27
    4e6e:	0f b6       	in	r0, 0x3f	; 63
    4e70:	f8 94       	cli
    4e72:	de bf       	out	0x3e, r29	; 62
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	09 94       	ijmp

00004e7a <__epilogue_restores__>:
    4e7a:	2a 88       	ldd	r2, Y+18	; 0x12
    4e7c:	39 88       	ldd	r3, Y+17	; 0x11
    4e7e:	48 88       	ldd	r4, Y+16	; 0x10
    4e80:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e82:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e84:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e86:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e88:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e8c:	b9 84       	ldd	r11, Y+9	; 0x09
    4e8e:	c8 84       	ldd	r12, Y+8	; 0x08
    4e90:	df 80       	ldd	r13, Y+7	; 0x07
    4e92:	ee 80       	ldd	r14, Y+6	; 0x06
    4e94:	fd 80       	ldd	r15, Y+5	; 0x05
    4e96:	0c 81       	ldd	r16, Y+4	; 0x04
    4e98:	1b 81       	ldd	r17, Y+3	; 0x03
    4e9a:	aa 81       	ldd	r26, Y+2	; 0x02
    4e9c:	b9 81       	ldd	r27, Y+1	; 0x01
    4e9e:	ce 0f       	add	r28, r30
    4ea0:	d1 1d       	adc	r29, r1
    4ea2:	0f b6       	in	r0, 0x3f	; 63
    4ea4:	f8 94       	cli
    4ea6:	de bf       	out	0x3e, r29	; 62
    4ea8:	0f be       	out	0x3f, r0	; 63
    4eaa:	cd bf       	out	0x3d, r28	; 61
    4eac:	ed 01       	movw	r28, r26
    4eae:	08 95       	ret

00004eb0 <_exit>:
    4eb0:	f8 94       	cli

00004eb2 <__stop_program>:
    4eb2:	ff cf       	rjmp	.-2      	; 0x4eb2 <__stop_program>
