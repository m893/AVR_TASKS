
uart_lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002c92  00002d26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800080  00800080  00002d46  2**0
                  ALLOC
  3 .stab         000031bc  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a3f  00000000  00000000  00005f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007943  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000983c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a727  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c08f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_1>
       8:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_2>
       c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 15 	call	0x2aec	; 0x2aec <main>
      8a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_VoidEnable>:
#include "WDT_interface.h"
#include "WDT_private.h"
#include "WDT_config.h"

void  WDT_VoidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    //set WDTCR_WDE to enable
    SET_BIT(WDTCR,WDTCR_WDE);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WDT_VoidSleep>:
 

 void WDT_VoidSleep(u8 Copy_U8sleeptime)
 {
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	89 83       	std	Y+1, r24	; 0x01
    //mask to clear the first 3 bit
    WDTCR &= 0b11111000 ;
     b6e:	a1 e4       	ldi	r26, 0x41	; 65
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	88 7f       	andi	r24, 0xF8	; 248
     b7a:	8c 93       	st	X, r24
    // or with time user select 
    WDTCR |=Copy_U8sleeptime ;
     b7c:	a1 e4       	ldi	r26, 0x41	; 65
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e1 e4       	ldi	r30, 0x41	; 65
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	90 81       	ld	r25, Z
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	89 2b       	or	r24, r25
     b8a:	8c 93       	st	X, r24
 }
     b8c:	0f 90       	pop	r0
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <WDT_VoidDisable>:

 void WDT_VoidDisable(void)
 {
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
    // set bit in  in enable bit and turn off bit in same time and clear WDE 
   WDTCR = (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
     b9c:	e1 e4       	ldi	r30, 0x41	; 65
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	88 e1       	ldi	r24, 0x18	; 24
     ba2:	80 83       	st	Z, r24
   WDTCR = 0;
     ba4:	e1 e4       	ldi	r30, 0x41	; 65
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	10 82       	st	Z, r1
 }
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <UART_VoidInit>:
#include "UART_private.h"
#include "UART_config.h"


void UART_VoidInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
        u8 Local_u8UCSRCTemp=0 ;  
     bba:	19 82       	std	Y+1, r1	; 0x01

        /* asynchrounous mode */
        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_URSEL);
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	8f 77       	andi	r24, 0x7F	; 127
     bc0:	89 83       	std	Y+1, r24	; 0x01

        /* enable tx and rx circuits*/
            SET_BIT(UCSRB , UCSRB_TXEN);
     bc2:	aa e2       	ldi	r26, 0x2A	; 42
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	ea e2       	ldi	r30, 0x2A	; 42
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	88 60       	ori	r24, 0x08	; 8
     bce:	8c 93       	st	X, r24
            SET_BIT(UCSRB , UCSRB_RXEN);
     bd0:	aa e2       	ldi	r26, 0x2A	; 42
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ea e2       	ldi	r30, 0x2A	; 42
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 61       	ori	r24, 0x10	; 16
     bdc:	8c 93       	st	X, r24
        /*data size */
        SET_BIT(Local_u8UCSRCTemp,UCSRC_UCSZ0);
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(Local_u8UCSRCTemp,UCSRC_UCSZ1);
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	84 60       	ori	r24, 0x04	; 4
     be8:	89 83       	std	Y+1, r24	; 0x01
        SET_BIT(UCSRB , UCSRB_UCSZ2);
     bea:	aa e2       	ldi	r26, 0x2A	; 42
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ea e2       	ldi	r30, 0x2A	; 42
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	84 60       	ori	r24, 0x04	; 4
     bf6:	8c 93       	st	X, r24
        /*parity disabled*/

        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_UPM0);
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	8f 7e       	andi	r24, 0xEF	; 239
     bfc:	89 83       	std	Y+1, r24	; 0x01
        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_UPM0);
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	8f 7e       	andi	r24, 0xEF	; 239
     c02:	89 83       	std	Y+1, r24	; 0x01

        /* stop bit 1 bit*/
        CLEAR_BIT(Local_u8UCSRCTemp , UCSRC_USBS);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	89 83       	std	Y+1, r24	; 0x01


        SET_BIT(Local_u8UCSRCTemp,UCSRC_URSEL);     //write in ucsrc register
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	80 68       	ori	r24, 0x80	; 128
     c0e:	89 83       	std	Y+1, r24	; 0x01
            /* assign variable value to register */
        UCSRC=Local_u8UCSRCTemp ;
     c10:	e0 e4       	ldi	r30, 0x40	; 64
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	80 83       	st	Z, r24

        

        /* disable double speed mode*/
        CLEAR_BIT(UCSRA , UCSRA_U2X);
     c18:	ab e2       	ldi	r26, 0x2B	; 43
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	eb e2       	ldi	r30, 0x2B	; 43
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8d 7f       	andi	r24, 0xFD	; 253
     c24:	8c 93       	st	X, r24
        /* set baudrate to be 9600*/
        UBRRL=51 ;
     c26:	e9 e2       	ldi	r30, 0x29	; 41
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	83 e3       	ldi	r24, 0x33	; 51
     c2c:	80 83       	st	Z, r24
        /*write in UBRRH register*/
        SET_BIT(UBRRH,UBRRH_URSEL);
     c2e:	a0 e4       	ldi	r26, 0x40	; 64
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e0 e4       	ldi	r30, 0x40	; 64
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 68       	ori	r24, 0x80	; 128
     c3a:	8c 93       	st	X, r24

        UBRRH = 0;
     c3c:	e0 e4       	ldi	r30, 0x40	; 64
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	10 82       	st	Z, r1

}
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <UART_VoidTransmitDataSynchronous>:

void UART_VoidTransmitDataSynchronous(u8 Copy_u8Data)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
            /*polling untill UDR empty*/
        while(GET_BIT(UCSRA ,UCSRA_UDRE)==0);
     c56:	eb e2       	ldi	r30, 0x2B	; 43
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	82 95       	swap	r24
     c5e:	86 95       	lsr	r24
     c60:	87 70       	andi	r24, 0x07	; 7
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	81 70       	andi	r24, 0x01	; 1
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	a1 f3       	breq	.-24     	; 0xc56 <UART_VoidTransmitDataSynchronous+0xc>
            /*copy data to udr register*/
        UDR = Copy_u8Data ;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	80 83       	st	Z, r24
            /*polling untill transmitting complete*/
        while(GET_BIT(UCSRA ,UCSRA_TXC)==0);
     c76:	eb e2       	ldi	r30, 0x2B	; 43
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	82 95       	swap	r24
     c7e:	86 95       	lsr	r24
     c80:	86 95       	lsr	r24
     c82:	83 70       	andi	r24, 0x03	; 3
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	81 70       	andi	r24, 0x01	; 1
     c8a:	90 70       	andi	r25, 0x00	; 0
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	99 f3       	breq	.-26     	; 0xc76 <UART_VoidTransmitDataSynchronous+0x2c>
            /* clear flag*/
        SET_BIT(UCSRA , UCSRA_TXC);
     c90:	ab e2       	ldi	r26, 0x2B	; 43
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	eb e2       	ldi	r30, 0x2B	; 43
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	80 64       	ori	r24, 0x40	; 64
     c9c:	8c 93       	st	X, r24
}
     c9e:	0f 90       	pop	r0
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <UART_u8ReceiveDataSynchronous>:

void UART_u8ReceiveDataSynchronous(u8 * Copy_u8ReceivedData)
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <UART_u8ReceiveDataSynchronous+0x6>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
        /*polling untill receiving complete*/
        while(GET_BIT(UCSRA , UCSRA_RXC)==0);
     cb4:	eb e2       	ldi	r30, 0x2B	; 43
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	88 23       	and	r24, r24
     cbc:	dc f7       	brge	.-10     	; 0xcb4 <UART_u8ReceiveDataSynchronous+0xe>
            /* get the receive data */
            * Copy_u8ReceivedData = UDR ;
     cbe:	ec e2       	ldi	r30, 0x2C	; 44
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	80 83       	st	Z, r24
      
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <TIMER0_voidInit>:
static void (*Global_pvOCNotificationFunction)(void) = NULL;

static void (*ICU_NotificationFunction)(void)=NULL ;

void TIMER0_voidInit(void)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
	#if TIMER0_MODE == NORMAL_MODE
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
		CLEAR_BIT(TCCR0,TCCR0_WGM01);
		/* Set CTC Mode for timer0 */
	#elif TIMER0_MODE == CTC_MODE
			CLEAR_BIT(TCCR0,TCCR0_WGM00);
     cdc:	a3 e5       	ldi	r26, 0x53	; 83
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e3 e5       	ldi	r30, 0x53	; 83
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8f 7b       	andi	r24, 0xBF	; 191
     ce8:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM01);
     cea:	a3 e5       	ldi	r26, 0x53	; 83
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e3 e5       	ldi	r30, 0x53	; 83
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 60       	ori	r24, 0x08	; 8
     cf6:	8c 93       	st	X, r24
	#else

	#endif

	/*Set The Prescaler to be 8*/
		TCCR0 &= PRESCALER_MASK ;
     cf8:	a3 e5       	ldi	r26, 0x53	; 83
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	88 7f       	andi	r24, 0xF8	; 248
     d04:	8c 93       	st	X, r24
		TCCR0 |= TIMER0_PRESCALER ;
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	8c 93       	st	X, r24

}
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TIMER2_voidInit>:
void TIMER2_voidInit(void)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
		/* Set Normal Mode for timer2*/ 
	#if TIMER2_MODE == NORMAL_MODE
		CLEAR_BIT(TCCR2,TCCR2_WGM20);
     d22:	a5 e4       	ldi	r26, 0x45	; 69
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e5 e4       	ldi	r30, 0x45	; 69
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 7b       	andi	r24, 0xBF	; 191
     d2e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21);
     d30:	a5 e4       	ldi	r26, 0x45	; 69
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e5 e4       	ldi	r30, 0x45	; 69
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	87 7f       	andi	r24, 0xF7	; 247
     d3c:	8c 93       	st	X, r24
	#else

	#endif

	/*Set The Prescaler to be 8*/
		TCCR2 &= PRESCALER_MASK ;
     d3e:	a5 e4       	ldi	r26, 0x45	; 69
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e5 e4       	ldi	r30, 0x45	; 69
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 7f       	andi	r24, 0xF8	; 248
     d4a:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_PRESCALER ;
     d4c:	a5 e4       	ldi	r26, 0x45	; 69
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e4       	ldi	r30, 0x45	; 69
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	8c 93       	st	X, r24

}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <TIMER0_VoidSetModeForFastmode>:

void TIMER0_VoidSetModeForFastmode(u8 Copy_U8Mode)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <TIMER0_VoidSetModeForFastmode+0x6>
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_U8Mode)
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	3b 83       	std	Y+3, r19	; 0x03
     d76:	2a 83       	std	Y+2, r18	; 0x02
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	9b 81       	ldd	r25, Y+3	; 0x03
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	c1 f0       	breq	.+48     	; 0xdb2 <TIMER0_VoidSetModeForFastmode+0x52>
     d82:	2a 81       	ldd	r18, Y+2	; 0x02
     d84:	3b 81       	ldd	r19, Y+3	; 0x03
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	11 f1       	breq	.+68     	; 0xdd0 <TIMER0_VoidSetModeForFastmode+0x70>
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	61 f5       	brne	.+88     	; 0xdec <TIMER0_VoidSetModeForFastmode+0x8c>
	{
	case FAST_OC0_DISCONNECTED :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     d94:	a3 e5       	ldi	r26, 0x53	; 83
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e3 e5       	ldi	r30, 0x53	; 83
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 7e       	andi	r24, 0xEF	; 239
     da0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
     da2:	a3 e5       	ldi	r26, 0x53	; 83
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e3 e5       	ldi	r30, 0x53	; 83
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8f 7d       	andi	r24, 0xDF	; 223
     dae:	8c 93       	st	X, r24
     db0:	1d c0       	rjmp	.+58     	; 0xdec <TIMER0_VoidSetModeForFastmode+0x8c>
		break;
	case FAST_SET_ON_TOP :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     db2:	a3 e5       	ldi	r26, 0x53	; 83
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e3 e5       	ldi	r30, 0x53	; 83
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 7e       	andi	r24, 0xEF	; 239
     dbe:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     dc0:	a3 e5       	ldi	r26, 0x53	; 83
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e3 e5       	ldi	r30, 0x53	; 83
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 62       	ori	r24, 0x20	; 32
     dcc:	8c 93       	st	X, r24
     dce:	0e c0       	rjmp	.+28     	; 0xdec <TIMER0_VoidSetModeForFastmode+0x8c>
		break;
	case FAST_CLEAR_ON_TOP :
		SET_BIT(TCCR0,TCCR0_COM00);
     dd0:	a3 e5       	ldi	r26, 0x53	; 83
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e3 e5       	ldi	r30, 0x53	; 83
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 61       	ori	r24, 0x10	; 16
     ddc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     dde:	a3 e5       	ldi	r26, 0x53	; 83
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e3 e5       	ldi	r30, 0x53	; 83
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 62       	ori	r24, 0x20	; 32
     dea:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <TIMER0_VoidSetModeForPhaseCorrectmode>:

void TIMER0_VoidSetModeForPhaseCorrectmode(u8 Copy_U8Mode)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <TIMER0_VoidSetModeForPhaseCorrectmode+0x6>
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_U8Mode)
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3b 83       	std	Y+3, r19	; 0x03
     e0e:	2a 83       	std	Y+2, r18	; 0x02
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	c1 f0       	breq	.+48     	; 0xe4a <TIMER0_VoidSetModeForPhaseCorrectmode+0x52>
     e1a:	2a 81       	ldd	r18, Y+2	; 0x02
     e1c:	3b 81       	ldd	r19, Y+3	; 0x03
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	11 f1       	breq	.+68     	; 0xe68 <TIMER0_VoidSetModeForPhaseCorrectmode+0x70>
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	61 f5       	brne	.+88     	; 0xe84 <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
	{
	case PHASE_OC0_DISCONNECTED :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     e2c:	a3 e5       	ldi	r26, 0x53	; 83
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e3 e5       	ldi	r30, 0x53	; 83
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7e       	andi	r24, 0xEF	; 239
     e38:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
     e3a:	a3 e5       	ldi	r26, 0x53	; 83
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e3 e5       	ldi	r30, 0x53	; 83
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 7d       	andi	r24, 0xDF	; 223
     e46:	8c 93       	st	X, r24
     e48:	1d c0       	rjmp	.+58     	; 0xe84 <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
		break;
	case PHASE_SET_OC0_ON_COMAPRE :
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 7e       	andi	r24, 0xEF	; 239
     e56:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 62       	ori	r24, 0x20	; 32
     e64:	8c 93       	st	X, r24
     e66:	0e c0       	rjmp	.+28     	; 0xe84 <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
		break;
	case PHASE_CLEAR_OC0_ON_COMPARE :
		SET_BIT(TCCR0,TCCR0_COM00);
     e68:	a3 e5       	ldi	r26, 0x53	; 83
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e3 e5       	ldi	r30, 0x53	; 83
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 61       	ori	r24, 0x10	; 16
     e74:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     e76:	a3 e5       	ldi	r26, 0x53	; 83
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e3 e5       	ldi	r30, 0x53	; 83
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 62       	ori	r24, 0x20	; 32
     e82:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <TIMER2_voidSetPreloadValue>:
void TIMER2_voidSetPreloadValue(u8 Copy_u8Value)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Value ;
     e9c:	e4 e4       	ldi	r30, 0x44	; 68
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	80 83       	st	Z, r24
}
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <TIMER2_voidSetOCMatchValue>:
void TIMER2_voidSetOCMatchValue(u8 Copy_u8Value)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Value;
     eb8:	e3 e4       	ldi	r30, 0x43	; 67
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	80 83       	st	Z, r24
}
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8Value)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
     ed4:	e2 e5       	ldi	r30, 0x52	; 82
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	80 83       	st	Z, r24
}
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <TIMER0_voidSetOCMatchValue>:
void TIMER0_voidSetOCMatchValue(u8 Copy_u8Value)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
     ef0:	ec e5       	ldi	r30, 0x5C	; 92
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 83       	st	Z, r24
}
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <TIMER0_voidSetOVFCallBack>:

void TIMER0_voidSetOVFCallBack(void(*pvNotificationFunction)(void))
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <TIMER0_voidSetOVFCallBack+0x6>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
	Global_pvOVFNotificationFunction = pvNotificationFunction;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	90 93 81 00 	sts	0x0081, r25
     f16:	80 93 80 00 	sts	0x0080, r24
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <TIMER0_voidSetOCCallBack>:
void TIMER0_voidSetOCCallBack(void(*pvNotificationFunction)(void))
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <TIMER0_voidSetOCCallBack+0x6>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
	Global_pvOCNotificationFunction = pvNotificationFunction;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	90 93 83 00 	sts	0x0083, r25
     f3a:	80 93 82 00 	sts	0x0082, r24
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <TIMER0_voidEnableInterrupt>:

void TIMER0_voidEnableInterrupt(u8 Copy_u8Mode)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Mode == NORMAL_MODE)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	88 23       	and	r24, r24
     f58:	41 f4       	brne	.+16     	; 0xf6a <TIMER0_voidEnableInterrupt+0x22>
	{
		SET_BIT(TIMSK,TIMSK_TOIE0);
     f5a:	a9 e5       	ldi	r26, 0x59	; 89
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e9 e5       	ldi	r30, 0x59	; 89
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	81 60       	ori	r24, 0x01	; 1
     f66:	8c 93       	st	X, r24
     f68:	0a c0       	rjmp	.+20     	; 0xf7e <TIMER0_voidEnableInterrupt+0x36>
	}
	else if(Copy_u8Mode == CTC_MODE)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	39 f4       	brne	.+14     	; 0xf7e <TIMER0_voidEnableInterrupt+0x36>
	{
		SET_BIT(TIMSK,TIMSK_OCIE0);
     f70:	a9 e5       	ldi	r26, 0x59	; 89
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e9 e5       	ldi	r30, 0x59	; 89
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	82 60       	ori	r24, 0x02	; 2
     f7c:	8c 93       	st	X, r24
	}
}
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <TIMER0_voidDisableInterrupt>:
void TIMER0_voidDisableInterrupt(u8 Copy_u8Mode)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Mode == NORMAL_MODE)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	88 23       	and	r24, r24
     f96:	41 f4       	brne	.+16     	; 0xfa8 <TIMER0_voidDisableInterrupt+0x22>
	{
		CLEAR_BIT(TIMSK,TIMSK_TOIE0);
     f98:	a9 e5       	ldi	r26, 0x59	; 89
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e9 e5       	ldi	r30, 0x59	; 89
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	8c 93       	st	X, r24
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <TIMER0_voidDisableInterrupt+0x36>
	}
	else if(Copy_u8Mode == CTC_MODE)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	39 f4       	brne	.+14     	; 0xfbc <TIMER0_voidDisableInterrupt+0x36>
	{
		CLEAR_BIT(TIMSK,TIMSK_OCIE0);
     fae:	a9 e5       	ldi	r26, 0x59	; 89
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e9 e5       	ldi	r30, 0x59	; 89
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8d 7f       	andi	r24, 0xFD	; 253
     fba:	8c 93       	st	X, r24
	}
}
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <TIMER0_voidSetBusyWait_OVFMode>:

void TIMER0_voidSetBusyWait_OVFMode(u32 Copy_u32Time)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <TIMER0_voidSetBusyWait_OVFMode+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <TIMER0_voidSetBusyWait_OVFMode+0x8>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <TIMER0_voidSetBusyWait_OVFMode+0xa>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
     fd6:	a3 e5       	ldi	r26, 0x53	; 83
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e5       	ldi	r30, 0x53	; 83
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02);
     ff2:	a3 e5       	ldi	r26, 0x53	; 83
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e3 e5       	ldi	r30, 0x53	; 83
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8b 7f       	andi	r24, 0xFB	; 251
     ffe:	8c 93       	st	X, r24

	TIMER0_voidSetPreloadValue(6);
    1000:	86 e0       	ldi	r24, 0x06	; 6
    1002:	0e 94 64 07 	call	0xec8	; 0xec8 <TIMER0_voidSetPreloadValue>
	u32 Number_of_OVF = ((u32)(Copy_u32Time*1000)) / 250;
    1006:	2d 81       	ldd	r18, Y+5	; 0x05
    1008:	3e 81       	ldd	r19, Y+6	; 0x06
    100a:	88 ee       	ldi	r24, 0xE8	; 232
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	ac 01       	movw	r20, r24
    1010:	24 9f       	mul	r18, r20
    1012:	c0 01       	movw	r24, r0
    1014:	25 9f       	mul	r18, r21
    1016:	90 0d       	add	r25, r0
    1018:	34 9f       	mul	r19, r20
    101a:	90 0d       	add	r25, r0
    101c:	11 24       	eor	r1, r1
    101e:	2a ef       	ldi	r18, 0xFA	; 250
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	b9 01       	movw	r22, r18
    1024:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodhi4>
    1028:	cb 01       	movw	r24, r22
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03

	u32 Counter = 0;
    102e:	1a 82       	std	Y+2, r1	; 0x02
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	18 c0       	rjmp	.+48     	; 0x1064 <TIMER0_voidSetBusyWait_OVFMode+0xa0>

	while(Counter < Number_of_OVF)
	{
		while(GET_BIT(TIFR , TIFR_TOV0) == 0);
    1034:	e8 e5       	ldi	r30, 0x58	; 88
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	b9 f3       	breq	.-18     	; 0x1034 <TIMER0_voidSetBusyWait_OVFMode+0x70>
		SET_BIT(TIFR , TIFR_TOV0);
    1046:	a8 e5       	ldi	r26, 0x58	; 88
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e8 e5       	ldi	r30, 0x58	; 88
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	8c 93       	st	X, r24
		Counter++;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_voidSetPreloadValue(6);
    105e:	86 e0       	ldi	r24, 0x06	; 6
    1060:	0e 94 64 07 	call	0xec8	; 0xec8 <TIMER0_voidSetPreloadValue>
	TIMER0_voidSetPreloadValue(6);
	u32 Number_of_OVF = ((u32)(Copy_u32Time*1000)) / 250;

	u32 Counter = 0;

	while(Counter < Number_of_OVF)
    1064:	29 81       	ldd	r18, Y+1	; 0x01
    1066:	3a 81       	ldd	r19, Y+2	; 0x02
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	08 f3       	brcs	.-62     	; 0x1034 <TIMER0_voidSetBusyWait_OVFMode+0x70>
		while(GET_BIT(TIFR , TIFR_TOV0) == 0);
		SET_BIT(TIFR , TIFR_TOV0);
		Counter++;
		TIMER0_voidSetPreloadValue(6);
	}
}
    1072:	26 96       	adiw	r28, 0x06	; 6
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <TIMER0_voidSetBusyWait_OCMode>:
void TIMER0_voidSetBusyWait_OCMode(u32 Copy_u32Time)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <TIMER0_voidSetBusyWait_OCMode+0x6>
    108a:	00 d0       	rcall	.+0      	; 0x108c <TIMER0_voidSetBusyWait_OCMode+0x8>
    108c:	00 d0       	rcall	.+0      	; 0x108e <TIMER0_voidSetBusyWait_OCMode+0xa>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
    1096:	a3 e5       	ldi	r26, 0x53	; 83
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e3 e5       	ldi	r30, 0x53	; 83
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8e 7f       	andi	r24, 0xFE	; 254
    10a2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    10a4:	a3 e5       	ldi	r26, 0x53	; 83
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e3 e5       	ldi	r30, 0x53	; 83
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	82 60       	ori	r24, 0x02	; 2
    10b0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02);
    10b2:	a3 e5       	ldi	r26, 0x53	; 83
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e3 e5       	ldi	r30, 0x53	; 83
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8b 7f       	andi	r24, 0xFB	; 251
    10be:	8c 93       	st	X, r24

	TIMER0_voidSetOCMatchValue(250);
    10c0:	8a ef       	ldi	r24, 0xFA	; 250
    10c2:	0e 94 72 07 	call	0xee4	; 0xee4 <TIMER0_voidSetOCMatchValue>
	/*You should cast the constants, i.e., 1000 and 250 to unsigned long (u32) and compute the multiplication operation first before the division */
	//u32 Number_of_OCFlags = ((u32)(Copy_u32Time*1000)) / 250;
	u32 Number_Of_OCF = ((u32)Copy_u32Time * 1000UL) / 250UL;
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ca:	cc 01       	movw	r24, r24
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	28 ee       	ldi	r18, 0xE8	; 232
    10d2:	33 e0       	ldi	r19, 0x03	; 3
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__mulsi3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	2a ef       	ldi	r18, 0xFA	; 250
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__udivmodsi4>
    10f4:	da 01       	movw	r26, r20
    10f6:	c9 01       	movw	r24, r18
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03

	u32 Local_u32Counter = 0;
    10fc:	1a 82       	std	Y+2, r1	; 0x02
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	16 c0       	rjmp	.+44     	; 0x112e <TIMER0_voidSetBusyWait_OCMode+0xaa>

	while(Local_u32Counter <= Number_Of_OCF)
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
    1102:	e8 e5       	ldi	r30, 0x58	; 88
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	86 95       	lsr	r24
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	90 70       	andi	r25, 0x00	; 0
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	b1 f3       	breq	.-20     	; 0x1102 <TIMER0_voidSetBusyWait_OCMode+0x7e>
		SET_BIT(TIFR , TIFR_OCF0);
    1116:	a8 e5       	ldi	r26, 0x58	; 88
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e8 e5       	ldi	r30, 0x58	; 88
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	82 60       	ori	r24, 0x02	; 2
    1122:	8c 93       	st	X, r24
		Local_u32Counter++;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
	//u32 Number_of_OCFlags = ((u32)(Copy_u32Time*1000)) / 250;
	u32 Number_Of_OCF = ((u32)Copy_u32Time * 1000UL) / 250UL;

	u32 Local_u32Counter = 0;

	while(Local_u32Counter <= Number_Of_OCF)
    112e:	29 81       	ldd	r18, Y+1	; 0x01
    1130:	3a 81       	ldd	r19, Y+2	; 0x02
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	82 17       	cp	r24, r18
    1138:	93 07       	cpc	r25, r19
    113a:	18 f7       	brcc	.-58     	; 0x1102 <TIMER0_voidSetBusyWait_OCMode+0x7e>
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
		SET_BIT(TIFR , TIFR_OCF0);
		Local_u32Counter++;
	}
}
    113c:	26 96       	adiw	r28, 0x06	; 6
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <ICU_U16GetICRRegister>:
u16 ICU_U16GetICRRegister(void)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    1156:	e6 e4       	ldi	r30, 0x46	; 70
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	91 81       	ldd	r25, Z+1	; 0x01
}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <ICU_VoidSetTriggerSignal>:
void ICU_VoidSetTriggerSignal( u8 Copy_u8TriggerSignal)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <ICU_VoidSetTriggerSignal+0x6>
    116a:	0f 92       	push	r0
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8TriggerSignal)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3b 83       	std	Y+3, r19	; 0x03
    117a:	2a 83       	std	Y+2, r18	; 0x02
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	69 f0       	breq	.+26     	; 0x119e <ICU_VoidSetTriggerSignal+0x3a>
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	3b 81       	ldd	r19, Y+3	; 0x03
    1188:	21 30       	cpi	r18, 0x01	; 1
    118a:	31 05       	cpc	r19, r1
    118c:	79 f4       	brne	.+30     	; 0x11ac <ICU_VoidSetTriggerSignal+0x48>
	{
	case  ICU_FALLING_EDGE :
				//SET BIT TO MAKE SENSE OF ICU IS FALLING
				CLEAR_BIT(TCCR1B,TCCR1B_ICES1);
    118e:	ae e4       	ldi	r26, 0x4E	; 78
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ee e4       	ldi	r30, 0x4E	; 78
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7b       	andi	r24, 0xBF	; 191
    119a:	8c 93       	st	X, r24
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <ICU_VoidSetTriggerSignal+0x48>
		break;
		case  ICU_RISING_EDGE :
				//SET BIT TO MAKE SENSE OF ICU IS RISING
				SET_BIT(TCCR1B,TCCR1B_ICES1);
    119e:	ae e4       	ldi	r26, 0x4E	; 78
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	ee e4       	ldi	r30, 0x4E	; 78
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 64       	ori	r24, 0x40	; 64
    11aa:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <ICU_VoidEnableIntrrupt>:
void ICU_VoidEnableIntrrupt(u8 Copu_U8InterruptStatus)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <ICU_VoidEnableIntrrupt+0x6>
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
	switch (Copu_U8InterruptStatus)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3b 83       	std	Y+3, r19	; 0x03
    11ce:	2a 83       	std	Y+2, r18	; 0x02
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	69 f0       	breq	.+26     	; 0x11f2 <ICU_VoidEnableIntrrupt+0x3a>
    11d8:	2a 81       	ldd	r18, Y+2	; 0x02
    11da:	3b 81       	ldd	r19, Y+3	; 0x03
    11dc:	21 30       	cpi	r18, 0x01	; 1
    11de:	31 05       	cpc	r19, r1
    11e0:	79 f4       	brne	.+30     	; 0x1200 <ICU_VoidEnableIntrrupt+0x48>
	{
	case  ICU_INTERRUPT_ENABLE :
				SET_BIT(TIMSK,TIMSK_TICIE1);
    11e2:	a9 e5       	ldi	r26, 0x59	; 89
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e9 e5       	ldi	r30, 0x59	; 89
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	80 62       	ori	r24, 0x20	; 32
    11ee:	8c 93       	st	X, r24
    11f0:	07 c0       	rjmp	.+14     	; 0x1200 <ICU_VoidEnableIntrrupt+0x48>
		break;
		case  ICU_INTERRUPT_DISABLE :
				CLEAR_BIT(TIMSK,TIMSK_TICIE1);
    11f2:	a9 e5       	ldi	r26, 0x59	; 89
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e9 e5       	ldi	r30, 0x59	; 89
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7d       	andi	r24, 0xDF	; 223
    11fe:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <ICU_VoidSetCallBack>:
void ICU_VoidSetCallBack(void (*notification)(void))
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <ICU_VoidSetCallBack+0x6>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	
	ICU_NotificationFunction=notification;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	90 93 85 00 	sts	0x0085, r25
    1222:	80 93 84 00 	sts	0x0084, r24
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <__vector_6>:
//ISR FOR ICU INTERRUPT FLAG 

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	if (ICU_NotificationFunction != NULL)
    125a:	80 91 84 00 	lds	r24, 0x0084
    125e:	90 91 85 00 	lds	r25, 0x0085
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	29 f0       	breq	.+10     	; 0x1270 <__vector_6+0x40>
	{
		ICU_NotificationFunction();
    1266:	e0 91 84 00 	lds	r30, 0x0084
    126a:	f0 91 85 00 	lds	r31, 0x0085
    126e:	09 95       	icall
	else
	{
		//do nothing
	}
	
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	ff 91       	pop	r31
    1276:	ef 91       	pop	r30
    1278:	bf 91       	pop	r27
    127a:	af 91       	pop	r26
    127c:	9f 91       	pop	r25
    127e:	8f 91       	pop	r24
    1280:	7f 91       	pop	r23
    1282:	6f 91       	pop	r22
    1284:	5f 91       	pop	r21
    1286:	4f 91       	pop	r20
    1288:	3f 91       	pop	r19
    128a:	2f 91       	pop	r18
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <GIE_VoidEnabledGlobalInterrupt>:

#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_VoidEnabledGlobalInterrupt(void)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG , SREG_BIT7);
    129e:	af e5       	ldi	r26, 0x5F	; 95
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ef e5       	ldi	r30, 0x5F	; 95
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	80 68       	ori	r24, 0x80	; 128
    12aa:	8c 93       	st	X, r24


}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <GIE_VoidDisabledGlobalInterrupt>:
void GIE_VoidDisabledGlobalInterrupt(void)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG , SREG_BIT7);
    12ba:	af e5       	ldi	r26, 0x5F	; 95
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ef e5       	ldi	r30, 0x5F	; 95
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 77       	andi	r24, 0x7F	; 127
    12c6:	8c 93       	st	X, r24


}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <EXTI_VoidIntit>:
static void (*EXTI_PVoidINT1NotificationFunction) (void) = NULL ;
static void (*EXTI_PVoidINT2NotificationFunction) (void) = NULL ;


void EXTI_VoidIntit( u8 Copy_U8INTNum)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <EXTI_VoidIntit+0x6>
    12d4:	0f 92       	push	r0
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_U8INTNum)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3b 83       	std	Y+3, r19	; 0x03
    12e4:	2a 83       	std	Y+2, r18	; 0x02
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	a1 f0       	breq	.+40     	; 0x1318 <EXTI_VoidIntit+0x4a>
    12f0:	2a 81       	ldd	r18, Y+2	; 0x02
    12f2:	3b 81       	ldd	r19, Y+3	; 0x03
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	d1 f0       	breq	.+52     	; 0x132e <EXTI_VoidIntit+0x60>
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	01 f5       	brne	.+64     	; 0x1342 <EXTI_VoidIntit+0x74>
    {
    case EXTI_INT0:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	62 e0       	ldi	r22, 0x02	; 2
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI0_PORT,EXTI0_PIN,HIGH);
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	62 e0       	ldi	r22, 0x02	; 2
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    1316:	15 c0       	rjmp	.+42     	; 0x1342 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT1:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	63 e0       	ldi	r22, 0x03	; 3
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI1_PORT,EXTI1_PIN,HIGH);
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	63 e0       	ldi	r22, 0x03	; 3
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    132c:	0a c0       	rjmp	.+20     	; 0x1342 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT2:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI2_PORT,EXTI2_PIN,INPUT);
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	62 e0       	ldi	r22, 0x02	; 2
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI2_PORT,EXTI2_PIN,HIGH);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
        break;
    
    default:
        break;
    }
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <EXTI_VoidEnable>:

void EXTI_VoidEnable(u8 Copy_U8Intnum)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <EXTI_VoidEnable+0x6>
    1354:	0f 92       	push	r0
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3b 83       	std	Y+3, r19	; 0x03
    1364:	2a 83       	std	Y+2, r18	; 0x02
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	89 f0       	breq	.+34     	; 0x1392 <EXTI_VoidEnable+0x44>
    1370:	2a 81       	ldd	r18, Y+2	; 0x02
    1372:	3b 81       	ldd	r19, Y+3	; 0x03
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	a1 f0       	breq	.+40     	; 0x13a2 <EXTI_VoidEnable+0x54>
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	b9 f4       	brne	.+46     	; 0x13b0 <EXTI_VoidEnable+0x62>
    {
    case  EXTI_INT0  :
            SET_BIT(GICR,INT0);
    1382:	ab e5       	ldi	r26, 0x5B	; 91
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	eb e5       	ldi	r30, 0x5B	; 91
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	80 64       	ori	r24, 0x40	; 64
    138e:	8c 93       	st	X, r24
    1390:	0f c0       	rjmp	.+30     	; 0x13b0 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT1:
            SET_BIT(GICR,INT1);
    1392:	ab e5       	ldi	r26, 0x5B	; 91
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	eb e5       	ldi	r30, 0x5B	; 91
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	80 68       	ori	r24, 0x80	; 128
    139e:	8c 93       	st	X, r24
    13a0:	07 c0       	rjmp	.+14     	; 0x13b0 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT2 :
            SET_BIT(GICR,INT2);
    13a2:	ab e5       	ldi	r26, 0x5B	; 91
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	eb e5       	ldi	r30, 0x5B	; 91
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 62       	ori	r24, 0x20	; 32
    13ae:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <EXTI_VoidDisable>:
void EXTI_VoidDisable(u8 Copy_U8Intnum)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <EXTI_VoidDisable+0x6>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3b 83       	std	Y+3, r19	; 0x03
    13d2:	2a 83       	std	Y+2, r18	; 0x02
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	89 f0       	breq	.+34     	; 0x1400 <EXTI_VoidDisable+0x44>
    13de:	2a 81       	ldd	r18, Y+2	; 0x02
    13e0:	3b 81       	ldd	r19, Y+3	; 0x03
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	a1 f0       	breq	.+40     	; 0x1410 <EXTI_VoidDisable+0x54>
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	9b 81       	ldd	r25, Y+3	; 0x03
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	b9 f4       	brne	.+46     	; 0x141e <EXTI_VoidDisable+0x62>
    {
    case  EXTI_INT0:
            CLEAR_BIT(GICR,INT0);
    13f0:	ab e5       	ldi	r26, 0x5B	; 91
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	eb e5       	ldi	r30, 0x5B	; 91
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8f 7b       	andi	r24, 0xBF	; 191
    13fc:	8c 93       	st	X, r24
    13fe:	0f c0       	rjmp	.+30     	; 0x141e <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT1:
            CLEAR_BIT(GICR,INT1);
    1400:	ab e5       	ldi	r26, 0x5B	; 91
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e5       	ldi	r30, 0x5B	; 91
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 77       	andi	r24, 0x7F	; 127
    140c:	8c 93       	st	X, r24
    140e:	07 c0       	rjmp	.+14     	; 0x141e <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT2:
            CLEAR_BIT(GICR,INT2);
    1410:	ab e5       	ldi	r26, 0x5B	; 91
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e5       	ldi	r30, 0x5B	; 91
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8f 7d       	andi	r24, 0xDF	; 223
    141c:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <EXTI_VoidTriggerEdge>:
void EXTI_VoidTriggerEdge(u8 Copy_U8Intnum , u8 Copy_U8Edge)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	2a 97       	sbiw	r28, 0x0a	; 10
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_U8Intnum)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3a 87       	std	Y+10, r19	; 0x0a
    144a:	29 87       	std	Y+9, r18	; 0x09
    144c:	89 85       	ldd	r24, Y+9	; 0x09
    144e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <EXTI_VoidTriggerEdge+0x2e>
    1456:	66 c0       	rjmp	.+204    	; 0x1524 <EXTI_VoidTriggerEdge+0xfa>
    1458:	29 85       	ldd	r18, Y+9	; 0x09
    145a:	3a 85       	ldd	r19, Y+10	; 0x0a
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <EXTI_VoidTriggerEdge+0x3a>
    1462:	bb c0       	rjmp	.+374    	; 0x15da <EXTI_VoidTriggerEdge+0x1b0>
    1464:	89 85       	ldd	r24, Y+9	; 0x09
    1466:	9a 85       	ldd	r25, Y+10	; 0x0a
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	09 f0       	breq	.+2      	; 0x146e <EXTI_VoidTriggerEdge+0x44>
    146c:	dd c0       	rjmp	.+442    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
    {
    case  EXTI_INT0:
                switch (Copy_U8Edge)
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	38 87       	std	Y+8, r19	; 0x08
    1476:	2f 83       	std	Y+7, r18	; 0x07
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	21 f1       	breq	.+72     	; 0x14ca <EXTI_VoidTriggerEdge+0xa0>
    1482:	2f 81       	ldd	r18, Y+7	; 0x07
    1484:	38 85       	ldd	r19, Y+8	; 0x08
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <EXTI_VoidTriggerEdge+0x6c>
    148c:	8f 81       	ldd	r24, Y+7	; 0x07
    148e:	98 85       	ldd	r25, Y+8	; 0x08
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	61 f0       	breq	.+24     	; 0x14ac <EXTI_VoidTriggerEdge+0x82>
    1494:	c9 c0       	rjmp	.+402    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
    1496:	2f 81       	ldd	r18, Y+7	; 0x07
    1498:	38 85       	ldd	r19, Y+8	; 0x08
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	21 f1       	breq	.+72     	; 0x14e8 <EXTI_VoidTriggerEdge+0xbe>
    14a0:	8f 81       	ldd	r24, Y+7	; 0x07
    14a2:	98 85       	ldd	r25, Y+8	; 0x08
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	71 f1       	breq	.+92     	; 0x1506 <EXTI_VoidTriggerEdge+0xdc>
    14aa:	be c0       	rjmp	.+380    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC00);
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8e 7f       	andi	r24, 0xFE	; 254
    14b8:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    14ba:	a5 e5       	ldi	r26, 0x55	; 85
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e5       	ldi	r30, 0x55	; 85
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8d 7f       	andi	r24, 0xFD	; 253
    14c6:	8c 93       	st	X, r24
    14c8:	af c0       	rjmp	.+350    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC00);
    14ca:	a5 e5       	ldi	r26, 0x55	; 85
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e5       	ldi	r30, 0x55	; 85
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	81 60       	ori	r24, 0x01	; 1
    14d6:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    14d8:	a5 e5       	ldi	r26, 0x55	; 85
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e5       	ldi	r30, 0x55	; 85
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8d 7f       	andi	r24, 0xFD	; 253
    14e4:	8c 93       	st	X, r24
    14e6:	a0 c0       	rjmp	.+320    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC00);
    14e8:	a5 e5       	ldi	r26, 0x55	; 85
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e5 e5       	ldi	r30, 0x55	; 85
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	8e 7f       	andi	r24, 0xFE	; 254
    14f4:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    14f6:	a5 e5       	ldi	r26, 0x55	; 85
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e5       	ldi	r30, 0x55	; 85
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	82 60       	ori	r24, 0x02	; 2
    1502:	8c 93       	st	X, r24
    1504:	91 c0       	rjmp	.+290    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC00);
    1506:	a5 e5       	ldi	r26, 0x55	; 85
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e5 e5       	ldi	r30, 0x55	; 85
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	81 60       	ori	r24, 0x01	; 1
    1512:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    1514:	a5 e5       	ldi	r26, 0x55	; 85
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e5       	ldi	r30, 0x55	; 85
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	8c 93       	st	X, r24
    1522:	82 c0       	rjmp	.+260    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT1:
                switch (Copy_U8Edge)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3e 83       	std	Y+6, r19	; 0x06
    152c:	2d 83       	std	Y+5, r18	; 0x05
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	21 f1       	breq	.+72     	; 0x1580 <EXTI_VoidTriggerEdge+0x156>
    1538:	2d 81       	ldd	r18, Y+5	; 0x05
    153a:	3e 81       	ldd	r19, Y+6	; 0x06
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <EXTI_VoidTriggerEdge+0x122>
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	61 f0       	breq	.+24     	; 0x1562 <EXTI_VoidTriggerEdge+0x138>
    154a:	6e c0       	rjmp	.+220    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
    154c:	2d 81       	ldd	r18, Y+5	; 0x05
    154e:	3e 81       	ldd	r19, Y+6	; 0x06
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	21 f1       	breq	.+72     	; 0x159e <EXTI_VoidTriggerEdge+0x174>
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	71 f1       	breq	.+92     	; 0x15bc <EXTI_VoidTriggerEdge+0x192>
    1560:	63 c0       	rjmp	.+198    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC10);
    1562:	a5 e5       	ldi	r26, 0x55	; 85
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e5       	ldi	r30, 0x55	; 85
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8b 7f       	andi	r24, 0xFB	; 251
    156e:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    1570:	a5 e5       	ldi	r26, 0x55	; 85
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e5 e5       	ldi	r30, 0x55	; 85
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	87 7f       	andi	r24, 0xF7	; 247
    157c:	8c 93       	st	X, r24
    157e:	54 c0       	rjmp	.+168    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC10);
    1580:	a5 e5       	ldi	r26, 0x55	; 85
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e5 e5       	ldi	r30, 0x55	; 85
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	84 60       	ori	r24, 0x04	; 4
    158c:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    158e:	a5 e5       	ldi	r26, 0x55	; 85
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e5 e5       	ldi	r30, 0x55	; 85
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	87 7f       	andi	r24, 0xF7	; 247
    159a:	8c 93       	st	X, r24
    159c:	45 c0       	rjmp	.+138    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC10);
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8b 7f       	andi	r24, 0xFB	; 251
    15aa:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    15ac:	a5 e5       	ldi	r26, 0x55	; 85
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e5       	ldi	r30, 0x55	; 85
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	88 60       	ori	r24, 0x08	; 8
    15b8:	8c 93       	st	X, r24
    15ba:	36 c0       	rjmp	.+108    	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC10);
    15bc:	a5 e5       	ldi	r26, 0x55	; 85
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e5 e5       	ldi	r30, 0x55	; 85
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	84 60       	ori	r24, 0x04	; 4
    15c8:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    15ca:	a5 e5       	ldi	r26, 0x55	; 85
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e5       	ldi	r30, 0x55	; 85
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 60       	ori	r24, 0x08	; 8
    15d6:	8c 93       	st	X, r24
    15d8:	27 c0       	rjmp	.+78     	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT2:
                switch (Copy_U8Edge)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3c 83       	std	Y+4, r19	; 0x04
    15e2:	2b 83       	std	Y+3, r18	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	31 f0       	breq	.+12     	; 0x15fa <EXTI_VoidTriggerEdge+0x1d0>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	23 30       	cpi	r18, 0x03	; 3
    15f4:	31 05       	cpc	r19, r1
    15f6:	49 f0       	breq	.+18     	; 0x160a <EXTI_VoidTriggerEdge+0x1e0>
    15f8:	10 c0       	rjmp	.+32     	; 0x161a <EXTI_VoidTriggerEdge+0x1f0>
                {
            
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCSR,ISC2);
    15fa:	a4 e5       	ldi	r26, 0x54	; 84
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e4 e5       	ldi	r30, 0x54	; 84
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 7b       	andi	r24, 0xBF	; 191
    1606:	8c 93       	st	X, r24
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                        
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCSR,ISC2);
    160a:	a4 e5       	ldi	r26, 0x54	; 84
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e4 e5       	ldi	r30, 0x54	; 84
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	80 64       	ori	r24, 0x40	; 64
    1616:	8c 93       	st	X, r24
    1618:	07 c0       	rjmp	.+14     	; 0x1628 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                
                     default:
                            CLEAR_BIT(MCUCSR,ISC2);
    161a:	a4 e5       	ldi	r26, 0x54	; 84
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e4 e5       	ldi	r30, 0x54	; 84
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8f 7b       	andi	r24, 0xBF	; 191
    1626:	8c 93       	st	X, r24
            break;
    
        default:
        break;
    }
}
    1628:	2a 96       	adiw	r28, 0x0a	; 10
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <EXTI_VoidINT0SetCallBack>:

//function to take adress of user function  for EXTI0
void EXTI_VoidINT0SetCallBack(void (*NotificationFunction) (void))
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <EXTI_VoidINT0SetCallBack+0x6>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user 
    EXTI_PVoidINT0NotificationFunction=NotificationFunction ;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	90 93 87 00 	sts	0x0087, r25
    1650:	80 93 86 00 	sts	0x0086, r24
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <__vector_1>:
//TELL LINKER OPTMIZER that function change within hardware donts delete it  
void __vector_1 (void)  __attribute__ ((signal)) ; 
//function implemention that takes global pointer to function and execute it  
// we can make macro to #define EXTI0_vector    __vector_1
void __vector_1 (void)
{   
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    //execute function 
    EXTI_PVoidINT0NotificationFunction();
    1688:	e0 91 86 00 	lds	r30, 0x0086
    168c:	f0 91 87 00 	lds	r31, 0x0087
    1690:	09 95       	icall
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <EXTI_VoidINT1SetCallBack>:

//function to take adress of user function  for EXTI1
void EXTI_VoidINT1SetCallBack(void (*NotificationFunction) (void))
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <EXTI_VoidINT1SetCallBack+0x6>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user
    EXTI_PVoidINT1NotificationFunction=NotificationFunction ;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	90 93 89 00 	sts	0x0089, r25
    16ce:	80 93 88 00 	sts	0x0088, r24
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <__vector_2>:
//ISR for INT1
//TELL LINKER OPTMIZER that function change within hardware donts delete it
void __vector_2(void) __attribute__((signal));
//function implemention that takes global pointer to function and execute it 
void __vector_2(void)
{
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    //execute function
    EXTI_PVoidINT1NotificationFunction();
    1706:	e0 91 88 00 	lds	r30, 0x0088
    170a:	f0 91 89 00 	lds	r31, 0x0089
    170e:	09 95       	icall
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <EXTI_VoidINT2SetCallBack>:

void EXTI_VoidINT2SetCallBack (void (*NotificationFunction) (void))
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <EXTI_VoidINT2SetCallBack+0x6>
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
    EXTI_PVoidINT2NotificationFunction=NotificationFunction;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	90 93 8b 00 	sts	0x008B, r25
    174c:	80 93 8a 00 	sts	0x008A, r24
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <__vector_3>:

void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void)
{
    175a:	1f 92       	push	r1
    175c:	0f 92       	push	r0
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	0f 92       	push	r0
    1762:	11 24       	eor	r1, r1
    1764:	2f 93       	push	r18
    1766:	3f 93       	push	r19
    1768:	4f 93       	push	r20
    176a:	5f 93       	push	r21
    176c:	6f 93       	push	r22
    176e:	7f 93       	push	r23
    1770:	8f 93       	push	r24
    1772:	9f 93       	push	r25
    1774:	af 93       	push	r26
    1776:	bf 93       	push	r27
    1778:	ef 93       	push	r30
    177a:	ff 93       	push	r31
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    EXTI_PVoidINT2NotificationFunction();
    1784:	e0 91 8a 00 	lds	r30, 0x008A
    1788:	f0 91 8b 00 	lds	r31, 0x008B
    178c:	09 95       	icall
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <DIO_voidSetPinDirection>:
/*Self files INclusions in the same sequence  */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void 	DIO_voidSetPinDirection(u8 Copy_U8PortNmame , u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <DIO_voidSetPinDirection+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <DIO_voidSetPinDirection+0x8>
    17bc:	0f 92       	push	r0
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
    17c6:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8PortNmame)
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3d 83       	std	Y+5, r19	; 0x05
    17d0:	2c 83       	std	Y+4, r18	; 0x04
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <DIO_voidSetPinDirection+0x2a>
    17dc:	47 c0       	rjmp	.+142    	; 0x186c <DIO_voidSetPinDirection+0xb8>
    17de:	2c 81       	ldd	r18, Y+4	; 0x04
    17e0:	3d 81       	ldd	r19, Y+5	; 0x05
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	2c f4       	brge	.+10     	; 0x17f2 <DIO_voidSetPinDirection+0x3e>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	71 f0       	breq	.+28     	; 0x180c <DIO_voidSetPinDirection+0x58>
    17f0:	cb c0       	rjmp	.+406    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
    17f2:	2c 81       	ldd	r18, Y+4	; 0x04
    17f4:	3d 81       	ldd	r19, Y+5	; 0x05
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <DIO_voidSetPinDirection+0x4a>
    17fc:	67 c0       	rjmp	.+206    	; 0x18cc <DIO_voidSetPinDirection+0x118>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <DIO_voidSetPinDirection+0x56>
    1808:	91 c0       	rjmp	.+290    	; 0x192c <DIO_voidSetPinDirection+0x178>
    180a:	be c0       	rjmp	.+380    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	a1 f4       	brne	.+40     	; 0x183a <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA , Copy_u8PinNumber);
    1812:	aa e3       	ldi	r26, 0x3A	; 58
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ea e3       	ldi	r30, 0x3A	; 58
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_voidSetPinDirection+0x7c>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_voidSetPinDirection+0x78>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	a7 c0       	rjmp	.+334    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 23       	and	r24, r24
    183e:	09 f0       	breq	.+2      	; 0x1842 <DIO_voidSetPinDirection+0x8e>
    1840:	a3 c0       	rjmp	.+326    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRA , Copy_u8PinNumber);
    1842:	aa e3       	ldi	r26, 0x3A	; 58
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ea e3       	ldi	r30, 0x3A	; 58
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_voidSetPinDirection+0xac>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_voidSetPinDirection+0xa8>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	8e c0       	rjmp	.+284    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	a1 f4       	brne	.+40     	; 0x189a <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB , Copy_u8PinNumber);
    1872:	a7 e3       	ldi	r26, 0x37	; 55
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e7 e3       	ldi	r30, 0x37	; 55
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_voidSetPinDirection+0xdc>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_voidSetPinDirection+0xd8>
    1894:	84 2b       	or	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	77 c0       	rjmp	.+238    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 23       	and	r24, r24
    189e:	09 f0       	breq	.+2      	; 0x18a2 <DIO_voidSetPinDirection+0xee>
    18a0:	73 c0       	rjmp	.+230    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRB , Copy_u8PinNumber);
    18a2:	a7 e3       	ldi	r26, 0x37	; 55
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e7 e3       	ldi	r30, 0x37	; 55
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_voidSetPinDirection+0x10c>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <DIO_voidSetPinDirection+0x108>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	5e c0       	rjmp	.+188    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	a1 f4       	brne	.+40     	; 0x18fa <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC , Copy_u8PinNumber);
    18d2:	a4 e3       	ldi	r26, 0x34	; 52
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e4 e3       	ldi	r30, 0x34	; 52
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_voidSetPinDirection+0x13c>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_voidSetPinDirection+0x138>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	47 c0       	rjmp	.+142    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	88 23       	and	r24, r24
    18fe:	09 f0       	breq	.+2      	; 0x1902 <DIO_voidSetPinDirection+0x14e>
    1900:	43 c0       	rjmp	.+134    	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRC , Copy_u8PinNumber);
    1902:	a4 e3       	ldi	r26, 0x34	; 52
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e4 e3       	ldi	r30, 0x34	; 52
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_voidSetPinDirection+0x16c>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_voidSetPinDirection+0x168>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	2e c0       	rjmp	.+92     	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	a1 f4       	brne	.+40     	; 0x195a <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD , Copy_u8PinNumber);
    1932:	a1 e3       	ldi	r26, 0x31	; 49
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e1 e3       	ldi	r30, 0x31	; 49
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_voidSetPinDirection+0x19c>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_voidSetPinDirection+0x198>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	17 c0       	rjmp	.+46     	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	88 23       	and	r24, r24
    195e:	a1 f4       	brne	.+40     	; 0x1988 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRD , Copy_u8PinNumber);
    1960:	a1 e3       	ldi	r26, 0x31	; 49
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e1 e3       	ldi	r30, 0x31	; 49
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_voidSetPinDirection+0x1ca>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_voidSetPinDirection+0x1c6>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
	
	default:
			//do no thing 
		break;
	}
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_U8PinState)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	2d 97       	sbiw	r28, 0x0d	; 13
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	6a 83       	std	Y+2, r22	; 0x02
    19b0:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8PortNumber)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3d 87       	std	Y+13, r19	; 0x0d
    19ba:	2c 87       	std	Y+12, r18	; 0x0c
    19bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    19be:	9d 85       	ldd	r25, Y+13	; 0x0d
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	91 05       	cpc	r25, r1
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <DIO_VoidSetPinValue+0x30>
    19c6:	4f c0       	rjmp	.+158    	; 0x1a66 <DIO_VoidSetPinValue+0xce>
    19c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    19ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	2c f4       	brge	.+10     	; 0x19dc <DIO_VoidSetPinValue+0x44>
    19d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    19d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	71 f0       	breq	.+28     	; 0x19f6 <DIO_VoidSetPinValue+0x5e>
    19da:	ec c0       	rjmp	.+472    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
    19dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    19de:	3d 85       	ldd	r19, Y+13	; 0x0d
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <DIO_VoidSetPinValue+0x50>
    19e6:	77 c0       	rjmp	.+238    	; 0x1ad6 <DIO_VoidSetPinValue+0x13e>
    19e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    19ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <DIO_VoidSetPinValue+0x5c>
    19f2:	a9 c0       	rjmp	.+338    	; 0x1b46 <DIO_VoidSetPinValue+0x1ae>
    19f4:	df c0       	rjmp	.+446    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
	{
		case DIO_PORTA :
			switch(Copy_U8PinState)
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3b 87       	std	Y+11, r19	; 0x0b
    19fe:	2a 87       	std	Y+10, r18	; 0x0a
    1a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	31 f0       	breq	.+12     	; 0x1a14 <DIO_VoidSetPinValue+0x7c>
    1a08:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a0a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a0c:	21 30       	cpi	r18, 0x01	; 1
    1a0e:	31 05       	cpc	r19, r1
    1a10:	b1 f0       	breq	.+44     	; 0x1a3e <DIO_VoidSetPinValue+0xa6>
    1a12:	d0 c0       	rjmp	.+416    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTA , Copy_u8PinNumber );
    1a14:	ab e3       	ldi	r26, 0x3B	; 59
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_VoidSetPinValue+0x9a>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_VoidSetPinValue+0x96>
    1a36:	80 95       	com	r24
    1a38:	84 23       	and	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	bb c0       	rjmp	.+374    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTA , Copy_u8PinNumber );
    1a3e:	ab e3       	ldi	r26, 0x3B	; 59
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	eb e3       	ldi	r30, 0x3B	; 59
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_VoidSetPinValue+0xc4>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_VoidSetPinValue+0xc0>
    1a60:	84 2b       	or	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	a7 c0       	rjmp	.+334    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTB :
			switch(Copy_U8PinState)
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	39 87       	std	Y+9, r19	; 0x09
    1a6e:	28 87       	std	Y+8, r18	; 0x08
    1a70:	88 85       	ldd	r24, Y+8	; 0x08
    1a72:	99 85       	ldd	r25, Y+9	; 0x09
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	31 f0       	breq	.+12     	; 0x1a84 <DIO_VoidSetPinValue+0xec>
    1a78:	28 85       	ldd	r18, Y+8	; 0x08
    1a7a:	39 85       	ldd	r19, Y+9	; 0x09
    1a7c:	21 30       	cpi	r18, 0x01	; 1
    1a7e:	31 05       	cpc	r19, r1
    1a80:	b1 f0       	breq	.+44     	; 0x1aae <DIO_VoidSetPinValue+0x116>
    1a82:	98 c0       	rjmp	.+304    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTB , Copy_u8PinNumber );
    1a84:	a8 e3       	ldi	r26, 0x38	; 56
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e8 e3       	ldi	r30, 0x38	; 56
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_VoidSetPinValue+0x10a>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_VoidSetPinValue+0x106>
    1aa6:	80 95       	com	r24
    1aa8:	84 23       	and	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	83 c0       	rjmp	.+262    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTB , Copy_u8PinNumber );
    1aae:	a8 e3       	ldi	r26, 0x38	; 56
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e8 e3       	ldi	r30, 0x38	; 56
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_VoidSetPinValue+0x134>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_VoidSetPinValue+0x130>
    1ad0:	84 2b       	or	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	6f c0       	rjmp	.+222    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTC :
			switch(Copy_U8PinState)
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	3f 83       	std	Y+7, r19	; 0x07
    1ade:	2e 83       	std	Y+6, r18	; 0x06
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	31 f0       	breq	.+12     	; 0x1af4 <DIO_VoidSetPinValue+0x15c>
    1ae8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aea:	3f 81       	ldd	r19, Y+7	; 0x07
    1aec:	21 30       	cpi	r18, 0x01	; 1
    1aee:	31 05       	cpc	r19, r1
    1af0:	b1 f0       	breq	.+44     	; 0x1b1e <DIO_VoidSetPinValue+0x186>
    1af2:	60 c0       	rjmp	.+192    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTC , Copy_u8PinNumber );
    1af4:	a5 e3       	ldi	r26, 0x35	; 53
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e3       	ldi	r30, 0x35	; 53
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_VoidSetPinValue+0x17a>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_VoidSetPinValue+0x176>
    1b16:	80 95       	com	r24
    1b18:	84 23       	and	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	4b c0       	rjmp	.+150    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTC , Copy_u8PinNumber );
    1b1e:	a5 e3       	ldi	r26, 0x35	; 53
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e3       	ldi	r30, 0x35	; 53
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_VoidSetPinValue+0x1a4>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_VoidSetPinValue+0x1a0>
    1b40:	84 2b       	or	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	37 c0       	rjmp	.+110    	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTD :
			switch(Copy_U8PinState)
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3d 83       	std	Y+5, r19	; 0x05
    1b4e:	2c 83       	std	Y+4, r18	; 0x04
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	9d 81       	ldd	r25, Y+5	; 0x05
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	31 f0       	breq	.+12     	; 0x1b64 <DIO_VoidSetPinValue+0x1cc>
    1b58:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5c:	21 30       	cpi	r18, 0x01	; 1
    1b5e:	31 05       	cpc	r19, r1
    1b60:	b1 f0       	breq	.+44     	; 0x1b8e <DIO_VoidSetPinValue+0x1f6>
    1b62:	28 c0       	rjmp	.+80     	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTD , Copy_u8PinNumber );
    1b64:	a2 e3       	ldi	r26, 0x32	; 50
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e2 e3       	ldi	r30, 0x32	; 50
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	48 2f       	mov	r20, r24
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 2e       	mov	r0, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_VoidSetPinValue+0x1ea>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	0a 94       	dec	r0
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <DIO_VoidSetPinValue+0x1e6>
    1b86:	80 95       	com	r24
    1b88:	84 23       	and	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	13 c0       	rjmp	.+38     	; 0x1bb4 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTD , Copy_u8PinNumber );
    1b8e:	a2 e3       	ldi	r26, 0x32	; 50
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e2 e3       	ldi	r30, 0x32	; 50
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <DIO_VoidSetPinValue+0x214>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <DIO_VoidSetPinValue+0x210>
    1bb0:	84 2b       	or	r24, r20
    1bb2:	8c 93       	st	X, r24
	
	default:
			// Do nothing 
		break;
	}
}
    1bb4:	2d 96       	adiw	r28, 0x0d	; 13
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <DIO_VoidGetPinValue>:

u8  DIO_VoidGetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <DIO_VoidGetPinValue+0x6>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <DIO_VoidGetPinValue+0x8>
    1bce:	0f 92       	push	r0
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	8a 83       	std	Y+2, r24	; 0x02
    1bd6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue =0 ;
    1bd8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PortName)
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	3d 83       	std	Y+5, r19	; 0x05
    1be2:	2c 83       	std	Y+4, r18	; 0x04
    1be4:	4c 81       	ldd	r20, Y+4	; 0x04
    1be6:	5d 81       	ldd	r21, Y+5	; 0x05
    1be8:	41 30       	cpi	r20, 0x01	; 1
    1bea:	51 05       	cpc	r21, r1
    1bec:	41 f1       	breq	.+80     	; 0x1c3e <DIO_VoidGetPinValue+0x78>
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	34 f4       	brge	.+12     	; 0x1c04 <DIO_VoidGetPinValue+0x3e>
    1bf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfc:	21 15       	cp	r18, r1
    1bfe:	31 05       	cpc	r19, r1
    1c00:	61 f0       	breq	.+24     	; 0x1c1a <DIO_VoidGetPinValue+0x54>
    1c02:	52 c0       	rjmp	.+164    	; 0x1ca8 <DIO_VoidGetPinValue+0xe2>
    1c04:	4c 81       	ldd	r20, Y+4	; 0x04
    1c06:	5d 81       	ldd	r21, Y+5	; 0x05
    1c08:	42 30       	cpi	r20, 0x02	; 2
    1c0a:	51 05       	cpc	r21, r1
    1c0c:	51 f1       	breq	.+84     	; 0x1c62 <DIO_VoidGetPinValue+0x9c>
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	9d 81       	ldd	r25, Y+5	; 0x05
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	91 05       	cpc	r25, r1
    1c16:	b9 f1       	breq	.+110    	; 0x1c86 <DIO_VoidGetPinValue+0xc0>
    1c18:	47 c0       	rjmp	.+142    	; 0x1ca8 <DIO_VoidGetPinValue+0xe2>
	{
		case DIO_PORTA :
			Local_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    1c1a:	eb e3       	ldi	r30, 0x3B	; 59
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a9 01       	movw	r20, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_VoidGetPinValue+0x6c>
    1c2e:	55 95       	asr	r21
    1c30:	47 95       	ror	r20
    1c32:	8a 95       	dec	r24
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_VoidGetPinValue+0x68>
    1c36:	ca 01       	movw	r24, r20
    1c38:	81 70       	andi	r24, 0x01	; 1
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	35 c0       	rjmp	.+106    	; 0x1ca8 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTB :
			Local_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    1c3e:	e8 e3       	ldi	r30, 0x38	; 56
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a9 01       	movw	r20, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_VoidGetPinValue+0x90>
    1c52:	55 95       	asr	r21
    1c54:	47 95       	ror	r20
    1c56:	8a 95       	dec	r24
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_VoidGetPinValue+0x8c>
    1c5a:	ca 01       	movw	r24, r20
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	23 c0       	rjmp	.+70     	; 0x1ca8 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTC :
			Local_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    1c62:	e5 e3       	ldi	r30, 0x35	; 53
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a9 01       	movw	r20, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_VoidGetPinValue+0xb4>
    1c76:	55 95       	asr	r21
    1c78:	47 95       	ror	r20
    1c7a:	8a 95       	dec	r24
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <DIO_VoidGetPinValue+0xb0>
    1c7e:	ca 01       	movw	r24, r20
    1c80:	81 70       	andi	r24, 0x01	; 1
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	11 c0       	rjmp	.+34     	; 0x1ca8 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTD :
			Local_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    1c86:	e2 e3       	ldi	r30, 0x32	; 50
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_VoidGetPinValue+0xd8>
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_VoidGetPinValue+0xd4>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
	
		default:
				//Do nothing
			break;
	}
	return Local_u8PinValue;
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_U8PortName , u8  Copy_U8PortState)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <DIO_VoidSetPortDirection+0x6>
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <DIO_VoidSetPortDirection+0x8>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3c 83       	std	Y+4, r19	; 0x04
    1cd2:	2b 83       	std	Y+3, r18	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	21 f1       	breq	.+72     	; 0x1d26 <DIO_VoidSetPortDirection+0x6c>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <DIO_VoidSetPortDirection+0x38>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <DIO_VoidSetPortDirection+0x4e>
    1cf0:	46 c0       	rjmp	.+140    	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	21 f1       	breq	.+72     	; 0x1d44 <DIO_VoidSetPortDirection+0x8a>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	71 f1       	breq	.+92     	; 0x1d62 <DIO_VoidSetPortDirection+0xa8>
    1d06:	3b c0       	rjmp	.+118    	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
	{
		case DIO_PORTA :
			if(Copy_U8PortState==OUTPUT)
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	29 f4       	brne	.+10     	; 0x1d18 <DIO_VoidSetPortDirection+0x5e>
			{
				SET_REG(DDRA);
    1d0e:	ea e3       	ldi	r30, 0x3A	; 58
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	80 83       	st	Z, r24
    1d16:	33 c0       	rjmp	.+102    	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	88 23       	and	r24, r24
    1d1c:	81 f5       	brne	.+96     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRA);
    1d1e:	ea e3       	ldi	r30, 0x3A	; 58
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	10 82       	st	Z, r1
    1d24:	2c c0       	rjmp	.+88     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTB :
			if(Copy_U8PortState==OUTPUT)
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	29 f4       	brne	.+10     	; 0x1d36 <DIO_VoidSetPortDirection+0x7c>
			{
				SET_REG(DDRB);
    1d2c:	e7 e3       	ldi	r30, 0x37	; 55
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	8f ef       	ldi	r24, 0xFF	; 255
    1d32:	80 83       	st	Z, r24
    1d34:	24 c0       	rjmp	.+72     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	88 23       	and	r24, r24
    1d3a:	09 f5       	brne	.+66     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRB);
    1d3c:	e7 e3       	ldi	r30, 0x37	; 55
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	10 82       	st	Z, r1
    1d42:	1d c0       	rjmp	.+58     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTC :
			if(Copy_U8PortState==OUTPUT)
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	29 f4       	brne	.+10     	; 0x1d54 <DIO_VoidSetPortDirection+0x9a>
			{
				SET_REG(DDRC);
    1d4a:	e4 e3       	ldi	r30, 0x34	; 52
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	80 83       	st	Z, r24
    1d52:	15 c0       	rjmp	.+42     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	88 23       	and	r24, r24
    1d58:	91 f4       	brne	.+36     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRC);
    1d5a:	e4 e3       	ldi	r30, 0x34	; 52
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	10 82       	st	Z, r1
    1d60:	0e c0       	rjmp	.+28     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTD :
			if(Copy_U8PortState==OUTPUT)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <DIO_VoidSetPortDirection+0xb8>
			{
				SET_REG(DDRD);
    1d68:	e1 e3       	ldi	r30, 0x31	; 49
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	8f ef       	ldi	r24, 0xFF	; 255
    1d6e:	80 83       	st	Z, r24
    1d70:	06 c0       	rjmp	.+12     	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	88 23       	and	r24, r24
    1d76:	19 f4       	brne	.+6      	; 0x1d7e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRD);
    1d78:	e1 e3       	ldi	r30, 0x31	; 49
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	10 82       	st	Z, r1
		default:
			//do no thing
			break;

	}
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <DIO_VOidTogglePortValue>:
void DIO_VOidTogglePortValue(u8 Copy_U8PortName)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <DIO_VOidTogglePortValue+0x6>
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3b 83       	std	Y+3, r19	; 0x03
    1da2:	2a 83       	std	Y+2, r18	; 0x02
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	e9 f0       	breq	.+58     	; 0x1de8 <DIO_VOidTogglePortValue+0x5c>
    1dae:	2a 81       	ldd	r18, Y+2	; 0x02
    1db0:	3b 81       	ldd	r19, Y+3	; 0x03
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <DIO_VOidTogglePortValue+0x36>
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	61 f0       	breq	.+24     	; 0x1dd8 <DIO_VOidTogglePortValue+0x4c>
    1dc0:	2a c0       	rjmp	.+84     	; 0x1e16 <DIO_VOidTogglePortValue+0x8a>
    1dc2:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc4:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	b1 f0       	breq	.+44     	; 0x1df8 <DIO_VOidTogglePortValue+0x6c>
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	c9 f0       	breq	.+50     	; 0x1e08 <DIO_VOidTogglePortValue+0x7c>
    1dd6:	1f c0       	rjmp	.+62     	; 0x1e16 <DIO_VOidTogglePortValue+0x8a>
	{
		case DIO_PORTA :
			TOGGLE_REG(PORTA);
    1dd8:	ab e3       	ldi	r26, 0x3B	; 59
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	eb e3       	ldi	r30, 0x3B	; 59
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 95       	com	r24
    1de4:	8c 93       	st	X, r24
    1de6:	17 c0       	rjmp	.+46     	; 0x1e16 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTB :
			TOGGLE_REG(PORTB);
    1de8:	a8 e3       	ldi	r26, 0x38	; 56
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e8 e3       	ldi	r30, 0x38	; 56
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	80 95       	com	r24
    1df4:	8c 93       	st	X, r24
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTC :
			TOGGLE_REG(PORTC);
    1df8:	a5 e3       	ldi	r26, 0x35	; 53
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e3       	ldi	r30, 0x35	; 53
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 95       	com	r24
    1e04:	8c 93       	st	X, r24
    1e06:	07 c0       	rjmp	.+14     	; 0x1e16 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTD :
			TOGGLE_REG(PORTD);
    1e08:	a2 e3       	ldi	r26, 0x32	; 50
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e2 e3       	ldi	r30, 0x32	; 50
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	80 95       	com	r24
    1e14:	8c 93       	st	X, r24
			//do no thing
			break;

	}

}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <DIO_VoidSetSpacificvalue>:
void DIO_VoidSetSpacificvalue(u8 Copy_U8PortName , u8 Copy_U8Value)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <DIO_VoidSetSpacificvalue+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <DIO_VoidSetSpacificvalue+0x8>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	3c 83       	std	Y+4, r19	; 0x04
    1e3a:	2b 83       	std	Y+3, r18	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	d1 f0       	breq	.+52     	; 0x1e7a <DIO_VoidSetSpacificvalue+0x58>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <DIO_VoidSetSpacificvalue+0x38>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <DIO_VoidSetSpacificvalue+0x4e>
    1e58:	1e c0       	rjmp	.+60     	; 0x1e96 <DIO_VoidSetSpacificvalue+0x74>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <DIO_VoidSetSpacificvalue+0x62>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	81 f0       	breq	.+32     	; 0x1e8e <DIO_VoidSetSpacificvalue+0x6c>
    1e6e:	13 c0       	rjmp	.+38     	; 0x1e96 <DIO_VoidSetSpacificvalue+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(PORTA,Copy_U8Value);
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(PORTB,Copy_U8Value);
    1e7a:	e8 e3       	ldi	r30, 0x38	; 56
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(PORTC,Copy_U8Value);
    1e84:	e5 e3       	ldi	r30, 0x35	; 53
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(PORTD,Copy_U8Value);
    1e8e:	e2 e3       	ldi	r30, 0x32	; 50
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <DIO_U8GetPortValue>:
u8 DIO_U8GetPortValue(u8 Copy_U8PortName )
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <DIO_U8GetPortValue+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <DIO_U8GetPortValue+0x8>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	3c 83       	std	Y+4, r19	; 0x04
    1ebc:	2b 83       	std	Y+3, r18	; 0x03
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	d1 f0       	breq	.+52     	; 0x1efc <DIO_U8GetPortValue+0x58>
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	22 30       	cpi	r18, 0x02	; 2
    1ece:	31 05       	cpc	r19, r1
    1ed0:	2c f4       	brge	.+10     	; 0x1edc <DIO_U8GetPortValue+0x38>
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	61 f0       	breq	.+24     	; 0x1ef2 <DIO_U8GetPortValue+0x4e>
    1eda:	1f c0       	rjmp	.+62     	; 0x1f1a <DIO_U8GetPortValue+0x76>
    1edc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ede:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee0:	22 30       	cpi	r18, 0x02	; 2
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	81 f0       	breq	.+32     	; 0x1f06 <DIO_U8GetPortValue+0x62>
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	83 30       	cpi	r24, 0x03	; 3
    1eec:	91 05       	cpc	r25, r1
    1eee:	81 f0       	breq	.+32     	; 0x1f10 <DIO_U8GetPortValue+0x6c>
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <DIO_U8GetPortValue+0x76>
	{
		case DIO_PORTA :
			return PINA;
    1ef2:	e9 e3       	ldi	r30, 0x39	; 57
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	90 81       	ld	r25, Z
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	10 c0       	rjmp	.+32     	; 0x1f1c <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTB :
			return PINB ;
    1efc:	e6 e3       	ldi	r30, 0x36	; 54
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	20 81       	ld	r18, Z
    1f02:	2a 83       	std	Y+2, r18	; 0x02
    1f04:	0b c0       	rjmp	.+22     	; 0x1f1c <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTC :
			return PINC;
    1f06:	e3 e3       	ldi	r30, 0x33	; 51
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	30 81       	ld	r19, Z
    1f0c:	3a 83       	std	Y+2, r19	; 0x02
    1f0e:	06 c0       	rjmp	.+12     	; 0x1f1c <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTD :
			return PIND;
    1f10:	e0 e3       	ldi	r30, 0x30	; 48
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8a 83       	std	Y+2, r24	; 0x02
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <DIO_U8GetPortValue+0x78>
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_U8GetPortValue+0x7c>
			//do no thing
			break;

	}

}
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	9d 83       	std	Y+5, r25	; 0x05
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <DIO_VoidSetPortSpecificDirection>:
void DIO_VoidSetPortSpecificDirection(u8 Copy_U8PortName, u8 Copy_U8SpectificDirection)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <DIO_VoidSetPortSpecificDirection+0x6>
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <DIO_VoidSetPortSpecificDirection+0x8>
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	3c 83       	std	Y+4, r19	; 0x04
    1f4a:	2b 83       	std	Y+3, r18	; 0x03
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	91 05       	cpc	r25, r1
    1f54:	d1 f0       	breq	.+52     	; 0x1f8a <DIO_VoidSetPortSpecificDirection+0x58>
    1f56:	2b 81       	ldd	r18, Y+3	; 0x03
    1f58:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5a:	22 30       	cpi	r18, 0x02	; 2
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <DIO_VoidSetPortSpecificDirection+0x38>
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	61 f0       	breq	.+24     	; 0x1f80 <DIO_VoidSetPortSpecificDirection+0x4e>
    1f68:	1e c0       	rjmp	.+60     	; 0x1fa6 <DIO_VoidSetPortSpecificDirection+0x74>
    1f6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6e:	22 30       	cpi	r18, 0x02	; 2
    1f70:	31 05       	cpc	r19, r1
    1f72:	81 f0       	breq	.+32     	; 0x1f94 <DIO_VoidSetPortSpecificDirection+0x62>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	83 30       	cpi	r24, 0x03	; 3
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	81 f0       	breq	.+32     	; 0x1f9e <DIO_VoidSetPortSpecificDirection+0x6c>
    1f7e:	13 c0       	rjmp	.+38     	; 0x1fa6 <DIO_VoidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(DDRA,Copy_U8SpectificDirection);
    1f80:	ea e3       	ldi	r30, 0x3A	; 58
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	80 83       	st	Z, r24
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(DDRB,Copy_U8SpectificDirection);
    1f8a:	e7 e3       	ldi	r30, 0x37	; 55
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	80 83       	st	Z, r24
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(DDRC,Copy_U8SpectificDirection);
    1f94:	e4 e3       	ldi	r30, 0x34	; 52
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	80 83       	st	Z, r24
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(DDRD,Copy_U8SpectificDirection);
    1f9e:	e1 e3       	ldi	r30, 0x31	; 49
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <DIO_VoidTogglePinValu>:
void DIO_VoidTogglePinValu(u8 Copy_U8PortName ,u8 Copy_u8PinNumber ) 
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <DIO_VoidTogglePinValu+0x6>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <DIO_VoidTogglePinValu+0x8>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8PortName)
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	3c 83       	std	Y+4, r19	; 0x04
    1fcc:	2b 83       	std	Y+3, r18	; 0x03
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	49 f1       	breq	.+82     	; 0x202a <DIO_VoidTogglePinValu+0x76>
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <DIO_VoidTogglePinValu+0x38>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	61 f0       	breq	.+24     	; 0x2002 <DIO_VoidTogglePinValu+0x4e>
    1fea:	5a c0       	rjmp	.+180    	; 0x20a0 <DIO_VoidTogglePinValu+0xec>
    1fec:	2b 81       	ldd	r18, Y+3	; 0x03
    1fee:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff0:	22 30       	cpi	r18, 0x02	; 2
    1ff2:	31 05       	cpc	r19, r1
    1ff4:	71 f1       	breq	.+92     	; 0x2052 <DIO_VoidTogglePinValu+0x9e>
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	83 30       	cpi	r24, 0x03	; 3
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	e9 f1       	breq	.+122    	; 0x207a <DIO_VoidTogglePinValu+0xc6>
    2000:	4f c0       	rjmp	.+158    	; 0x20a0 <DIO_VoidTogglePinValu+0xec>
	{
	case DIO_PORTA:
			TOGGLE_BIT(PORTA ,Copy_u8PinNumber);
    2002:	ab e3       	ldi	r26, 0x3B	; 59
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	eb e3       	ldi	r30, 0x3B	; 59
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <DIO_VoidTogglePinValu+0x6c>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <DIO_VoidTogglePinValu+0x68>
    2024:	84 27       	eor	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	3b c0       	rjmp	.+118    	; 0x20a0 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB ,Copy_u8PinNumber);
    202a:	a8 e3       	ldi	r26, 0x38	; 56
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e8 e3       	ldi	r30, 0x38	; 56
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	48 2f       	mov	r20, r24
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 2e       	mov	r0, r18
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <DIO_VoidTogglePinValu+0x94>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <DIO_VoidTogglePinValu+0x90>
    204c:	84 27       	eor	r24, r20
    204e:	8c 93       	st	X, r24
    2050:	27 c0       	rjmp	.+78     	; 0x20a0 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC ,Copy_u8PinNumber);
    2052:	a5 e3       	ldi	r26, 0x35	; 53
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e5 e3       	ldi	r30, 0x35	; 53
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	48 2f       	mov	r20, r24
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 2e       	mov	r0, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <DIO_VoidTogglePinValu+0xbc>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <DIO_VoidTogglePinValu+0xb8>
    2074:	84 27       	eor	r24, r20
    2076:	8c 93       	st	X, r24
    2078:	13 c0       	rjmp	.+38     	; 0x20a0 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD ,Copy_u8PinNumber);
    207a:	a2 e3       	ldi	r26, 0x32	; 50
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e2 e3       	ldi	r30, 0x32	; 50
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	48 2f       	mov	r20, r24
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 2e       	mov	r0, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <DIO_VoidTogglePinValu+0xe4>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	0a 94       	dec	r0
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <DIO_VoidTogglePinValu+0xe0>
    209c:	84 27       	eor	r24, r20
    209e:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <ADC_VoidInit>:

static void (*ADC_pvoidNotificationFunction)(void) = NULL;
volatile   u16  ADC_Digital_Value ;

void ADC_VoidInit(void)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    // ADC ENABLE BIT 
    #if ADC_ENABLE == ENABLE
        SET_BIT(ADCSRA,ADEN);
    20b6:	a6 e2       	ldi	r26, 0x26	; 38
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e6 e2       	ldi	r30, 0x26	; 38
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	80 68       	ori	r24, 0x80	; 128
    20c2:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ENABLE Configuration Error"
    #endif
    //ADC ENABLE FLAG 
    #if ADC_INTERRUPT_STATUS  ==  ENABLE
        SET_BIT(ADCSRA,ADIE);
    20c4:	a6 e2       	ldi	r26, 0x26	; 38
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e6 e2       	ldi	r30, 0x26	; 38
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	88 60       	ori	r24, 0x08	; 8
    20d0:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_INTERRUPT_ENABLE Configuration Error"
    #endif
    //
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        SET_BIT(ADMUX,ADLAR);
    20d2:	a7 e2       	ldi	r26, 0x27	; 39
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e7 e2       	ldi	r30, 0x27	; 39
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	80 62       	ori	r24, 0x20	; 32
    20de:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ADJUST Configuration Error"
    #endif


    ADMUX &= REFERENCE_SELECTION_MASK ;
    20e0:	a7 e2       	ldi	r26, 0x27	; 39
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e7 e2       	ldi	r30, 0x27	; 39
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	8f 73       	andi	r24, 0x3F	; 63
    20ec:	8c 93       	st	X, r24
    ADMUX |= Reference_Selection ;
    20ee:	a7 e2       	ldi	r26, 0x27	; 39
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e7 e2       	ldi	r30, 0x27	; 39
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8c 93       	st	X, r24

    ADCSRA &= PRESCALER_SELECTION_MASK ;
    20fa:	a6 e2       	ldi	r26, 0x26	; 38
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e2       	ldi	r30, 0x26	; 38
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 7f       	andi	r24, 0xF8	; 248
    2106:	8c 93       	st	X, r24
    ADCSRA |=  PRESCALER_SELECTION ;
    2108:	a6 e2       	ldi	r26, 0x26	; 38
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e6 e2       	ldi	r30, 0x26	; 38
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	82 60       	ori	r24, 0x02	; 2
    2114:	8c 93       	st	X, r24

}
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <ADC_VoidInterruptControl>:
 void ADC_VoidInterruptControl(u8 Copy_InterruptStatus)
 {
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <ADC_VoidInterruptControl+0x6>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_InterruptStatus)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	3b 83       	std	Y+3, r19	; 0x03
    2132:	2a 83       	std	Y+2, r18	; 0x02
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	31 f0       	breq	.+12     	; 0x2148 <ADC_VoidInterruptControl+0x2c>
    213c:	2a 81       	ldd	r18, Y+2	; 0x02
    213e:	3b 81       	ldd	r19, Y+3	; 0x03
    2140:	21 30       	cpi	r18, 0x01	; 1
    2142:	31 05       	cpc	r19, r1
    2144:	49 f0       	breq	.+18     	; 0x2158 <ADC_VoidInterruptControl+0x3c>
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <ADC_VoidInterruptControl+0x4a>
    {
    case DISABLE :
            CLEAR_BIT(ADCSRA,ADIE);
    2148:	a6 e2       	ldi	r26, 0x26	; 38
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	87 7f       	andi	r24, 0xF7	; 247
    2154:	8c 93       	st	X, r24
    2156:	07 c0       	rjmp	.+14     	; 0x2166 <ADC_VoidInterruptControl+0x4a>
        break;
    case ENABLE :
        CLEAR_BIT(ADCSRA,ADIE);
    2158:	a6 e2       	ldi	r26, 0x26	; 38
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e6 e2       	ldi	r30, 0x26	; 38
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	87 7f       	andi	r24, 0xF7	; 247
    2164:	8c 93       	st	X, r24
        break ;
    default:
        break;
    }
 }
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <ADC_U8StartConversionSynchronous>:

 u8 ADC_U8StartConversionSynchronous(u8 Copy_U8ChannelNumber)
 {
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <ADC_U8StartConversionSynchronous+0x6>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    // VARIABLE TO STORE THE DIGITAL DATA FROM ADC
    u8 Local_U8DigitalValue ;
    //SELECT THE CHANNEL FOR DOING CONVERSION 
    ADMUX &= CHANEL_SELECTION_MASK ;
    217e:	a7 e2       	ldi	r26, 0x27	; 39
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e7 e2       	ldi	r30, 0x27	; 39
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 7e       	andi	r24, 0xE0	; 224
    218a:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    218c:	a7 e2       	ldi	r26, 0x27	; 39
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e7 e2       	ldi	r30, 0x27	; 39
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	90 81       	ld	r25, Z
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	89 2b       	or	r24, r25
    219a:	8c 93       	st	X, r24
    //START THE CONVERSION
    SET_BIT(ADCSRA , ADSC);
    219c:	a6 e2       	ldi	r26, 0x26	; 38
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e6 e2       	ldi	r30, 0x26	; 38
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	80 64       	ori	r24, 0x40	; 64
    21a8:	8c 93       	st	X, r24
    //POLLING UNTILL CONVERSION END , PROCESSOR STOP UNTILL CONVERSION END 
    while(GET_BIT(ADCSRA,ADIF) == FALSE);
    21aa:	e6 e2       	ldi	r30, 0x26	; 38
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	82 95       	swap	r24
    21b2:	8f 70       	andi	r24, 0x0F	; 15
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	81 70       	andi	r24, 0x01	; 1
    21ba:	90 70       	andi	r25, 0x00	; 0
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	a9 f3       	breq	.-22     	; 0x21aa <ADC_U8StartConversionSynchronous+0x38>
    //RESET THE ADC FLAG AFTER CONVERSION DONE
    SET_BIT(ADCSRA,ADIF);
    21c0:	a6 e2       	ldi	r26, 0x26	; 38
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e6 e2       	ldi	r30, 0x26	; 38
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 61       	ori	r24, 0x10	; 16
    21cc:	8c 93       	st	X, r24
    //TO READ VALUE FORM HIG REGISTER OR LOW
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        Local_U8DigitalValue = ADCH ;
    21ce:	e5 e2       	ldi	r30, 0x25	; 37
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	89 83       	std	Y+1, r24	; 0x01
    #elif ADC_AJUST_RESULT  ==    RIGHT_ADJUST  
        Local_U8DigitalValue = ADCL;
    #endif
    //RETURN THE DIGITAL VALUE FROM ADC 
    return Local_U8DigitalValue ;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01

 }
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <ADC_U8StartConversionAsynchronous>:
 void ADC_U8StartConversionAsynchronous(u8 Copy_U8ChannelNumber  ,  void (* Notification ) (void))
 {
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <ADC_U8StartConversionAsynchronous+0x6>
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	7b 83       	std	Y+3, r23	; 0x03
    21f2:	6a 83       	std	Y+2, r22	; 0x02
    //set channel 
    ADMUX &= CHANEL_SELECTION_MASK ;
    21f4:	a7 e2       	ldi	r26, 0x27	; 39
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e7 e2       	ldi	r30, 0x27	; 39
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	80 7e       	andi	r24, 0xE0	; 224
    2200:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    2202:	a7 e2       	ldi	r26, 0x27	; 39
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e7 e2       	ldi	r30, 0x27	; 39
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	90 81       	ld	r25, Z
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	89 2b       	or	r24, r25
    2210:	8c 93       	st	X, r24

    ADC_pvoidNotificationFunction = Notification;
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	9b 81       	ldd	r25, Y+3	; 0x03
    2216:	90 93 8d 00 	sts	0x008D, r25
    221a:	80 93 8c 00 	sts	0x008C, r24

    SET_BIT(ADCSRA , ADSC);
    221e:	a6 e2       	ldi	r26, 0x26	; 38
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e6 e2       	ldi	r30, 0x26	; 38
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	80 64       	ori	r24, 0x40	; 64
    222a:	8c 93       	st	X, r24

 }
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <__vector_16>:
 void __vector_16 (void)  __attribute__ ((signal));
 void __vector_16 (void)
{
    2238:	1f 92       	push	r1
    223a:	0f 92       	push	r0
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	0f 92       	push	r0
    2240:	11 24       	eor	r1, r1
    2242:	2f 93       	push	r18
    2244:	3f 93       	push	r19
    2246:	4f 93       	push	r20
    2248:	5f 93       	push	r21
    224a:	6f 93       	push	r22
    224c:	7f 93       	push	r23
    224e:	8f 93       	push	r24
    2250:	9f 93       	push	r25
    2252:	af 93       	push	r26
    2254:	bf 93       	push	r27
    2256:	ef 93       	push	r30
    2258:	ff 93       	push	r31
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
     ADC_VoidInterruptControl(DISABLE);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	0e 94 8e 10 	call	0x211c	; 0x211c <ADC_VoidInterruptControl>
    ADC_Digital_Value = ADCH;
    2268:	e5 e2       	ldi	r30, 0x25	; 37
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	90 93 8f 00 	sts	0x008F, r25
    2276:	80 93 8e 00 	sts	0x008E, r24
    if(ADC_pvoidNotificationFunction != NULL)
    227a:	80 91 8c 00 	lds	r24, 0x008C
    227e:	90 91 8d 00 	lds	r25, 0x008D
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	29 f0       	breq	.+10     	; 0x2290 <__vector_16+0x58>
    {
        ADC_pvoidNotificationFunction();
    2286:	e0 91 8c 00 	lds	r30, 0x008C
    228a:	f0 91 8d 00 	lds	r31, 0x008D
    228e:	09 95       	icall
    }
    else
    {
        /* Do Nothing*/
    }
    ADC_VoidInterruptControl(ENABLE);
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0e 94 8e 10 	call	0x211c	; 0x211c <ADC_VoidInterruptControl>
                    
                    #endif

    #endif
    */
}
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	ff 91       	pop	r31
    229c:	ef 91       	pop	r30
    229e:	bf 91       	pop	r27
    22a0:	af 91       	pop	r26
    22a2:	9f 91       	pop	r25
    22a4:	8f 91       	pop	r24
    22a6:	7f 91       	pop	r23
    22a8:	6f 91       	pop	r22
    22aa:	5f 91       	pop	r21
    22ac:	4f 91       	pop	r20
    22ae:	3f 91       	pop	r19
    22b0:	2f 91       	pop	r18
    22b2:	0f 90       	pop	r0
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	0f 90       	pop	r0
    22b8:	1f 90       	pop	r1
    22ba:	18 95       	reti

000022bc <LED_VoidInit>:
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

void LED_VoidInit(led_t * ledobj)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <LED_VoidInit+0x6>
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidSetPinDirection(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,OUTPUT);
    22ca:	e9 81       	ldd	r30, Y+1	; 0x01
    22cc:	fa 81       	ldd	r31, Y+2	; 0x02
    22ce:	80 81       	ld	r24, Z
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	fa 81       	ldd	r31, Y+2	; 0x02
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	69 2f       	mov	r22, r25
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LED_VoidTurnOn>:
void LED_VoidTurnOn(led_t * ledobj)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <LED_VoidTurnOn+0x6>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,HIGH);
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	80 81       	ld	r24, Z
    22fc:	e9 81       	ldd	r30, Y+1	; 0x01
    22fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	69 2f       	mov	r22, r25
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <LED_VoidTurnOff>:
void LED_VoidTurnOff(led_t * ledobj)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <LED_VoidTurnOff+0x6>
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,LOW);
    2322:	e9 81       	ldd	r30, Y+1	; 0x01
    2324:	fa 81       	ldd	r31, Y+2	; 0x02
    2326:	80 81       	ld	r24, Z
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	69 2f       	mov	r22, r25
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LED_VoidToggleLed>:
void LED_VoidToggleLed(led_t * ledobj)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <LED_VoidToggleLed+0x6>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidTogglePinValu(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin);
    234e:	e9 81       	ldd	r30, Y+1	; 0x01
    2350:	fa 81       	ldd	r31, Y+2	; 0x02
    2352:	80 81       	ld	r24, Z
    2354:	e9 81       	ldd	r30, Y+1	; 0x01
    2356:	fa 81       	ldd	r31, Y+2	; 0x02
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	69 2f       	mov	r22, r25
    235c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <DIO_VoidTogglePinValu>
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidInit(void)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	2e 97       	sbiw	r28, 0x0e	; 14
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61

#if(LCD_MODE == EIGHT_BIT_MODE)
    //Initialize Data Port
    DIO_VoidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	61 e0       	ldi	r22, 0x01	; 1
    2382:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <DIO_VoidSetPortDirection>
    //Initialize Control Pins
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, OUTPUT);
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, OUTPUT);
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, OUTPUT);
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a8 e4       	ldi	r26, 0x48	; 72
    23aa:	b2 e4       	ldi	r27, 0x42	; 66
    23ac:	8b 87       	std	Y+11, r24	; 0x0b
    23ae:	9c 87       	std	Y+12, r25	; 0x0c
    23b0:	ad 87       	std	Y+13, r26	; 0x0d
    23b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a ef       	ldi	r20, 0xFA	; 250
    23c2:	54 e4       	ldi	r21, 0x44	; 68
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8f 83       	std	Y+7, r24	; 0x07
    23ce:	98 87       	std	Y+8, r25	; 0x08
    23d0:	a9 87       	std	Y+9, r26	; 0x09
    23d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <LCD_voidInit+0x8c>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    23f6:	6f 81       	ldd	r22, Y+7	; 0x07
    23f8:	78 85       	ldd	r23, Y+8	; 0x08
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <LCD_voidInit+0xec>
    2438:	88 ec       	ldi	r24, 0xC8	; 200
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_voidInit+0xda>
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <LCD_voidInit+0xce>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_voidInit+0x116>
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01

    //wait for more than 30ms
    _delay_ms(50);

    //Send Function Set Command
    LCD_voidSendCommand(FUNCTION_SET_CMD);
    2488:	8c e3       	ldi	r24, 0x3C	; 60
    248a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_voidSendCommand>
    //wait for 1ms
    //Send Display ON/ OFF Control Command
    LCD_voidSendCommand(FUNCTION_ON_OFF_CMD);
    248e:	8c e0       	ldi	r24, 0x0C	; 12
    2490:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_voidSendCommand>

    //Send Clear Command
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_voidSendCommand>




#endif
}
    249a:	2e 96       	adiw	r28, 0x0e	; 14
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	08 95       	ret

000024ac <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    24ac:	df 93       	push	r29
    24ae:	cf 93       	push	r28
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	2f 97       	sbiw	r28, 0x0f	; 15
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	8f 87       	std	Y+15, r24	; 0x0f
    //SET RS Pin To Send Command (RS -> 0: Command, 1: Data)
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, RS, HIGH);
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    //Clear RW Pin To Write The Command (RW -> 0: Write, 1: Read)
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, RW, LOW);
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>

    //Set The Command On The Data/Command Port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT, Copy_u8Data);
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    24da:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_VoidSetSpacificvalue>

    //Send Enable Pulse
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	62 e0       	ldi	r22, 0x02	; 2
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    //HIGH
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	62 e0       	ldi	r22, 0x02	; 2
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 e0       	ldi	r26, 0x00	; 0
    24f8:	b0 e4       	ldi	r27, 0x40	; 64
    24fa:	8b 87       	std	Y+11, r24	; 0x0b
    24fc:	9c 87       	std	Y+12, r25	; 0x0c
    24fe:	ad 87       	std	Y+13, r26	; 0x0d
    2500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a ef       	ldi	r20, 0xFA	; 250
    2510:	54 e4       	ldi	r21, 0x44	; 68
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8f 83       	std	Y+7, r24	; 0x07
    251c:	98 87       	std	Y+8, r25	; 0x08
    251e:	a9 87       	std	Y+9, r26	; 0x09
    2520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <LCD_voidSendData+0x98>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	3f c0       	rjmp	.+126    	; 0x25c2 <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    2544:	6f 81       	ldd	r22, Y+7	; 0x07
    2546:	78 85       	ldd	r23, Y+8	; 0x08
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	4c f5       	brge	.+82     	; 0x25ae <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <LCD_voidSendData+0xf8>
    2586:	88 ec       	ldi	r24, 0xC8	; 200
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c 83       	std	Y+4, r25	; 0x04
    258c:	8b 83       	std	Y+3, r24	; 0x03
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_voidSendData+0xe6>
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <LCD_voidSendData+0xda>
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_voidSendData+0x122>
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	62 e0       	ldi	r22, 0x02	; 2
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>

}
    25e0:	2f 96       	adiw	r28, 0x0f	; 15
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <LCD_voidSendCommand>:


static void LCD_voidSendCommand(u8 Copy_u8Command)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	2f 97       	sbiw	r28, 0x0f	; 15
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	8f 87       	std	Y+15, r24	; 0x0f
    //Clear RS Pin To Send Command (RS -> 0: Command, 1: Data)
	DIO_VoidSetPinValue(LCD_CONTROL_PORT, RS, LOW);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    //Clear RW Pin To Write The Command (RW -> 0: Write, 1: Read)
	DIO_VoidSetPinValue(LCD_CONTROL_PORT, RW, LOW);
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	61 e0       	ldi	r22, 0x01	; 1
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>

    //Set The Command On The Data/Command Port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT, Copy_u8Command);
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2620:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_VoidSetSpacificvalue>

    //Send Enable Pulse
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	62 e0       	ldi	r22, 0x02	; 2
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    //HIGH
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	62 e0       	ldi	r22, 0x02	; 2
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e4       	ldi	r27, 0x40	; 64
    2640:	8b 87       	std	Y+11, r24	; 0x0b
    2642:	9c 87       	std	Y+12, r25	; 0x0c
    2644:	ad 87       	std	Y+13, r26	; 0x0d
    2646:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	6b 85       	ldd	r22, Y+11	; 0x0b
    264a:	7c 85       	ldd	r23, Y+12	; 0x0c
    264c:	8d 85       	ldd	r24, Y+13	; 0x0d
    264e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8f 83       	std	Y+7, r24	; 0x07
    2662:	98 87       	std	Y+8, r25	; 0x08
    2664:	a9 87       	std	Y+9, r26	; 0x09
    2666:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <LCD_voidSendCommand+0x98>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    268a:	6f 81       	ldd	r22, Y+7	; 0x07
    268c:	78 85       	ldd	r23, Y+8	; 0x08
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	9a 85       	ldd	r25, Y+10	; 0x0a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <LCD_voidSendCommand+0xf8>
    26cc:	88 ec       	ldi	r24, 0xC8	; 200
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <LCD_voidSendCommand+0xe6>
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <LCD_voidSendCommand+0xda>
    26f2:	14 c0       	rjmp	.+40     	; 0x271c <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	9a 83       	std	Y+2, r25	; 0x02
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <LCD_voidSendCommand+0x122>
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
    //wait for 2ms
    _delay_ms(2);
    //LOW
    DIO_VoidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	62 e0       	ldi	r22, 0x02	; 2
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
}
    2726:	2f 96       	adiw	r28, 0x0f	; 15
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <LCD_voidClearDisplay>:


void LCD_voidClearDisplay(void)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_voidSendCommand>
}
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <LCD_voidGoToXY+0x6>
    2752:	0f 92       	push	r0
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	8a 83       	std	Y+2, r24	; 0x02
    275a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CharAddress = 0;
    275c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos == 0)
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	88 23       	and	r24, r24
    2762:	31 f4       	brne	.+12     	; 0x2770 <LCD_voidGoToXY+0x24>
	{
		if(Copy_u8YPos < 16)
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	80 31       	cpi	r24, 0x10	; 16
    2768:	60 f4       	brcc	.+24     	; 0x2782 <LCD_voidGoToXY+0x36>
		{
			//Address = Y-Position
			Local_u8CharAddress = Copy_u8YPos;
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	09 c0       	rjmp	.+18     	; 0x2782 <LCD_voidGoToXY+0x36>
		}else{}
	}
	else if(Copy_u8XPos == 1)
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	31 f4       	brne	.+12     	; 0x2782 <LCD_voidGoToXY+0x36>
	{
		if(Copy_u8YPos < 16)
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	80 31       	cpi	r24, 0x10	; 16
    277a:	18 f4       	brcc	.+6      	; 0x2782 <LCD_voidGoToXY+0x36>
		{
			Local_u8CharAddress = Copy_u8YPos + ROW1_OFFSET;
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	80 5c       	subi	r24, 0xC0	; 192
    2780:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Raise Error
	}

	Local_u8CharAddress += ROW1_CMD;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	80 58       	subi	r24, 0x80	; 128
    2786:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8CharAddress);
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_voidSendCommand>

}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <LCD_voidSendString+0x6>
    27a0:	0f 92       	push	r0
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	9b 83       	std	Y+3, r25	; 0x03
    27a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    27aa:	19 82       	std	Y+1, r1	; 0x01
    27ac:	0e c0       	rjmp	.+28     	; 0x27ca <LCD_voidSendString+0x30>

	while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
	{
		LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	9b 81       	ldd	r25, Y+3	; 0x03
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 0f       	add	r30, r18
    27bc:	f3 1f       	adc	r31, r19
    27be:	80 81       	ld	r24, Z
    27c0:	0e 94 56 12 	call	0x24ac	; 0x24ac <LCD_voidSendData>
		Local_u8LoopCounter++;
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	8f 5f       	subi	r24, 0xFF	; 255
    27c8:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
	u8 Local_u8LoopCounter = 0;

	while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	9b 81       	ldd	r25, Y+3	; 0x03
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	80 81       	ld	r24, Z
    27dc:	88 23       	and	r24, r24
    27de:	39 f7       	brne	.-50     	; 0x27ae <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <LCD_voidSendNumber>:


void LCD_voidSendNumber(s32 Copy_s8Number)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	2e 97       	sbiw	r28, 0x0e	; 14
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	9e 87       	std	Y+14, r25	; 0x0e
    2802:	8d 87       	std	Y+13, r24	; 0x0d
	s8 Local_u8DigitsDataArray[10] = {0};
    2804:	8a e0       	ldi	r24, 0x0A	; 10
    2806:	fe 01       	movw	r30, r28
    2808:	33 96       	adiw	r30, 0x03	; 3
    280a:	df 01       	movw	r26, r30
    280c:	98 2f       	mov	r25, r24
    280e:	1d 92       	st	X+, r1
    2810:	9a 95       	dec	r25
    2812:	e9 f7       	brne	.-6      	; 0x280e <LCD_voidSendNumber+0x22>
	s8 Local_u8LoopCounter = 0;
    2814:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8NumberSign = 0; //0 -> Positive Number, 1 for Negative Number
    2816:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s8Number >= 0)
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	99 23       	and	r25, r25
    281e:	14 f0       	brlt	.+4      	; 0x2824 <LCD_voidSendNumber+0x38>
	{
		Local_u8NumberSign = POSITIVE;
    2820:	19 82       	std	Y+1, r1	; 0x01
    2822:	2e c0       	rjmp	.+92     	; 0x2880 <LCD_voidSendNumber+0x94>
	}
	else
	{	//Convert The Number To Positive, and take the sign
		Local_u8NumberSign = NEGATIVE;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	89 83       	std	Y+1, r24	; 0x01
		Copy_s8Number--;
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	9e 87       	std	Y+14, r25	; 0x0e
    2830:	8d 87       	std	Y+13, r24	; 0x0d
		Copy_s8Number = ~Copy_s8Number;
    2832:	8d 85       	ldd	r24, Y+13	; 0x0d
    2834:	9e 85       	ldd	r25, Y+14	; 0x0e
    2836:	80 95       	com	r24
    2838:	90 95       	com	r25
    283a:	9e 87       	std	Y+14, r25	; 0x0e
    283c:	8d 87       	std	Y+13, r24	; 0x0d
    283e:	20 c0       	rjmp	.+64     	; 0x2880 <LCD_voidSendNumber+0x94>
	}

	while(Copy_s8Number != 0)
	{	//Split the Number to digits, Get there ASCII, and store them in array.
		Local_u8DigitsDataArray[Local_u8LoopCounter] = (Copy_s8Number % 10) + '0';
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	e8 2f       	mov	r30, r24
    2844:	ff 27       	eor	r31, r31
    2846:	e7 fd       	sbrc	r30, 7
    2848:	f0 95       	com	r31
    284a:	8d 85       	ldd	r24, Y+13	; 0x0d
    284c:	9e 85       	ldd	r25, Y+14	; 0x0e
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	b9 01       	movw	r22, r18
    2854:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__divmodhi4>
    2858:	80 5d       	subi	r24, 0xD0	; 208
    285a:	28 2f       	mov	r18, r24
    285c:	ce 01       	movw	r24, r28
    285e:	03 96       	adiw	r24, 0x03	; 3
    2860:	e8 0f       	add	r30, r24
    2862:	f9 1f       	adc	r31, r25
    2864:	20 83       	st	Z, r18
		Copy_s8Number /= 10;
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	2a e0       	ldi	r18, 0x0A	; 10
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	b9 01       	movw	r22, r18
    2870:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__divmodhi4>
    2874:	cb 01       	movw	r24, r22
    2876:	9e 87       	std	Y+14, r25	; 0x0e
    2878:	8d 87       	std	Y+13, r24	; 0x0d
		Local_u8LoopCounter++;
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	8f 5f       	subi	r24, 0xFF	; 255
    287e:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8NumberSign = NEGATIVE;
		Copy_s8Number--;
		Copy_s8Number = ~Copy_s8Number;
	}

	while(Copy_s8Number != 0)
    2880:	8d 85       	ldd	r24, Y+13	; 0x0d
    2882:	9e 85       	ldd	r25, Y+14	; 0x0e
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	e1 f6       	brne	.-72     	; 0x2840 <LCD_voidSendNumber+0x54>
		Local_u8DigitsDataArray[Local_u8LoopCounter] = (Copy_s8Number % 10) + '0';
		Copy_s8Number /= 10;
		Local_u8LoopCounter++;
	}

	Local_u8LoopCounter--;
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	81 50       	subi	r24, 0x01	; 1
    288c:	8a 83       	std	Y+2, r24	; 0x02

	if(Local_u8NumberSign == NEGATIVE)
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	a1 f4       	brne	.+40     	; 0x28bc <LCD_voidSendNumber+0xd0>
	{
		LCD_voidSendData('-');
    2894:	8d e2       	ldi	r24, 0x2D	; 45
    2896:	0e 94 56 12 	call	0x24ac	; 0x24ac <LCD_voidSendData>
    289a:	10 c0       	rjmp	.+32     	; 0x28bc <LCD_voidSendNumber+0xd0>
	}else{}

	while(Local_u8LoopCounter >= 0)
	{
		LCD_voidSendData(Local_u8DigitsDataArray[Local_u8LoopCounter]);
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	28 2f       	mov	r18, r24
    28a0:	33 27       	eor	r19, r19
    28a2:	27 fd       	sbrc	r18, 7
    28a4:	30 95       	com	r19
    28a6:	ce 01       	movw	r24, r28
    28a8:	03 96       	adiw	r24, 0x03	; 3
    28aa:	fc 01       	movw	r30, r24
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	80 81       	ld	r24, Z
    28b2:	0e 94 56 12 	call	0x24ac	; 0x24ac <LCD_voidSendData>
		Local_u8LoopCounter--;
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	81 50       	subi	r24, 0x01	; 1
    28ba:	8a 83       	std	Y+2, r24	; 0x02
	if(Local_u8NumberSign == NEGATIVE)
	{
		LCD_voidSendData('-');
	}else{}

	while(Local_u8LoopCounter >= 0)
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	88 23       	and	r24, r24
    28c0:	6c f7       	brge	.-38     	; 0x289c <LCD_voidSendNumber+0xb0>
	{
		LCD_voidSendData(Local_u8DigitsDataArray[Local_u8LoopCounter]);
		Local_u8LoopCounter--;
	}
}
    28c2:	2e 96       	adiw	r28, 0x0e	; 14
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <LCD_voidSendCustomCharachter>:

void LCD_voidSendCustomCharachter(u8 * Copy_pu8CharArray,
								  u8 Copy_u8PatternNumber,
								  u8 Copy_u8XPos,
								  u8 Copy_u8YPos)
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	27 97       	sbiw	r28, 0x07	; 7
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	6d 83       	std	Y+5, r22	; 0x05
    28ee:	4e 83       	std	Y+6, r20	; 0x06
    28f0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8LoopCounter = 0;
    28f2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8CGRAMAddress = 0;
    28f4:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CGRAMAddress, 6);
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	80 64       	ori	r24, 0x40	; 64
    290e:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_voidSendCommand>

	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8; Local_u8LoopCounter++)
    2916:	1a 82       	std	Y+2, r1	; 0x02
    2918:	0e c0       	rjmp	.+28     	; 0x2936 <LCD_voidSendCustomCharachter+0x62>
	{
		LCD_voidSendData(Copy_pu8CharArray[Local_u8LoopCounter]);
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	fc 01       	movw	r30, r24
    2926:	e2 0f       	add	r30, r18
    2928:	f3 1f       	adc	r31, r19
    292a:	80 81       	ld	r24, Z
    292c:	0e 94 56 12 	call	0x24ac	; 0x24ac <LCD_voidSendData>
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
	SET_BIT(Local_u8CGRAMAddress, 6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8; Local_u8LoopCounter++)
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	8a 83       	std	Y+2, r24	; 0x02
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	88 30       	cpi	r24, 0x08	; 8
    293a:	78 f3       	brcs	.-34     	; 0x291a <LCD_voidSendCustomCharachter+0x46>
	{
		LCD_voidSendData(Copy_pu8CharArray[Local_u8LoopCounter]);
	}

	LCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    293c:	8e 81       	ldd	r24, Y+6	; 0x06
    293e:	6f 81       	ldd	r22, Y+7	; 0x07
    2940:	0e 94 a6 13 	call	0x274c	; 0x274c <LCD_voidGoToXY>

	LCD_voidSendData(Copy_u8PatternNumber);
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	0e 94 56 12 	call	0x24ac	; 0x24ac <LCD_voidSendData>

}
    294a:	27 96       	adiw	r28, 0x07	; 7
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <KPD_VoidIntit>:
#include "KPD_private.h"



void KPD_VoidIntit(void)
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    //set Rows pins to input pulled up
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,INPUT);
    2964:	83 e0       	ldi	r24, 0x03	; 3
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,INPUT);
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,INPUT);
    2978:	83 e0       	ldi	r24, 0x03	; 3
    297a:	62 e0       	ldi	r22, 0x02	; 2
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,INPUT);
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	63 e0       	ldi	r22, 0x03	; 3
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    // PuLLED UP 
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW0_PIN,PULLUP);
    298c:	83 e0       	ldi	r24, 0x03	; 3
    298e:	60 e0       	ldi	r22, 0x00	; 0
    2990:	41 e0       	ldi	r20, 0x01	; 1
    2992:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW1_PIN,PULLUP);
    2996:	83 e0       	ldi	r24, 0x03	; 3
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW2_PIN,PULLUP);
    29a0:	83 e0       	ldi	r24, 0x03	; 3
    29a2:	62 e0       	ldi	r22, 0x02	; 2
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW3_PIN,PULLUP);
    29aa:	83 e0       	ldi	r24, 0x03	; 3
    29ac:	63 e0       	ldi	r22, 0x03	; 3
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    //set cols pins to output high
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,OUTPUT);
    29b4:	83 e0       	ldi	r24, 0x03	; 3
    29b6:	64 e0       	ldi	r22, 0x04	; 4
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,OUTPUT);
    29be:	83 e0       	ldi	r24, 0x03	; 3
    29c0:	65 e0       	ldi	r22, 0x05	; 5
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,OUTPUT);
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	66 e0       	ldi	r22, 0x06	; 6
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,OUTPUT);
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	67 e0       	ldi	r22, 0x07	; 7
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
    //SET COLUMNS HIGH
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,HIGH);
    29dc:	83 e0       	ldi	r24, 0x03	; 3
    29de:	64 e0       	ldi	r22, 0x04	; 4
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,HIGH);
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,HIGH);
    29f0:	83 e0       	ldi	r24, 0x03	; 3
    29f2:	66 e0       	ldi	r22, 0x06	; 6
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,HIGH);
    29fa:	83 e0       	ldi	r24, 0x03	; 3
    29fc:	67 e0       	ldi	r22, 0x07	; 7
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>


}
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <KPD_U8GetPressedKey>:
                                                 

u8 KPD_U8GetPressedKey(void)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <KPD_U8GetPressedKey+0x6>
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <KPD_U8GetPressedKey+0x8>
    2a12:	0f 92       	push	r0
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
   //array of colums pins
   static u8 Local_u8Array_of_columns[KPD_COLUMNS_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
   //array of rows pins
   static  u8 Local_U8Array_Of_Rows[KPD_ROWS_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    2a1c:	1b 82       	std	Y+3, r1	; 0x03
    2a1e:	57 c0       	rjmp	.+174    	; 0x2ace <KPD_U8GetPressedKey+0xc4>
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	fc 01       	movw	r30, r24
    2a28:	e4 59       	subi	r30, 0x94	; 148
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	90 81       	ld	r25, Z
    2a2e:	83 e0       	ldi	r24, 0x03	; 3
    2a30:	69 2f       	mov	r22, r25
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    2a38:	1a 82       	std	Y+2, r1	; 0x02
    2a3a:	37 c0       	rjmp	.+110    	; 0x2aaa <KPD_U8GetPressedKey+0xa0>
        {
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	fc 01       	movw	r30, r24
    2a44:	e8 59       	subi	r30, 0x98	; 152
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	90 81       	ld	r25, Z
    2a4a:	83 e0       	ldi	r24, 0x03	; 3
    2a4c:	69 2f       	mov	r22, r25
    2a4e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <DIO_VoidGetPinValue>
    2a52:	89 83       	std	Y+1, r24	; 0x01
           if(local_u8RowValue== LOW)
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	88 23       	and	r24, r24
    2a58:	29 f5       	brne	.+74     	; 0x2aa4 <KPD_U8GetPressedKey+0x9a>
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	48 2f       	mov	r20, r24
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	ca 01       	movw	r24, r20
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	82 0f       	add	r24, r18
    2a72:	93 1f       	adc	r25, r19
    2a74:	fc 01       	movw	r30, r24
    2a76:	e0 59       	subi	r30, 0x90	; 144
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8c 83       	std	Y+4, r24	; 0x04
    2a7e:	0c c0       	rjmp	.+24     	; 0x2a98 <KPD_U8GetPressedKey+0x8e>
                while(local_u8RowValue==LOW)
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	fc 01       	movw	r30, r24
    2a88:	e8 59       	subi	r30, 0x98	; 152
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	90 81       	ld	r25, Z
    2a8e:	83 e0       	ldi	r24, 0x03	; 3
    2a90:	69 2f       	mov	r22, r25
    2a92:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <DIO_VoidGetPinValue>
    2a96:	89 83       	std	Y+1, r24	; 0x01
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
           if(local_u8RowValue== LOW)
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
                while(local_u8RowValue==LOW)
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	88 23       	and	r24, r24
    2a9c:	89 f3       	breq	.-30     	; 0x2a80 <KPD_U8GetPressedKey+0x76>
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
                }

                return  local_u8Key_pressed ;
    2a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	1b c0       	rjmp	.+54     	; 0x2ada <KPD_U8GetPressedKey+0xd0>
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	84 30       	cpi	r24, 0x04	; 4
    2aae:	30 f2       	brcs	.-116    	; 0x2a3c <KPD_U8GetPressedKey+0x32>

           }

        }
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e4 59       	subi	r30, 0x94	; 148
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	90 81       	ld	r25, Z
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	69 2f       	mov	r22, r25
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	8b 83       	std	Y+3, r24	; 0x03
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	84 30       	cpi	r24, 0x04	; 4
    2ad2:	08 f4       	brcc	.+2      	; 0x2ad6 <KPD_U8GetPressedKey+0xcc>
    2ad4:	a5 cf       	rjmp	.-182    	; 0x2a20 <KPD_U8GetPressedKey+0x16>
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);

    }

    return local_u8Key_pressed ;
    2ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <main>:
#include "../MCAL/DIO/DIO_interface.h"
#define  F_CPU 8000000UL


u32 main (void)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	0f 92       	push	r0
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
	u8  local_receive =0 ;
    2af6:	19 82       	std	Y+1, r1	; 0x01
	DIO_voidSetPinDirection(DIO_PORTA, PIN0 , OUTPUT);
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
	/* tx pin */
	DIO_voidSetPinDirection(DIO_PORTD , PIN1 , OUTPUT);
    2b02:	83 e0       	ldi	r24, 0x03	; 3
    2b04:	61 e0       	ldi	r22, 0x01	; 1
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>
	/* rx pin */
	DIO_voidSetPinDirection(DIO_PORTD , PIN0 , INPUT);
    2b0c:	83 e0       	ldi	r24, 0x03	; 3
    2b0e:	60 e0       	ldi	r22, 0x00	; 0
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <DIO_voidSetPinDirection>

	UART_VoidInit();
    2b16:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UART_VoidInit>


	while(1)
	{
			 UART_u8ReceiveDataSynchronous(&local_receive);
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	0e 94 53 06 	call	0xca6	; 0xca6 <UART_u8ReceiveDataSynchronous>
			 UART_VoidTransmitDataSynchronous(local_receive);
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 25 06 	call	0xc4a	; 0xc4a <UART_VoidTransmitDataSynchronous>

			 if(local_receive == 'A')
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	81 34       	cpi	r24, 0x41	; 65
    2b30:	31 f4       	brne	.+12     	; 0x2b3e <main+0x52>
			 {
				 DIO_VoidSetPinValue(DIO_PORTA ,PIN0 , HIGH);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	60 e0       	ldi	r22, 0x00	; 0
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    2b3c:	ee cf       	rjmp	.-36     	; 0x2b1a <main+0x2e>
			 }
			 else if (local_receive == 'B')
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	82 34       	cpi	r24, 0x42	; 66
    2b42:	59 f7       	brne	.-42     	; 0x2b1a <main+0x2e>
			 {
				 DIO_VoidSetPinValue(DIO_PORTA ,PIN0 , LOW);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <DIO_VoidSetPinValue>
    2b4e:	e5 cf       	rjmp	.-54     	; 0x2b1a <main+0x2e>

00002b50 <__mulsi3>:
    2b50:	62 9f       	mul	r22, r18
    2b52:	d0 01       	movw	r26, r0
    2b54:	73 9f       	mul	r23, r19
    2b56:	f0 01       	movw	r30, r0
    2b58:	82 9f       	mul	r24, r18
    2b5a:	e0 0d       	add	r30, r0
    2b5c:	f1 1d       	adc	r31, r1
    2b5e:	64 9f       	mul	r22, r20
    2b60:	e0 0d       	add	r30, r0
    2b62:	f1 1d       	adc	r31, r1
    2b64:	92 9f       	mul	r25, r18
    2b66:	f0 0d       	add	r31, r0
    2b68:	83 9f       	mul	r24, r19
    2b6a:	f0 0d       	add	r31, r0
    2b6c:	74 9f       	mul	r23, r20
    2b6e:	f0 0d       	add	r31, r0
    2b70:	65 9f       	mul	r22, r21
    2b72:	f0 0d       	add	r31, r0
    2b74:	99 27       	eor	r25, r25
    2b76:	72 9f       	mul	r23, r18
    2b78:	b0 0d       	add	r27, r0
    2b7a:	e1 1d       	adc	r30, r1
    2b7c:	f9 1f       	adc	r31, r25
    2b7e:	63 9f       	mul	r22, r19
    2b80:	b0 0d       	add	r27, r0
    2b82:	e1 1d       	adc	r30, r1
    2b84:	f9 1f       	adc	r31, r25
    2b86:	bd 01       	movw	r22, r26
    2b88:	cf 01       	movw	r24, r30
    2b8a:	11 24       	eor	r1, r1
    2b8c:	08 95       	ret

00002b8e <__udivmodhi4>:
    2b8e:	aa 1b       	sub	r26, r26
    2b90:	bb 1b       	sub	r27, r27
    2b92:	51 e1       	ldi	r21, 0x11	; 17
    2b94:	07 c0       	rjmp	.+14     	; 0x2ba4 <__udivmodhi4_ep>

00002b96 <__udivmodhi4_loop>:
    2b96:	aa 1f       	adc	r26, r26
    2b98:	bb 1f       	adc	r27, r27
    2b9a:	a6 17       	cp	r26, r22
    2b9c:	b7 07       	cpc	r27, r23
    2b9e:	10 f0       	brcs	.+4      	; 0x2ba4 <__udivmodhi4_ep>
    2ba0:	a6 1b       	sub	r26, r22
    2ba2:	b7 0b       	sbc	r27, r23

00002ba4 <__udivmodhi4_ep>:
    2ba4:	88 1f       	adc	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	5a 95       	dec	r21
    2baa:	a9 f7       	brne	.-22     	; 0x2b96 <__udivmodhi4_loop>
    2bac:	80 95       	com	r24
    2bae:	90 95       	com	r25
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	08 95       	ret

00002bb6 <__divmodhi4>:
    2bb6:	97 fb       	bst	r25, 7
    2bb8:	09 2e       	mov	r0, r25
    2bba:	07 26       	eor	r0, r23
    2bbc:	0a d0       	rcall	.+20     	; 0x2bd2 <__divmodhi4_neg1>
    2bbe:	77 fd       	sbrc	r23, 7
    2bc0:	04 d0       	rcall	.+8      	; 0x2bca <__divmodhi4_neg2>
    2bc2:	e5 df       	rcall	.-54     	; 0x2b8e <__udivmodhi4>
    2bc4:	06 d0       	rcall	.+12     	; 0x2bd2 <__divmodhi4_neg1>
    2bc6:	00 20       	and	r0, r0
    2bc8:	1a f4       	brpl	.+6      	; 0x2bd0 <__divmodhi4_exit>

00002bca <__divmodhi4_neg2>:
    2bca:	70 95       	com	r23
    2bcc:	61 95       	neg	r22
    2bce:	7f 4f       	sbci	r23, 0xFF	; 255

00002bd0 <__divmodhi4_exit>:
    2bd0:	08 95       	ret

00002bd2 <__divmodhi4_neg1>:
    2bd2:	f6 f7       	brtc	.-4      	; 0x2bd0 <__divmodhi4_exit>
    2bd4:	90 95       	com	r25
    2bd6:	81 95       	neg	r24
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	08 95       	ret

00002bdc <__udivmodsi4>:
    2bdc:	a1 e2       	ldi	r26, 0x21	; 33
    2bde:	1a 2e       	mov	r1, r26
    2be0:	aa 1b       	sub	r26, r26
    2be2:	bb 1b       	sub	r27, r27
    2be4:	fd 01       	movw	r30, r26
    2be6:	0d c0       	rjmp	.+26     	; 0x2c02 <__udivmodsi4_ep>

00002be8 <__udivmodsi4_loop>:
    2be8:	aa 1f       	adc	r26, r26
    2bea:	bb 1f       	adc	r27, r27
    2bec:	ee 1f       	adc	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	a2 17       	cp	r26, r18
    2bf2:	b3 07       	cpc	r27, r19
    2bf4:	e4 07       	cpc	r30, r20
    2bf6:	f5 07       	cpc	r31, r21
    2bf8:	20 f0       	brcs	.+8      	; 0x2c02 <__udivmodsi4_ep>
    2bfa:	a2 1b       	sub	r26, r18
    2bfc:	b3 0b       	sbc	r27, r19
    2bfe:	e4 0b       	sbc	r30, r20
    2c00:	f5 0b       	sbc	r31, r21

00002c02 <__udivmodsi4_ep>:
    2c02:	66 1f       	adc	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	88 1f       	adc	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	1a 94       	dec	r1
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <__udivmodsi4_loop>
    2c0e:	60 95       	com	r22
    2c10:	70 95       	com	r23
    2c12:	80 95       	com	r24
    2c14:	90 95       	com	r25
    2c16:	9b 01       	movw	r18, r22
    2c18:	ac 01       	movw	r20, r24
    2c1a:	bd 01       	movw	r22, r26
    2c1c:	cf 01       	movw	r24, r30
    2c1e:	08 95       	ret

00002c20 <__prologue_saves__>:
    2c20:	2f 92       	push	r2
    2c22:	3f 92       	push	r3
    2c24:	4f 92       	push	r4
    2c26:	5f 92       	push	r5
    2c28:	6f 92       	push	r6
    2c2a:	7f 92       	push	r7
    2c2c:	8f 92       	push	r8
    2c2e:	9f 92       	push	r9
    2c30:	af 92       	push	r10
    2c32:	bf 92       	push	r11
    2c34:	cf 92       	push	r12
    2c36:	df 92       	push	r13
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	ca 1b       	sub	r28, r26
    2c4a:	db 0b       	sbc	r29, r27
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	09 94       	ijmp

00002c58 <__epilogue_restores__>:
    2c58:	2a 88       	ldd	r2, Y+18	; 0x12
    2c5a:	39 88       	ldd	r3, Y+17	; 0x11
    2c5c:	48 88       	ldd	r4, Y+16	; 0x10
    2c5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c6e:	df 80       	ldd	r13, Y+7	; 0x07
    2c70:	ee 80       	ldd	r14, Y+6	; 0x06
    2c72:	fd 80       	ldd	r15, Y+5	; 0x05
    2c74:	0c 81       	ldd	r16, Y+4	; 0x04
    2c76:	1b 81       	ldd	r17, Y+3	; 0x03
    2c78:	aa 81       	ldd	r26, Y+2	; 0x02
    2c7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c7c:	ce 0f       	add	r28, r30
    2c7e:	d1 1d       	adc	r29, r1
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	ed 01       	movw	r28, r26
    2c8c:	08 95       	ret

00002c8e <_exit>:
    2c8e:	f8 94       	cli

00002c90 <__stop_program>:
    2c90:	ff cf       	rjmp	.-2      	; 0x2c90 <__stop_program>
