/***
 * Author : Mohammed Akram 
 * Data : 28 March,2023
 * Version : 1.0
 * compiler : GNU GCC
*/
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"


#include "../../MCAL/DIO/DIO_interface.h"

#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"



void KPD_VoidIntit(void)
{
    //set Rows pins to input pulled up
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,INPUT);
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,INPUT);
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,INPUT);
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,INPUT);
    // PILLED UP 
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW0_PIN,PULLUP);
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW1_PIN,PULLUP);
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW2_PIN,PULLUP);
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW3_PIN,PULLUP);
    //set cols pins to output high
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, OUTPUT);
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, OUTPUT);
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, OUTPUT);
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, OUTPUT);
    //SET COLUMNS HIGH
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,HIGH);
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,HIGH);
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,HIGH);
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,HIGH);


}
                                                 

u8 KPD_U8GetPressedKey(void)
{
   static u8 Local_u8KPDArray[KPD_ROWS_NUMBER][KPD_COLUMNS_NUMBER]=KPD_ARRAY_VALUES ;
   static u8 Local_u8Array_of_columns[KPD_COLUMNS_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
   static  u8 Local_U8Array_Of_Rows[KPD_ROWS_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    u8 local_u8Key_pressed ;
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8returned_value;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
        {
           local_u8Key_pressed = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
           if(local_u8Key_pressed== LOW)
           {
                while(local_u8returned_value==KPD_NOT_PRESSED)
                {
                    local_u8returned_value = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
                }

                return Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];

           }

        }
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);

    }


}

