
WDT_LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002eac  00002f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800080  00800080  00002f60  2**0
                  ALLOC
  3 .stab         00002fb8  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001825  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000773d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000789d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ab72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000baf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bf36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_1>
       8:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_2>
       c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 15 	call	0x2a52	; 0x2a52 <main>
      8a:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <WDT_VoidEnable>:
#include "WDT_interface.h"
#include "WDT_private.h"
#include "WDT_config.h"

void  WDT_VoidEnable(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    //set WDTCR_WDE to enable
    SET_BIT(WDTCR,WDTCR_WDE);
     ca6:	a1 e4       	ldi	r26, 0x41	; 65
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e1 e4       	ldi	r30, 0x41	; 65
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	8c 93       	st	X, r24
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <WDT_VoidSleep>:
 

 void WDT_VoidSleep(u8 Copy_U8sleeptime)
 {
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	0f 92       	push	r0
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	89 83       	std	Y+1, r24	; 0x01
    //mask to clear the first 3 bit
    WDTCR &= 0b11111000 ;
     cc6:	a1 e4       	ldi	r26, 0x41	; 65
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e1 e4       	ldi	r30, 0x41	; 65
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	88 7f       	andi	r24, 0xF8	; 248
     cd2:	8c 93       	st	X, r24
    // or with time user select 
    WDTCR |=Copy_U8sleeptime ;
     cd4:	a1 e4       	ldi	r26, 0x41	; 65
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e4       	ldi	r30, 0x41	; 65
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	90 81       	ld	r25, Z
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	89 2b       	or	r24, r25
     ce2:	8c 93       	st	X, r24
 }
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <WDT_VoidDisable>:

 void WDT_VoidDisable(void)
 {
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
    // set bit in  in enable bit and turn off bit in same time and clear WDE 
   WDTCR = (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
     cf4:	e1 e4       	ldi	r30, 0x41	; 65
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	88 e1       	ldi	r24, 0x18	; 24
     cfa:	80 83       	st	Z, r24
   WDTCR = 0;
     cfc:	e1 e4       	ldi	r30, 0x41	; 65
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	10 82       	st	Z, r1
 }
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <TIMER0_voidInit>:

static void (*Global_pvOVFNotificationFunction)(void) = NULL;
static void (*Global_pvOCNotificationFunction)(void) = NULL;

static void (*ICU_NotificationFunction)(void)=NULL ;

     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
{
		/* Set Normal Mode for timer0*/ 
	#if TIMER0_MODE == NORMAL_MODE
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
		CLEAR_BIT(TCCR0,TCCR0_WGM01);
		/* Set CTC Mode for timer0 */
     d10:	a3 e5       	ldi	r26, 0x53	; 83
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e3 e5       	ldi	r30, 0x53	; 83
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8f 7b       	andi	r24, 0xBF	; 191
     d1c:	8c 93       	st	X, r24
	#elif TIMER0_MODE == CTC_MODE
     d1e:	a3 e5       	ldi	r26, 0x53	; 83
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e3 e5       	ldi	r30, 0x53	; 83
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
			CLEAR_BIT(TCCR0,TCCR0_WGM01);
	#else

	#endif

     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 7f       	andi	r24, 0xF8	; 248
     d38:	8c 93       	st	X, r24
	/*Set The Prescaler to be 8*/
     d3a:	a3 e5       	ldi	r26, 0x53	; 83
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e3 e5       	ldi	r30, 0x53	; 83
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	82 60       	ori	r24, 0x02	; 2
     d46:	8c 93       	st	X, r24
		TCCR0 &= PRESCALER_MASK ;
		TCCR0 |= TIMER0_PRESCALER ;
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <TIMER1_voidInit>:

}
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
void TIMER2_voidInit(void)
{
     d56:	af e4       	ldi	r26, 0x4F	; 79
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ef e4       	ldi	r30, 0x4F	; 79
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	8c 93       	st	X, r24
		/* Set Normal Mode for timer2*/ 
     d64:	af e4       	ldi	r26, 0x4F	; 79
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ef e4       	ldi	r30, 0x4F	; 79
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	8c 93       	st	X, r24
	#if TIMER2_MODE == NORMAL_MODE
     d72:	ae e4       	ldi	r26, 0x4E	; 78
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ee e4       	ldi	r30, 0x4E	; 78
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 60       	ori	r24, 0x08	; 8
     d7e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM20);
     d80:	ae e4       	ldi	r26, 0x4E	; 78
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ee e4       	ldi	r30, 0x4E	; 78
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 61       	ori	r24, 0x10	; 16
     d8c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21);
		/* Set CTC Mode for timer0 2*/
	#elif TIMER2_MODE == CTC_MODE
     d8e:	af e4       	ldi	r26, 0x4F	; 79
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ef e4       	ldi	r30, 0x4F	; 79
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7b       	andi	r24, 0xBF	; 191
     d9a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,TCCR2_WGM20);
     d9c:	af e4       	ldi	r26, 0x4F	; 79
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ef e4       	ldi	r30, 0x4F	; 79
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 77       	andi	r24, 0x7F	; 127
     da8:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM21);
			/* set fast mode FOR TIMER 2*/
	#elif TIMER2_MODE == FAST_PWM_MODE
     daa:	ae e4       	ldi	r26, 0x4E	; 78
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ee e4       	ldi	r30, 0x4E	; 78
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8e 7f       	andi	r24, 0xFE	; 254
     db6:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_WGM20);
     db8:	ae e4       	ldi	r26, 0x4E	; 78
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ee e4       	ldi	r30, 0x4E	; 78
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	82 60       	ori	r24, 0x02	; 2
     dc4:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM21); 
     dc6:	ae e4       	ldi	r26, 0x4E	; 78
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ee e4       	ldi	r30, 0x4E	; 78
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8b 7f       	andi	r24, 0xFB	; 251
     dd2:	8c 93       	st	X, r24
			/* set PHASE CORRECT  mode  FOR TIMER 2*/      
	#elif TIMER2_MODE == PHASE_CORRECT_MODE
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <TIMER1_VoidSetICR1Value>:
			SET_BIT(TCCR2,TCCR2_WGM20);
			CLEAR_BIT(TCCR2,TCCR2_WGM21);
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <TIMER1_VoidSetICR1Value+0x6>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
	#else
     de8:	e6 e4       	ldi	r30, 0x46	; 70
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24

     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <TIMER1_VoidSetOCR1AValue>:
	#endif

     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	00 d0       	rcall	.+0      	; 0xe04 <TIMER1_VoidSetOCR1AValue+0x6>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Prescaler to be 8*/
     e0c:	ea e4       	ldi	r30, 0x4A	; 74
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
		TCCR2 &= PRESCALER_MASK ;
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <TIMER2_voidInit>:
		TCCR2 |= TIMER2_PRESCALER ;

}

void TIMER0_VoidSetModeForFastmode(u8 Copy_U8Mode)
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
{
	switch (Copy_U8Mode)
	{
     e2a:	a5 e4       	ldi	r26, 0x45	; 69
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e4       	ldi	r30, 0x45	; 69
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8f 7b       	andi	r24, 0xBF	; 191
     e36:	8c 93       	st	X, r24
	case FAST_OC0_DISCONNECTED :
     e38:	a5 e4       	ldi	r26, 0x45	; 69
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e4       	ldi	r30, 0x45	; 69
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	87 7f       	andi	r24, 0xF7	; 247
     e44:	8c 93       	st	X, r24
		break;
	}
}

void TIMER0_VoidSetModeForPhaseCorrectmode(u8 Copy_U8Mode)
{
     e46:	a5 e4       	ldi	r26, 0x45	; 69
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e4       	ldi	r30, 0x45	; 69
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 7f       	andi	r24, 0xF8	; 248
     e52:	8c 93       	st	X, r24
	switch (Copy_U8Mode)
     e54:	a5 e4       	ldi	r26, 0x45	; 69
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e5 e4       	ldi	r30, 0x45	; 69
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	8c 93       	st	X, r24
	{
	case PHASE_OC0_DISCONNECTED :
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <TIMER0_VoidSetModeForFastmode>:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
		CLEAR_BIT(TCCR0,TCCR0_COM01);
		break;
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <TIMER0_VoidSetModeForFastmode+0x6>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
	case PHASE_SET_OC0_ON_COMAPRE :
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3b 83       	std	Y+3, r19	; 0x03
     e7e:	2a 83       	std	Y+2, r18	; 0x02
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	c1 f0       	breq	.+48     	; 0xeba <TIMER0_VoidSetModeForFastmode+0x52>
     e8a:	2a 81       	ldd	r18, Y+2	; 0x02
     e8c:	3b 81       	ldd	r19, Y+3	; 0x03
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	11 f1       	breq	.+68     	; 0xed8 <TIMER0_VoidSetModeForFastmode+0x70>
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	9b 81       	ldd	r25, Y+3	; 0x03
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	61 f5       	brne	.+88     	; 0xef4 <TIMER0_VoidSetModeForFastmode+0x8c>
		CLEAR_BIT(TCCR0,TCCR0_COM00);
		SET_BIT(TCCR0,TCCR0_COM01);
		break;
     e9c:	a3 e5       	ldi	r26, 0x53	; 83
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 7e       	andi	r24, 0xEF	; 239
     ea8:	8c 93       	st	X, r24
	case PHASE_CLEAR_OC0_ON_COMPARE :
     eaa:	a3 e5       	ldi	r26, 0x53	; 83
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e3 e5       	ldi	r30, 0x53	; 83
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7d       	andi	r24, 0xDF	; 223
     eb6:	8c 93       	st	X, r24
     eb8:	1d c0       	rjmp	.+58     	; 0xef4 <TIMER0_VoidSetModeForFastmode+0x8c>
		SET_BIT(TCCR0,TCCR0_COM00);
		SET_BIT(TCCR0,TCCR0_COM01);
		break;
     eba:	a3 e5       	ldi	r26, 0x53	; 83
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e3 e5       	ldi	r30, 0x53	; 83
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7e       	andi	r24, 0xEF	; 239
     ec6:	8c 93       	st	X, r24
	default:
     ec8:	a3 e5       	ldi	r26, 0x53	; 83
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e3 e5       	ldi	r30, 0x53	; 83
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 62       	ori	r24, 0x20	; 32
     ed4:	8c 93       	st	X, r24
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <TIMER0_VoidSetModeForFastmode+0x8c>
		break;
	}
}
     ed8:	a3 e5       	ldi	r26, 0x53	; 83
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e3 e5       	ldi	r30, 0x53	; 83
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	8c 93       	st	X, r24
void TIMER2_voidSetPreloadValue(u8 Copy_u8Value)
     ee6:	a3 e5       	ldi	r26, 0x53	; 83
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e3 e5       	ldi	r30, 0x53	; 83
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	8c 93       	st	X, r24
{
	TCNT2 = Copy_u8Value ;
}
void TIMER2_voidSetOCMatchValue(u8 Copy_u8Value)
{
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <TIMER0_VoidSetModeForPhaseCorrectmode>:
	OCR2 = Copy_u8Value;
}

     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <TIMER0_VoidSetModeForPhaseCorrectmode+0x6>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_voidSetPreloadValue(u8 Copy_u8Value)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3b 83       	std	Y+3, r19	; 0x03
     f16:	2a 83       	std	Y+2, r18	; 0x02
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	9b 81       	ldd	r25, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	c1 f0       	breq	.+48     	; 0xf52 <TIMER0_VoidSetModeForPhaseCorrectmode+0x52>
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	3b 81       	ldd	r19, Y+3	; 0x03
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	11 f1       	breq	.+68     	; 0xf70 <TIMER0_VoidSetModeForPhaseCorrectmode+0x70>
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	61 f5       	brne	.+88     	; 0xf8c <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
{
	TCNT0 = Copy_u8Value;
}
     f34:	a3 e5       	ldi	r26, 0x53	; 83
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e3 e5       	ldi	r30, 0x53	; 83
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	8c 93       	st	X, r24
void TIMER0_voidSetOCMatchValue(u8 Copy_u8Value)
     f42:	a3 e5       	ldi	r26, 0x53	; 83
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e3 e5       	ldi	r30, 0x53	; 83
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7d       	andi	r24, 0xDF	; 223
     f4e:	8c 93       	st	X, r24
     f50:	1d c0       	rjmp	.+58     	; 0xf8c <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
{
	OCR0 = Copy_u8Value;
}
     f52:	a3 e5       	ldi	r26, 0x53	; 83
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 7e       	andi	r24, 0xEF	; 239
     f5e:	8c 93       	st	X, r24

     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 62       	ori	r24, 0x20	; 32
     f6c:	8c 93       	st	X, r24
     f6e:	0e c0       	rjmp	.+28     	; 0xf8c <TIMER0_VoidSetModeForPhaseCorrectmode+0x8c>
void TIMER0_voidSetOVFCallBack(void(*pvNotificationFunction)(void))
{
	Global_pvOVFNotificationFunction = pvNotificationFunction;
     f70:	a3 e5       	ldi	r26, 0x53	; 83
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e3 e5       	ldi	r30, 0x53	; 83
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	80 61       	ori	r24, 0x10	; 16
     f7c:	8c 93       	st	X, r24
}
     f7e:	a3 e5       	ldi	r26, 0x53	; 83
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e3 e5       	ldi	r30, 0x53	; 83
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 62       	ori	r24, 0x20	; 32
     f8a:	8c 93       	st	X, r24
void TIMER0_voidSetOCCallBack(void(*pvNotificationFunction)(void))
{
	Global_pvOCNotificationFunction = pvNotificationFunction;
}

     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <TIMER2_voidSetPreloadValue>:
void TIMER0_voidEnableInterrupt(u8 Copy_u8Mode)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Mode == NORMAL_MODE)
     fa4:	e4 e4       	ldi	r30, 0x44	; 68
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	80 83       	st	Z, r24
	{
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <TIMER2_voidSetOCMatchValue>:
		SET_BIT(TIMSK,TIMSK_TOIE0);
	}
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	0f 92       	push	r0
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
	else if(Copy_u8Mode == CTC_MODE)
     fc0:	e3 e4       	ldi	r30, 0x43	; 67
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	80 83       	st	Z, r24
	{
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <TIMER0_voidSetPreloadValue>:
		SET_BIT(TIMSK,TIMSK_OCIE0);
	}
}
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
void TIMER0_voidDisableInterrupt(u8 Copy_u8Mode)
     fdc:	e2 e5       	ldi	r30, 0x52	; 82
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 83       	st	Z, r24
{
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <TIMER0_voidSetOCMatchValue>:
	if(Copy_u8Mode == NORMAL_MODE)
	{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(TIMSK,TIMSK_TOIE0);
     ff8:	ec e5       	ldi	r30, 0x5C	; 92
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 83       	st	Z, r24
	}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <TIMER0_voidSetOVFCallBack>:
	else if(Copy_u8Mode == CTC_MODE)
	{
		CLEAR_BIT(TIMSK,TIMSK_OCIE0);
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <TIMER0_voidSetOVFCallBack+0x6>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
	}
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	90 93 81 00 	sts	0x0081, r25
    101e:	80 93 80 00 	sts	0x0080, r24
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <TIMER0_voidSetOCCallBack>:

void TIMER0_voidSetBusyWait_OVFMode(u32 Copy_u32Time)
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <TIMER0_voidSetOCCallBack+0x6>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
{
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	90 93 83 00 	sts	0x0083, r25
    1042:	80 93 82 00 	sts	0x0082, r24
	/*Set The Prescaler to be 8*/
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <TIMER0_voidEnableInterrupt>:
	CLEAR_BIT(TCCR0, TCCR0_CS00);
	SET_BIT(TCCR0, TCCR0_CS01);
	CLEAR_BIT(TCCR0, TCCR0_CS02);
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01

    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 23       	and	r24, r24
    1060:	41 f4       	brne	.+16     	; 0x1072 <TIMER0_voidEnableInterrupt+0x22>
	TIMER0_voidSetPreloadValue(6);
	u32 Number_of_OVF = ((u32)(Copy_u32Time*1000)) / 250;
    1062:	a9 e5       	ldi	r26, 0x59	; 89
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e9 e5       	ldi	r30, 0x59	; 89
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	81 60       	ori	r24, 0x01	; 1
    106e:	8c 93       	st	X, r24
    1070:	0a c0       	rjmp	.+20     	; 0x1086 <TIMER0_voidEnableInterrupt+0x36>

	u32 Counter = 0;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	39 f4       	brne	.+14     	; 0x1086 <TIMER0_voidEnableInterrupt+0x36>

	while(Counter < Number_of_OVF)
    1078:	a9 e5       	ldi	r26, 0x59	; 89
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e9 e5       	ldi	r30, 0x59	; 89
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	8c 93       	st	X, r24
	{
		while(GET_BIT(TIFR , TIFR_TOV0) == 0);
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <TIMER0_voidDisableInterrupt>:
		SET_BIT(TIFR , TIFR_TOV0);
		Counter++;
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_voidSetPreloadValue(6);
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 23       	and	r24, r24
    109e:	41 f4       	brne	.+16     	; 0x10b0 <TIMER0_voidDisableInterrupt+0x22>
	}
}
    10a0:	a9 e5       	ldi	r26, 0x59	; 89
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e9 e5       	ldi	r30, 0x59	; 89
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8c 93       	st	X, r24
    10ae:	0a c0       	rjmp	.+20     	; 0x10c4 <TIMER0_voidDisableInterrupt+0x36>
void TIMER0_voidSetBusyWait_OCMode(u32 Copy_u32Time)
{
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <TIMER0_voidDisableInterrupt+0x36>
	/*Set The Prescaler to be 8*/
	CLEAR_BIT(TCCR0, TCCR0_CS00);
    10b6:	a9 e5       	ldi	r26, 0x59	; 89
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e9 e5       	ldi	r30, 0x59	; 89
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8d 7f       	andi	r24, 0xFD	; 253
    10c2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
	CLEAR_BIT(TCCR0, TCCR0_CS02);
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <TIMER0_voidSetBusyWait_OVFMode>:

	TIMER0_voidSetOCMatchValue(250);
	/*You should cast the constants, i.e., 1000 and 250 to unsigned long (u32) and compute the multiplication operation first before the division */
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <TIMER0_voidSetBusyWait_OVFMode+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <TIMER0_voidSetBusyWait_OVFMode+0x8>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <TIMER0_voidSetBusyWait_OVFMode+0xa>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
	//u32 Number_of_OCFlags = ((u32)(Copy_u32Time*1000)) / 250;
	u32 Number_Of_OCF = ((u32)Copy_u32Time * 1000UL) / 250UL;
    10de:	a3 e5       	ldi	r26, 0x53	; 83
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8e 7f       	andi	r24, 0xFE	; 254
    10ea:	8c 93       	st	X, r24

    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	82 60       	ori	r24, 0x02	; 2
    10f8:	8c 93       	st	X, r24
	u32 Local_u32Counter = 0;
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8b 7f       	andi	r24, 0xFB	; 251
    1106:	8c 93       	st	X, r24

	while(Local_u32Counter <= Number_Of_OCF)
    1108:	86 e0       	ldi	r24, 0x06	; 6
    110a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TIMER0_voidSetPreloadValue>
	{
    110e:	2d 81       	ldd	r18, Y+5	; 0x05
    1110:	3e 81       	ldd	r19, Y+6	; 0x06
    1112:	88 ee       	ldi	r24, 0xE8	; 232
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	ac 01       	movw	r20, r24
    1118:	24 9f       	mul	r18, r20
    111a:	c0 01       	movw	r24, r0
    111c:	25 9f       	mul	r18, r21
    111e:	90 0d       	add	r25, r0
    1120:	34 9f       	mul	r19, r20
    1122:	90 0d       	add	r25, r0
    1124:	11 24       	eor	r1, r1
    1126:	2a ef       	ldi	r18, 0xFA	; 250
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	b9 01       	movw	r22, r18
    112c:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodhi4>
    1130:	cb 01       	movw	r24, r22
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	8b 83       	std	Y+3, r24	; 0x03
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
		SET_BIT(TIFR , TIFR_OCF0);
    1136:	1a 82       	std	Y+2, r1	; 0x02
    1138:	19 82       	std	Y+1, r1	; 0x01
    113a:	18 c0       	rjmp	.+48     	; 0x116c <TIMER0_voidSetBusyWait_OVFMode+0xa0>
		Local_u32Counter++;
	}
}
u16 ICU_U16GetICRRegister(void)
    113c:	e8 e5       	ldi	r30, 0x58	; 88
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	b9 f3       	breq	.-18     	; 0x113c <TIMER0_voidSetBusyWait_OVFMode+0x70>
{
    114e:	a8 e5       	ldi	r26, 0x58	; 88
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e5       	ldi	r30, 0x58	; 88
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	81 60       	ori	r24, 0x01	; 1
    115a:	8c 93       	st	X, r24
	return ICR1 ;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
}
    1166:	86 e0       	ldi	r24, 0x06	; 6
    1168:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TIMER0_voidSetPreloadValue>
	while(Local_u32Counter <= Number_Of_OCF)
	{
		while(GET_BIT(TIFR , TIFR_OCF0) == 0);
		SET_BIT(TIFR , TIFR_OCF0);
		Local_u32Counter++;
	}
    116c:	29 81       	ldd	r18, Y+1	; 0x01
    116e:	3a 81       	ldd	r19, Y+2	; 0x02
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	08 f3       	brcs	.-62     	; 0x113c <TIMER0_voidSetBusyWait_OVFMode+0x70>
u16 ICU_U16GetICRRegister(void)
{
	return ICR1 ;
}
void ICU_VoidSetTriggerSignal( u8 Copy_u8TriggerSignal)
{
    117a:	26 96       	adiw	r28, 0x06	; 6
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <TIMER0_voidSetBusyWait_OCMode>:
	switch (Copy_u8TriggerSignal)
	{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <TIMER0_voidSetBusyWait_OCMode+0x6>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <TIMER0_voidSetBusyWait_OCMode+0x8>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <TIMER0_voidSetBusyWait_OCMode+0xa>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
	case  ICU_FALLING_EDGE :
				//SET BIT TO MAKE SENSE OF ICU IS FALLING
    119e:	a3 e5       	ldi	r26, 0x53	; 83
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e3 e5       	ldi	r30, 0x53	; 83
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8e 7f       	andi	r24, 0xFE	; 254
    11aa:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,TCCR1B_ICES1);
    11ac:	a3 e5       	ldi	r26, 0x53	; 83
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e3 e5       	ldi	r30, 0x53	; 83
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	82 60       	ori	r24, 0x02	; 2
    11b8:	8c 93       	st	X, r24
		break;
    11ba:	a3 e5       	ldi	r26, 0x53	; 83
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e3 e5       	ldi	r30, 0x53	; 83
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8b 7f       	andi	r24, 0xFB	; 251
    11c6:	8c 93       	st	X, r24
		case  ICU_RISING_EDGE :
				//SET BIT TO MAKE SENSE OF ICU IS RISING
    11c8:	8a ef       	ldi	r24, 0xFA	; 250
    11ca:	0e 94 f6 07 	call	0xfec	; 0xfec <TIMER0_voidSetOCMatchValue>
				SET_BIT(TCCR1B,TCCR1B_ICES1);
		break;
	
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	cc 01       	movw	r24, r24
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	28 ee       	ldi	r18, 0xE8	; 232
    11da:	33 e0       	ldi	r19, 0x03	; 3
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__mulsi3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	2a ef       	ldi	r18, 0xFA	; 250
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <__udivmodsi4>
    11fc:	da 01       	movw	r26, r20
    11fe:	c9 01       	movw	r24, r18
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	8b 83       	std	Y+3, r24	; 0x03
	default:
		break;
    1204:	1a 82       	std	Y+2, r1	; 0x02
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	16 c0       	rjmp	.+44     	; 0x1236 <TIMER0_voidSetBusyWait_OCMode+0xaa>
	}
}
void ICU_VoidEnableIntrrupt(u8 Copu_U8InterruptStatus)
{
    120a:	e8 e5       	ldi	r30, 0x58	; 88
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	86 95       	lsr	r24
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	90 70       	andi	r25, 0x00	; 0
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	b1 f3       	breq	.-20     	; 0x120a <TIMER0_voidSetBusyWait_OCMode+0x7e>
	switch (Copu_U8InterruptStatus)
    121e:	a8 e5       	ldi	r26, 0x58	; 88
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e8 e5       	ldi	r30, 0x58	; 88
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	82 60       	ori	r24, 0x02	; 2
    122a:	8c 93       	st	X, r24
	{
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
		break;
	
	default:
		break;
	}
}
    1236:	29 81       	ldd	r18, Y+1	; 0x01
    1238:	3a 81       	ldd	r19, Y+2	; 0x02
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	82 17       	cp	r24, r18
    1240:	93 07       	cpc	r25, r19
    1242:	18 f7       	brcc	.-58     	; 0x120a <TIMER0_voidSetBusyWait_OCMode+0x7e>
void ICU_VoidEnableIntrrupt(u8 Copu_U8InterruptStatus)
{
	switch (Copu_U8InterruptStatus)
	{
	case  ICU_INTERRUPT_ENABLE :
				SET_BIT(TIMSK,TIMSK_TICIE1);
    1244:	26 96       	adiw	r28, 0x06	; 6
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <GIE_VoidEnabledGlobalInterrupt>:

#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_VoidEnabledGlobalInterrupt(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG , SREG_BIT7);
    125e:	af e5       	ldi	r26, 0x5F	; 95
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ef e5       	ldi	r30, 0x5F	; 95
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 68       	ori	r24, 0x80	; 128
    126a:	8c 93       	st	X, r24


}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <GIE_VoidDisabledGlobalInterrupt>:
void GIE_VoidDisabledGlobalInterrupt(void)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG , SREG_BIT7);
    127a:	af e5       	ldi	r26, 0x5F	; 95
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ef e5       	ldi	r30, 0x5F	; 95
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 77       	andi	r24, 0x7F	; 127
    1286:	8c 93       	st	X, r24


}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <EXTI_VoidIntit>:
static void (*EXTI_PVoidINT1NotificationFunction) (void) = NULL ;
static void (*EXTI_PVoidINT2NotificationFunction) (void) = NULL ;


void EXTI_VoidIntit( u8 Copy_U8INTNum)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <EXTI_VoidIntit+0x6>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_U8INTNum)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3b 83       	std	Y+3, r19	; 0x03
    12a4:	2a 83       	std	Y+2, r18	; 0x02
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	a1 f0       	breq	.+40     	; 0x12d8 <EXTI_VoidIntit+0x4a>
    12b0:	2a 81       	ldd	r18, Y+2	; 0x02
    12b2:	3b 81       	ldd	r19, Y+3	; 0x03
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <EXTI_VoidIntit+0x60>
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	01 f5       	brne	.+64     	; 0x1302 <EXTI_VoidIntit+0x74>
    {
    case EXTI_INT0:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
    12c2:	83 e0       	ldi	r24, 0x03	; 3
    12c4:	62 e0       	ldi	r22, 0x02	; 2
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI0_PORT,EXTI0_PIN,HIGH);
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	62 e0       	ldi	r22, 0x02	; 2
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    12d6:	15 c0       	rjmp	.+42     	; 0x1302 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI0_PORT,EXTI0_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT1:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	63 e0       	ldi	r22, 0x03	; 3
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI1_PORT,EXTI1_PIN,HIGH);
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	63 e0       	ldi	r22, 0x03	; 3
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    12ec:	0a c0       	rjmp	.+20     	; 0x1302 <EXTI_VoidIntit+0x74>
                DIO_voidSetPinDirection(EXTI1_PORT,EXTI1_PIN,INPUT);
            #endif             
        break;
        case EXTI_INT2:
            #if INT0_PIN_CONNECTION==INTERNAL_PULLUP
                    DIO_voidSetPinDirection(EXTI2_PORT,EXTI2_PIN,INPUT);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	62 e0       	ldi	r22, 0x02	; 2
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
                    DIO_VoidSetPinValue(EXTI2_PORT,EXTI2_PIN,HIGH);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	62 e0       	ldi	r22, 0x02	; 2
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
        break;
    
    default:
        break;
    }
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <EXTI_VoidEnable>:

void EXTI_VoidEnable(u8 Copy_U8Intnum)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <EXTI_VoidEnable+0x6>
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3b 83       	std	Y+3, r19	; 0x03
    1324:	2a 83       	std	Y+2, r18	; 0x02
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	89 f0       	breq	.+34     	; 0x1352 <EXTI_VoidEnable+0x44>
    1330:	2a 81       	ldd	r18, Y+2	; 0x02
    1332:	3b 81       	ldd	r19, Y+3	; 0x03
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	a1 f0       	breq	.+40     	; 0x1362 <EXTI_VoidEnable+0x54>
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	9b 81       	ldd	r25, Y+3	; 0x03
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	b9 f4       	brne	.+46     	; 0x1370 <EXTI_VoidEnable+0x62>
    {
    case  EXTI_INT0  :
            SET_BIT(GICR,INT0);
    1342:	ab e5       	ldi	r26, 0x5B	; 91
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	eb e5       	ldi	r30, 0x5B	; 91
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	8c 93       	st	X, r24
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT1:
            SET_BIT(GICR,INT1);
    1352:	ab e5       	ldi	r26, 0x5B	; 91
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	eb e5       	ldi	r30, 0x5B	; 91
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	8c 93       	st	X, r24
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <EXTI_VoidEnable+0x62>
        break;
        case  EXTI_INT2 :
            SET_BIT(GICR,INT2);
    1362:	ab e5       	ldi	r26, 0x5B	; 91
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	eb e5       	ldi	r30, 0x5B	; 91
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 62       	ori	r24, 0x20	; 32
    136e:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <EXTI_VoidDisable>:
void EXTI_VoidDisable(u8 Copy_U8Intnum)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <EXTI_VoidDisable+0x6>
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_U8Intnum)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3b 83       	std	Y+3, r19	; 0x03
    1392:	2a 83       	std	Y+2, r18	; 0x02
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	89 f0       	breq	.+34     	; 0x13c0 <EXTI_VoidDisable+0x44>
    139e:	2a 81       	ldd	r18, Y+2	; 0x02
    13a0:	3b 81       	ldd	r19, Y+3	; 0x03
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	a1 f0       	breq	.+40     	; 0x13d0 <EXTI_VoidDisable+0x54>
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	9b 81       	ldd	r25, Y+3	; 0x03
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	b9 f4       	brne	.+46     	; 0x13de <EXTI_VoidDisable+0x62>
    {
    case  EXTI_INT0:
            CLEAR_BIT(GICR,INT0);
    13b0:	ab e5       	ldi	r26, 0x5B	; 91
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	eb e5       	ldi	r30, 0x5B	; 91
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8f 7b       	andi	r24, 0xBF	; 191
    13bc:	8c 93       	st	X, r24
    13be:	0f c0       	rjmp	.+30     	; 0x13de <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT1:
            CLEAR_BIT(GICR,INT1);
    13c0:	ab e5       	ldi	r26, 0x5B	; 91
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e5       	ldi	r30, 0x5B	; 91
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	8c 93       	st	X, r24
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <EXTI_VoidDisable+0x62>
        break;
        case  EXTI_INT2:
            CLEAR_BIT(GICR,INT2);
    13d0:	ab e5       	ldi	r26, 0x5B	; 91
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e5       	ldi	r30, 0x5B	; 91
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8f 7d       	andi	r24, 0xDF	; 223
    13dc:	8c 93       	st	X, r24
    
    default:
        break;
    }

}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <EXTI_VoidTriggerEdge>:
void EXTI_VoidTriggerEdge(u8 Copy_U8Intnum , u8 Copy_U8Edge)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	2a 97       	sbiw	r28, 0x0a	; 10
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_U8Intnum)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3a 87       	std	Y+10, r19	; 0x0a
    140a:	29 87       	std	Y+9, r18	; 0x09
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <EXTI_VoidTriggerEdge+0x2e>
    1416:	66 c0       	rjmp	.+204    	; 0x14e4 <EXTI_VoidTriggerEdge+0xfa>
    1418:	29 85       	ldd	r18, Y+9	; 0x09
    141a:	3a 85       	ldd	r19, Y+10	; 0x0a
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <EXTI_VoidTriggerEdge+0x3a>
    1422:	bb c0       	rjmp	.+374    	; 0x159a <EXTI_VoidTriggerEdge+0x1b0>
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	09 f0       	breq	.+2      	; 0x142e <EXTI_VoidTriggerEdge+0x44>
    142c:	dd c0       	rjmp	.+442    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
    {
    case  EXTI_INT0:
                switch (Copy_U8Edge)
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	38 87       	std	Y+8, r19	; 0x08
    1436:	2f 83       	std	Y+7, r18	; 0x07
    1438:	8f 81       	ldd	r24, Y+7	; 0x07
    143a:	98 85       	ldd	r25, Y+8	; 0x08
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	21 f1       	breq	.+72     	; 0x148a <EXTI_VoidTriggerEdge+0xa0>
    1442:	2f 81       	ldd	r18, Y+7	; 0x07
    1444:	38 85       	ldd	r19, Y+8	; 0x08
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	2c f4       	brge	.+10     	; 0x1456 <EXTI_VoidTriggerEdge+0x6c>
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	98 85       	ldd	r25, Y+8	; 0x08
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	61 f0       	breq	.+24     	; 0x146c <EXTI_VoidTriggerEdge+0x82>
    1454:	c9 c0       	rjmp	.+402    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
    1456:	2f 81       	ldd	r18, Y+7	; 0x07
    1458:	38 85       	ldd	r19, Y+8	; 0x08
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	21 f1       	breq	.+72     	; 0x14a8 <EXTI_VoidTriggerEdge+0xbe>
    1460:	8f 81       	ldd	r24, Y+7	; 0x07
    1462:	98 85       	ldd	r25, Y+8	; 0x08
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	71 f1       	breq	.+92     	; 0x14c6 <EXTI_VoidTriggerEdge+0xdc>
    146a:	be c0       	rjmp	.+380    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC00);
    146c:	a5 e5       	ldi	r26, 0x55	; 85
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e5       	ldi	r30, 0x55	; 85
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8e 7f       	andi	r24, 0xFE	; 254
    1478:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    147a:	a5 e5       	ldi	r26, 0x55	; 85
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e5 e5       	ldi	r30, 0x55	; 85
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8d 7f       	andi	r24, 0xFD	; 253
    1486:	8c 93       	st	X, r24
    1488:	af c0       	rjmp	.+350    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC00);
    148a:	a5 e5       	ldi	r26, 0x55	; 85
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e5       	ldi	r30, 0x55	; 85
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	81 60       	ori	r24, 0x01	; 1
    1496:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC01);
    1498:	a5 e5       	ldi	r26, 0x55	; 85
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e5 e5       	ldi	r30, 0x55	; 85
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8d 7f       	andi	r24, 0xFD	; 253
    14a4:	8c 93       	st	X, r24
    14a6:	a0 c0       	rjmp	.+320    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC00);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	8c 93       	st	X, r24
    14c4:	91 c0       	rjmp	.+290    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC00);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC01);
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	8c 93       	st	X, r24
    14e2:	82 c0       	rjmp	.+260    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT1:
                switch (Copy_U8Edge)
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	3e 83       	std	Y+6, r19	; 0x06
    14ec:	2d 83       	std	Y+5, r18	; 0x05
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	21 f1       	breq	.+72     	; 0x1540 <EXTI_VoidTriggerEdge+0x156>
    14f8:	2d 81       	ldd	r18, Y+5	; 0x05
    14fa:	3e 81       	ldd	r19, Y+6	; 0x06
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	2c f4       	brge	.+10     	; 0x150c <EXTI_VoidTriggerEdge+0x122>
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	61 f0       	breq	.+24     	; 0x1522 <EXTI_VoidTriggerEdge+0x138>
    150a:	6e c0       	rjmp	.+220    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
    150c:	2d 81       	ldd	r18, Y+5	; 0x05
    150e:	3e 81       	ldd	r19, Y+6	; 0x06
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	21 f1       	breq	.+72     	; 0x155e <EXTI_VoidTriggerEdge+0x174>
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	71 f1       	breq	.+92     	; 0x157c <EXTI_VoidTriggerEdge+0x192>
    1520:	63 c0       	rjmp	.+198    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                {
                     case  LOW_LEVEL:
                        CLEAR_BIT(MCUCR,ISC10);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8b 7f       	andi	r24, 0xFB	; 251
    152e:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	87 7f       	andi	r24, 0xF7	; 247
    153c:	8c 93       	st	X, r24
    153e:	54 c0       	rjmp	.+168    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  ANY_LOGICAL_CHANGE :
                        SET_BIT(MCUCR,ISC10);
    1540:	a5 e5       	ldi	r26, 0x55	; 85
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e5       	ldi	r30, 0x55	; 85
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	84 60       	ori	r24, 0x04	; 4
    154c:	8c 93       	st	X, r24
                        CLEAR_BIT(MCUCR,ISC11);
    154e:	a5 e5       	ldi	r26, 0x55	; 85
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e5 e5       	ldi	r30, 0x55	; 85
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	87 7f       	andi	r24, 0xF7	; 247
    155a:	8c 93       	st	X, r24
    155c:	45 c0       	rjmp	.+138    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCR,ISC10);
    155e:	a5 e5       	ldi	r26, 0x55	; 85
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 e5       	ldi	r30, 0x55	; 85
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8b 7f       	andi	r24, 0xFB	; 251
    156a:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    156c:	a5 e5       	ldi	r26, 0x55	; 85
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e5 e5       	ldi	r30, 0x55	; 85
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 60       	ori	r24, 0x08	; 8
    1578:	8c 93       	st	X, r24
    157a:	36 c0       	rjmp	.+108    	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCR,ISC10);
    157c:	a5 e5       	ldi	r26, 0x55	; 85
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e5 e5       	ldi	r30, 0x55	; 85
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	84 60       	ori	r24, 0x04	; 4
    1588:	8c 93       	st	X, r24
                        SET_BIT(MCUCR,ISC11);
    158a:	a5 e5       	ldi	r26, 0x55	; 85
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e5       	ldi	r30, 0x55	; 85
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	88 60       	ori	r24, 0x08	; 8
    1596:	8c 93       	st	X, r24
    1598:	27 c0       	rjmp	.+78     	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                     default:
                         break;
                }
        break;
        case  EXTI_INT2:
                switch (Copy_U8Edge)
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3c 83       	std	Y+4, r19	; 0x04
    15a2:	2b 83       	std	Y+3, r18	; 0x03
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	91 05       	cpc	r25, r1
    15ac:	31 f0       	breq	.+12     	; 0x15ba <EXTI_VoidTriggerEdge+0x1d0>
    15ae:	2b 81       	ldd	r18, Y+3	; 0x03
    15b0:	3c 81       	ldd	r19, Y+4	; 0x04
    15b2:	23 30       	cpi	r18, 0x03	; 3
    15b4:	31 05       	cpc	r19, r1
    15b6:	49 f0       	breq	.+18     	; 0x15ca <EXTI_VoidTriggerEdge+0x1e0>
    15b8:	10 c0       	rjmp	.+32     	; 0x15da <EXTI_VoidTriggerEdge+0x1f0>
                {
            
                     case  FALLING_EDGE :
                        CLEAR_BIT(MCUCSR,ISC2);
    15ba:	a4 e5       	ldi	r26, 0x54	; 84
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e4 e5       	ldi	r30, 0x54	; 84
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7b       	andi	r24, 0xBF	; 191
    15c6:	8c 93       	st	X, r24
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                        
                         break;
                    case  RISING_EDGE :
                        SET_BIT(MCUCSR,ISC2);
    15ca:	a4 e5       	ldi	r26, 0x54	; 84
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e4 e5       	ldi	r30, 0x54	; 84
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 64       	ori	r24, 0x40	; 64
    15d6:	8c 93       	st	X, r24
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <EXTI_VoidTriggerEdge+0x1fe>
                         break;
                
                     default:
                            CLEAR_BIT(MCUCSR,ISC2);
    15da:	a4 e5       	ldi	r26, 0x54	; 84
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e4 e5       	ldi	r30, 0x54	; 84
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8f 7b       	andi	r24, 0xBF	; 191
    15e6:	8c 93       	st	X, r24
            break;
    
        default:
        break;
    }
}
    15e8:	2a 96       	adiw	r28, 0x0a	; 10
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <EXTI_VoidINT0SetCallBack>:

//function to take adress of user function  for EXTI0
void EXTI_VoidINT0SetCallBack(void (*NotificationFunction) (void))
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <EXTI_VoidINT0SetCallBack+0x6>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user 
    EXTI_PVoidINT0NotificationFunction=NotificationFunction ;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	90 93 85 00 	sts	0x0085, r25
    1610:	80 93 84 00 	sts	0x0084, r24
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <__vector_1>:
//TELL LINKER OPTMIZER that function change within hardware donts delete it  
void __vector_1 (void)  __attribute__ ((signal)) ; 
//function implemention that takes global pointer to function and execute it  
// we can make macro to #define EXTI0_vector    __vector_1
void __vector_1 (void)
{   
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    //execute function 
    EXTI_PVoidINT0NotificationFunction();
    1648:	e0 91 84 00 	lds	r30, 0x0084
    164c:	f0 91 85 00 	lds	r31, 0x0085
    1650:	09 95       	icall
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <EXTI_VoidINT1SetCallBack>:

//function to take adress of user function  for EXTI1
void EXTI_VoidINT1SetCallBack(void (*NotificationFunction) (void))
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <EXTI_VoidINT1SetCallBack+0x6>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01
    //assing global pointer to function to address that take from user
    EXTI_PVoidINT1NotificationFunction=NotificationFunction ;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	90 93 87 00 	sts	0x0087, r25
    168e:	80 93 86 00 	sts	0x0086, r24
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <__vector_2>:
//ISR for INT1
//TELL LINKER OPTMIZER that function change within hardware donts delete it
void __vector_2(void) __attribute__((signal));
//function implemention that takes global pointer to function and execute it 
void __vector_2(void)
{
    169c:	1f 92       	push	r1
    169e:	0f 92       	push	r0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    //execute function
    EXTI_PVoidINT1NotificationFunction();
    16c6:	e0 91 86 00 	lds	r30, 0x0086
    16ca:	f0 91 87 00 	lds	r31, 0x0087
    16ce:	09 95       	icall
}
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <EXTI_VoidINT2SetCallBack>:

void EXTI_VoidINT2SetCallBack (void (*NotificationFunction) (void))
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <EXTI_VoidINT2SetCallBack+0x6>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    EXTI_PVoidINT2NotificationFunction=NotificationFunction;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	90 93 89 00 	sts	0x0089, r25
    170c:	80 93 88 00 	sts	0x0088, r24
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <__vector_3>:

void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	2f 93       	push	r18
    1726:	3f 93       	push	r19
    1728:	4f 93       	push	r20
    172a:	5f 93       	push	r21
    172c:	6f 93       	push	r22
    172e:	7f 93       	push	r23
    1730:	8f 93       	push	r24
    1732:	9f 93       	push	r25
    1734:	af 93       	push	r26
    1736:	bf 93       	push	r27
    1738:	ef 93       	push	r30
    173a:	ff 93       	push	r31
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    EXTI_PVoidINT2NotificationFunction();
    1744:	e0 91 88 00 	lds	r30, 0x0088
    1748:	f0 91 89 00 	lds	r31, 0x0089
    174c:	09 95       	icall
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	ff 91       	pop	r31
    1754:	ef 91       	pop	r30
    1756:	bf 91       	pop	r27
    1758:	af 91       	pop	r26
    175a:	9f 91       	pop	r25
    175c:	8f 91       	pop	r24
    175e:	7f 91       	pop	r23
    1760:	6f 91       	pop	r22
    1762:	5f 91       	pop	r21
    1764:	4f 91       	pop	r20
    1766:	3f 91       	pop	r19
    1768:	2f 91       	pop	r18
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <DIO_voidSetPinDirection>:
/*Self files INclusions in the same sequence  */
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"
void 	DIO_voidSetPinDirection(u8 Copy_U8PortNmame , u8 Copy_u8PinNumber , u8 Copy_u8Direction)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <DIO_voidSetPinDirection+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_voidSetPinDirection+0x8>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	6a 83       	std	Y+2, r22	; 0x02
    1786:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_U8PortNmame)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3d 83       	std	Y+5, r19	; 0x05
    1790:	2c 83       	std	Y+4, r18	; 0x04
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <DIO_voidSetPinDirection+0x2a>
    179c:	47 c0       	rjmp	.+142    	; 0x182c <DIO_voidSetPinDirection+0xb8>
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <DIO_voidSetPinDirection+0x3e>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	71 f0       	breq	.+28     	; 0x17cc <DIO_voidSetPinDirection+0x58>
    17b0:	cb c0       	rjmp	.+406    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
    17b2:	2c 81       	ldd	r18, Y+4	; 0x04
    17b4:	3d 81       	ldd	r19, Y+5	; 0x05
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <DIO_voidSetPinDirection+0x4a>
    17bc:	67 c0       	rjmp	.+206    	; 0x188c <DIO_voidSetPinDirection+0x118>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	91 05       	cpc	r25, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <DIO_voidSetPinDirection+0x56>
    17c8:	91 c0       	rjmp	.+290    	; 0x18ec <DIO_voidSetPinDirection+0x178>
    17ca:	be c0       	rjmp	.+380    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	a1 f4       	brne	.+40     	; 0x17fa <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA , Copy_u8PinNumber);
    17d2:	aa e3       	ldi	r26, 0x3A	; 58
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ea e3       	ldi	r30, 0x3A	; 58
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_voidSetPinDirection+0x7c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_voidSetPinDirection+0x78>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	a7 c0       	rjmp	.+334    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	88 23       	and	r24, r24
    17fe:	09 f0       	breq	.+2      	; 0x1802 <DIO_voidSetPinDirection+0x8e>
    1800:	a3 c0       	rjmp	.+326    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRA , Copy_u8PinNumber);
    1802:	aa e3       	ldi	r26, 0x3A	; 58
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ea e3       	ldi	r30, 0x3A	; 58
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_voidSetPinDirection+0xac>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <DIO_voidSetPinDirection+0xa8>
    1824:	80 95       	com	r24
    1826:	84 23       	and	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	8e c0       	rjmp	.+284    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	a1 f4       	brne	.+40     	; 0x185a <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB , Copy_u8PinNumber);
    1832:	a7 e3       	ldi	r26, 0x37	; 55
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e7 e3       	ldi	r30, 0x37	; 55
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_voidSetPinDirection+0xdc>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_voidSetPinDirection+0xd8>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	77 c0       	rjmp	.+238    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 23       	and	r24, r24
    185e:	09 f0       	breq	.+2      	; 0x1862 <DIO_voidSetPinDirection+0xee>
    1860:	73 c0       	rjmp	.+230    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRB , Copy_u8PinNumber);
    1862:	a7 e3       	ldi	r26, 0x37	; 55
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e3       	ldi	r30, 0x37	; 55
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_voidSetPinDirection+0x10c>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_voidSetPinDirection+0x108>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	5e c0       	rjmp	.+188    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	a1 f4       	brne	.+40     	; 0x18ba <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC , Copy_u8PinNumber);
    1892:	a4 e3       	ldi	r26, 0x34	; 52
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e4 e3       	ldi	r30, 0x34	; 52
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_voidSetPinDirection+0x13c>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_voidSetPinDirection+0x138>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	47 c0       	rjmp	.+142    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	88 23       	and	r24, r24
    18be:	09 f0       	breq	.+2      	; 0x18c2 <DIO_voidSetPinDirection+0x14e>
    18c0:	43 c0       	rjmp	.+134    	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRC , Copy_u8PinNumber);
    18c2:	a4 e3       	ldi	r26, 0x34	; 52
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e4 e3       	ldi	r30, 0x34	; 52
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_voidSetPinDirection+0x16c>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_voidSetPinDirection+0x168>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	2e c0       	rjmp	.+92     	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			{
				// no thing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	a1 f4       	brne	.+40     	; 0x191a <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD , Copy_u8PinNumber);
    18f2:	a1 e3       	ldi	r26, 0x31	; 49
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_voidSetPinDirection+0x19c>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_voidSetPinDirection+0x198>
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	88 23       	and	r24, r24
    191e:	a1 f4       	brne	.+40     	; 0x1948 <DIO_voidSetPinDirection+0x1d4>
			{
				CLEAR_BIT(DDRD , Copy_u8PinNumber);
    1920:	a1 e3       	ldi	r26, 0x31	; 49
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e1 e3       	ldi	r30, 0x31	; 49
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_voidSetPinDirection+0x1ca>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_voidSetPinDirection+0x1c6>
    1942:	80 95       	com	r24
    1944:	84 23       	and	r24, r20
    1946:	8c 93       	st	X, r24
	
	default:
			//do no thing 
		break;
	}
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber , u8 Copy_U8PinState)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	2d 97       	sbiw	r28, 0x0d	; 13
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	6a 83       	std	Y+2, r22	; 0x02
    1970:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8PortNumber)
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	3d 87       	std	Y+13, r19	; 0x0d
    197a:	2c 87       	std	Y+12, r18	; 0x0c
    197c:	8c 85       	ldd	r24, Y+12	; 0x0c
    197e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <DIO_VoidSetPinValue+0x30>
    1986:	4f c0       	rjmp	.+158    	; 0x1a26 <DIO_VoidSetPinValue+0xce>
    1988:	2c 85       	ldd	r18, Y+12	; 0x0c
    198a:	3d 85       	ldd	r19, Y+13	; 0x0d
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	2c f4       	brge	.+10     	; 0x199c <DIO_VoidSetPinValue+0x44>
    1992:	8c 85       	ldd	r24, Y+12	; 0x0c
    1994:	9d 85       	ldd	r25, Y+13	; 0x0d
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	71 f0       	breq	.+28     	; 0x19b6 <DIO_VoidSetPinValue+0x5e>
    199a:	ec c0       	rjmp	.+472    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
    199c:	2c 85       	ldd	r18, Y+12	; 0x0c
    199e:	3d 85       	ldd	r19, Y+13	; 0x0d
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <DIO_VoidSetPinValue+0x50>
    19a6:	77 c0       	rjmp	.+238    	; 0x1a96 <DIO_VoidSetPinValue+0x13e>
    19a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    19aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    19ac:	83 30       	cpi	r24, 0x03	; 3
    19ae:	91 05       	cpc	r25, r1
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <DIO_VoidSetPinValue+0x5c>
    19b2:	a9 c0       	rjmp	.+338    	; 0x1b06 <DIO_VoidSetPinValue+0x1ae>
    19b4:	df c0       	rjmp	.+446    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
	{
		case DIO_PORTA :
			switch(Copy_U8PinState)
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	3b 87       	std	Y+11, r19	; 0x0b
    19be:	2a 87       	std	Y+10, r18	; 0x0a
    19c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	31 f0       	breq	.+12     	; 0x19d4 <DIO_VoidSetPinValue+0x7c>
    19c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    19ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    19cc:	21 30       	cpi	r18, 0x01	; 1
    19ce:	31 05       	cpc	r19, r1
    19d0:	b1 f0       	breq	.+44     	; 0x19fe <DIO_VoidSetPinValue+0xa6>
    19d2:	d0 c0       	rjmp	.+416    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTA , Copy_u8PinNumber );
    19d4:	ab e3       	ldi	r26, 0x3B	; 59
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_VoidSetPinValue+0x9a>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_VoidSetPinValue+0x96>
    19f6:	80 95       	com	r24
    19f8:	84 23       	and	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	bb c0       	rjmp	.+374    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTA , Copy_u8PinNumber );
    19fe:	ab e3       	ldi	r26, 0x3B	; 59
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	eb e3       	ldi	r30, 0x3B	; 59
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <DIO_VoidSetPinValue+0xc4>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <DIO_VoidSetPinValue+0xc0>
    1a20:	84 2b       	or	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	a7 c0       	rjmp	.+334    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTB :
			switch(Copy_U8PinState)
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	39 87       	std	Y+9, r19	; 0x09
    1a2e:	28 87       	std	Y+8, r18	; 0x08
    1a30:	88 85       	ldd	r24, Y+8	; 0x08
    1a32:	99 85       	ldd	r25, Y+9	; 0x09
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <DIO_VoidSetPinValue+0xec>
    1a38:	28 85       	ldd	r18, Y+8	; 0x08
    1a3a:	39 85       	ldd	r19, Y+9	; 0x09
    1a3c:	21 30       	cpi	r18, 0x01	; 1
    1a3e:	31 05       	cpc	r19, r1
    1a40:	b1 f0       	breq	.+44     	; 0x1a6e <DIO_VoidSetPinValue+0x116>
    1a42:	98 c0       	rjmp	.+304    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTB , Copy_u8PinNumber );
    1a44:	a8 e3       	ldi	r26, 0x38	; 56
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e8 e3       	ldi	r30, 0x38	; 56
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_VoidSetPinValue+0x10a>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <DIO_VoidSetPinValue+0x106>
    1a66:	80 95       	com	r24
    1a68:	84 23       	and	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	83 c0       	rjmp	.+262    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTB , Copy_u8PinNumber );
    1a6e:	a8 e3       	ldi	r26, 0x38	; 56
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e8 e3       	ldi	r30, 0x38	; 56
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_VoidSetPinValue+0x134>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_VoidSetPinValue+0x130>
    1a90:	84 2b       	or	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	6f c0       	rjmp	.+222    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTC :
			switch(Copy_U8PinState)
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3f 83       	std	Y+7, r19	; 0x07
    1a9e:	2e 83       	std	Y+6, r18	; 0x06
    1aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa2:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <DIO_VoidSetPinValue+0x15c>
    1aa8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aaa:	3f 81       	ldd	r19, Y+7	; 0x07
    1aac:	21 30       	cpi	r18, 0x01	; 1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	b1 f0       	breq	.+44     	; 0x1ade <DIO_VoidSetPinValue+0x186>
    1ab2:	60 c0       	rjmp	.+192    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTC , Copy_u8PinNumber );
    1ab4:	a5 e3       	ldi	r26, 0x35	; 53
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e3       	ldi	r30, 0x35	; 53
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_VoidSetPinValue+0x17a>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_VoidSetPinValue+0x176>
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	4b c0       	rjmp	.+150    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTC , Copy_u8PinNumber );
    1ade:	a5 e3       	ldi	r26, 0x35	; 53
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e3       	ldi	r30, 0x35	; 53
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_VoidSetPinValue+0x1a4>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_VoidSetPinValue+0x1a0>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	37 c0       	rjmp	.+110    	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
				break;
			}
		break;
		case DIO_PORTD :
			switch(Copy_U8PinState)
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	3d 83       	std	Y+5, r19	; 0x05
    1b0e:	2c 83       	std	Y+4, r18	; 0x04
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <DIO_VoidSetPinValue+0x1cc>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	21 30       	cpi	r18, 0x01	; 1
    1b1e:	31 05       	cpc	r19, r1
    1b20:	b1 f0       	breq	.+44     	; 0x1b4e <DIO_VoidSetPinValue+0x1f6>
    1b22:	28 c0       	rjmp	.+80     	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
			{
				case LOW :
					CLEAR_BIT(PORTD , Copy_u8PinNumber );
    1b24:	a2 e3       	ldi	r26, 0x32	; 50
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e2 e3       	ldi	r30, 0x32	; 50
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 2e       	mov	r0, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_VoidSetPinValue+0x1ea>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_VoidSetPinValue+0x1e6>
    1b46:	80 95       	com	r24
    1b48:	84 23       	and	r24, r20
    1b4a:	8c 93       	st	X, r24
    1b4c:	13 c0       	rjmp	.+38     	; 0x1b74 <DIO_VoidSetPinValue+0x21c>
				break;
				case HIGH :
					SET_BIT(PORTD , Copy_u8PinNumber );
    1b4e:	a2 e3       	ldi	r26, 0x32	; 50
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e2 e3       	ldi	r30, 0x32	; 50
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_VoidSetPinValue+0x214>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_VoidSetPinValue+0x210>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
	
	default:
			// Do nothing 
		break;
	}
}
    1b74:	2d 96       	adiw	r28, 0x0d	; 13
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <DIO_VoidGetPinValue>:

u8  DIO_VoidGetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber)
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <DIO_VoidGetPinValue+0x6>
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <DIO_VoidGetPinValue+0x8>
    1b8e:	0f 92       	push	r0
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	8a 83       	std	Y+2, r24	; 0x02
    1b96:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue =0 ;
    1b98:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PortName)
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	3d 83       	std	Y+5, r19	; 0x05
    1ba2:	2c 83       	std	Y+4, r18	; 0x04
    1ba4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ba6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ba8:	41 30       	cpi	r20, 0x01	; 1
    1baa:	51 05       	cpc	r21, r1
    1bac:	41 f1       	breq	.+80     	; 0x1bfe <DIO_VoidGetPinValue+0x78>
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	82 30       	cpi	r24, 0x02	; 2
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	34 f4       	brge	.+12     	; 0x1bc4 <DIO_VoidGetPinValue+0x3e>
    1bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bba:	3d 81       	ldd	r19, Y+5	; 0x05
    1bbc:	21 15       	cp	r18, r1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	61 f0       	breq	.+24     	; 0x1bda <DIO_VoidGetPinValue+0x54>
    1bc2:	52 c0       	rjmp	.+164    	; 0x1c68 <DIO_VoidGetPinValue+0xe2>
    1bc4:	4c 81       	ldd	r20, Y+4	; 0x04
    1bc6:	5d 81       	ldd	r21, Y+5	; 0x05
    1bc8:	42 30       	cpi	r20, 0x02	; 2
    1bca:	51 05       	cpc	r21, r1
    1bcc:	51 f1       	breq	.+84     	; 0x1c22 <DIO_VoidGetPinValue+0x9c>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	b9 f1       	breq	.+110    	; 0x1c46 <DIO_VoidGetPinValue+0xc0>
    1bd8:	47 c0       	rjmp	.+142    	; 0x1c68 <DIO_VoidGetPinValue+0xe2>
	{
		case DIO_PORTA :
			Local_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a9 01       	movw	r20, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_VoidGetPinValue+0x6c>
    1bee:	55 95       	asr	r21
    1bf0:	47 95       	ror	r20
    1bf2:	8a 95       	dec	r24
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_VoidGetPinValue+0x68>
    1bf6:	ca 01       	movw	r24, r20
    1bf8:	81 70       	andi	r24, 0x01	; 1
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	35 c0       	rjmp	.+106    	; 0x1c68 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTB :
			Local_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a9 01       	movw	r20, r18
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <DIO_VoidGetPinValue+0x90>
    1c12:	55 95       	asr	r21
    1c14:	47 95       	ror	r20
    1c16:	8a 95       	dec	r24
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <DIO_VoidGetPinValue+0x8c>
    1c1a:	ca 01       	movw	r24, r20
    1c1c:	81 70       	andi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	23 c0       	rjmp	.+70     	; 0x1c68 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTC :
			Local_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    1c22:	e5 e3       	ldi	r30, 0x35	; 53
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a9 01       	movw	r20, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_VoidGetPinValue+0xb4>
    1c36:	55 95       	asr	r21
    1c38:	47 95       	ror	r20
    1c3a:	8a 95       	dec	r24
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <DIO_VoidGetPinValue+0xb0>
    1c3e:	ca 01       	movw	r24, r20
    1c40:	81 70       	andi	r24, 0x01	; 1
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	11 c0       	rjmp	.+34     	; 0x1c68 <DIO_VoidGetPinValue+0xe2>
		break;
		case DIO_PORTD :
			Local_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    1c46:	e2 e3       	ldi	r30, 0x32	; 50
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a9 01       	movw	r20, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_VoidGetPinValue+0xd8>
    1c5a:	55 95       	asr	r21
    1c5c:	47 95       	ror	r20
    1c5e:	8a 95       	dec	r24
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_VoidGetPinValue+0xd4>
    1c62:	ca 01       	movw	r24, r20
    1c64:	81 70       	andi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01
	
		default:
				//Do nothing
			break;
	}
	return Local_u8PinValue;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_U8PortName , u8  Copy_U8PortState)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <DIO_VoidSetPortDirection+0x6>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <DIO_VoidSetPortDirection+0x8>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	3c 83       	std	Y+4, r19	; 0x04
    1c92:	2b 83       	std	Y+3, r18	; 0x03
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	21 f1       	breq	.+72     	; 0x1ce6 <DIO_VoidSetPortDirection+0x6c>
    1c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	2c f4       	brge	.+10     	; 0x1cb2 <DIO_VoidSetPortDirection+0x38>
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	61 f0       	breq	.+24     	; 0x1cc8 <DIO_VoidSetPortDirection+0x4e>
    1cb0:	46 c0       	rjmp	.+140    	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	22 30       	cpi	r18, 0x02	; 2
    1cb8:	31 05       	cpc	r19, r1
    1cba:	21 f1       	breq	.+72     	; 0x1d04 <DIO_VoidSetPortDirection+0x8a>
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	71 f1       	breq	.+92     	; 0x1d22 <DIO_VoidSetPortDirection+0xa8>
    1cc6:	3b c0       	rjmp	.+118    	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
	{
		case DIO_PORTA :
			if(Copy_U8PortState==OUTPUT)
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	29 f4       	brne	.+10     	; 0x1cd8 <DIO_VoidSetPortDirection+0x5e>
			{
				SET_REG(DDRA);
    1cce:	ea e3       	ldi	r30, 0x3A	; 58
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	80 83       	st	Z, r24
    1cd6:	33 c0       	rjmp	.+102    	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	88 23       	and	r24, r24
    1cdc:	81 f5       	brne	.+96     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRA);
    1cde:	ea e3       	ldi	r30, 0x3A	; 58
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	10 82       	st	Z, r1
    1ce4:	2c c0       	rjmp	.+88     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTB :
			if(Copy_U8PortState==OUTPUT)
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <DIO_VoidSetPortDirection+0x7c>
			{
				SET_REG(DDRB);
    1cec:	e7 e3       	ldi	r30, 0x37	; 55
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	80 83       	st	Z, r24
    1cf4:	24 c0       	rjmp	.+72     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	88 23       	and	r24, r24
    1cfa:	09 f5       	brne	.+66     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRB);
    1cfc:	e7 e3       	ldi	r30, 0x37	; 55
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	10 82       	st	Z, r1
    1d02:	1d c0       	rjmp	.+58     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTC :
			if(Copy_U8PortState==OUTPUT)
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	29 f4       	brne	.+10     	; 0x1d14 <DIO_VoidSetPortDirection+0x9a>
			{
				SET_REG(DDRC);
    1d0a:	e4 e3       	ldi	r30, 0x34	; 52
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	80 83       	st	Z, r24
    1d12:	15 c0       	rjmp	.+42     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	88 23       	and	r24, r24
    1d18:	91 f4       	brne	.+36     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRC);
    1d1a:	e4 e3       	ldi	r30, 0x34	; 52
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	10 82       	st	Z, r1
    1d20:	0e c0       	rjmp	.+28     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			{
				//do no thing
			}
		break;
		case DIO_PORTD :
			if(Copy_U8PortState==OUTPUT)
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	29 f4       	brne	.+10     	; 0x1d32 <DIO_VoidSetPortDirection+0xb8>
			{
				SET_REG(DDRD);
    1d28:	e1 e3       	ldi	r30, 0x31	; 49
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	80 83       	st	Z, r24
    1d30:	06 c0       	rjmp	.+12     	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			}
			else if (Copy_U8PortState==INPUT)
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	88 23       	and	r24, r24
    1d36:	19 f4       	brne	.+6      	; 0x1d3e <DIO_VoidSetPortDirection+0xc4>
			{
				CLEAR_REG(DDRD);
    1d38:	e1 e3       	ldi	r30, 0x31	; 49
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	10 82       	st	Z, r1
		default:
			//do no thing
			break;

	}
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <DIO_VOidTogglePortValue>:
void DIO_VOidTogglePortValue(u8 Copy_U8PortName)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <DIO_VOidTogglePortValue+0x6>
    1d52:	0f 92       	push	r0
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3b 83       	std	Y+3, r19	; 0x03
    1d62:	2a 83       	std	Y+2, r18	; 0x02
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	e9 f0       	breq	.+58     	; 0x1da8 <DIO_VOidTogglePortValue+0x5c>
    1d6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d70:	3b 81       	ldd	r19, Y+3	; 0x03
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	31 05       	cpc	r19, r1
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <DIO_VOidTogglePortValue+0x36>
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <DIO_VOidTogglePortValue+0x4c>
    1d80:	2a c0       	rjmp	.+84     	; 0x1dd6 <DIO_VOidTogglePortValue+0x8a>
    1d82:	2a 81       	ldd	r18, Y+2	; 0x02
    1d84:	3b 81       	ldd	r19, Y+3	; 0x03
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	b1 f0       	breq	.+44     	; 0x1db8 <DIO_VOidTogglePortValue+0x6c>
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	c9 f0       	breq	.+50     	; 0x1dc8 <DIO_VOidTogglePortValue+0x7c>
    1d96:	1f c0       	rjmp	.+62     	; 0x1dd6 <DIO_VOidTogglePortValue+0x8a>
	{
		case DIO_PORTA :
			TOGGLE_REG(PORTA);
    1d98:	ab e3       	ldi	r26, 0x3B	; 59
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	eb e3       	ldi	r30, 0x3B	; 59
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 95       	com	r24
    1da4:	8c 93       	st	X, r24
    1da6:	17 c0       	rjmp	.+46     	; 0x1dd6 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTB :
			TOGGLE_REG(PORTB);
    1da8:	a8 e3       	ldi	r26, 0x38	; 56
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e8 e3       	ldi	r30, 0x38	; 56
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 95       	com	r24
    1db4:	8c 93       	st	X, r24
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTC :
			TOGGLE_REG(PORTC);
    1db8:	a5 e3       	ldi	r26, 0x35	; 53
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e5 e3       	ldi	r30, 0x35	; 53
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 95       	com	r24
    1dc4:	8c 93       	st	X, r24
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <DIO_VOidTogglePortValue+0x8a>
		break;
		case DIO_PORTD :
			TOGGLE_REG(PORTD);
    1dc8:	a2 e3       	ldi	r26, 0x32	; 50
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e2 e3       	ldi	r30, 0x32	; 50
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 95       	com	r24
    1dd4:	8c 93       	st	X, r24
			//do no thing
			break;

	}

}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <DIO_VoidSetSpacificvalue>:
void DIO_VoidSetSpacificvalue(u8 Copy_U8PortName , u8 Copy_U8Value)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <DIO_VoidSetSpacificvalue+0x6>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <DIO_VoidSetSpacificvalue+0x8>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	3c 83       	std	Y+4, r19	; 0x04
    1dfa:	2b 83       	std	Y+3, r18	; 0x03
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	91 05       	cpc	r25, r1
    1e04:	d1 f0       	breq	.+52     	; 0x1e3a <DIO_VoidSetSpacificvalue+0x58>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <DIO_VoidSetSpacificvalue+0x38>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <DIO_VoidSetSpacificvalue+0x4e>
    1e18:	1e c0       	rjmp	.+60     	; 0x1e56 <DIO_VoidSetSpacificvalue+0x74>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	81 f0       	breq	.+32     	; 0x1e44 <DIO_VoidSetSpacificvalue+0x62>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	81 f0       	breq	.+32     	; 0x1e4e <DIO_VoidSetSpacificvalue+0x6c>
    1e2e:	13 c0       	rjmp	.+38     	; 0x1e56 <DIO_VoidSetSpacificvalue+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(PORTA,Copy_U8Value);
    1e30:	eb e3       	ldi	r30, 0x3B	; 59
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 83       	st	Z, r24
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(PORTB,Copy_U8Value);
    1e3a:	e8 e3       	ldi	r30, 0x38	; 56
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	80 83       	st	Z, r24
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(PORTC,Copy_U8Value);
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	80 83       	st	Z, r24
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <DIO_VoidSetSpacificvalue+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(PORTD,Copy_U8Value);
    1e4e:	e2 e3       	ldi	r30, 0x32	; 50
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <DIO_U8GetPortValue>:
u8 DIO_U8GetPortValue(u8 Copy_U8PortName )
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <DIO_U8GetPortValue+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <DIO_U8GetPortValue+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8PortName)
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3c 83       	std	Y+4, r19	; 0x04
    1e7c:	2b 83       	std	Y+3, r18	; 0x03
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	d1 f0       	breq	.+52     	; 0x1ebc <DIO_U8GetPortValue+0x58>
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <DIO_U8GetPortValue+0x38>
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	61 f0       	breq	.+24     	; 0x1eb2 <DIO_U8GetPortValue+0x4e>
    1e9a:	1f c0       	rjmp	.+62     	; 0x1eda <DIO_U8GetPortValue+0x76>
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	81 f0       	breq	.+32     	; 0x1ec6 <DIO_U8GetPortValue+0x62>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	91 05       	cpc	r25, r1
    1eae:	81 f0       	breq	.+32     	; 0x1ed0 <DIO_U8GetPortValue+0x6c>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <DIO_U8GetPortValue+0x76>
	{
		case DIO_PORTA :
			return PINA;
    1eb2:	e9 e3       	ldi	r30, 0x39	; 57
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	90 81       	ld	r25, Z
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	10 c0       	rjmp	.+32     	; 0x1edc <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTB :
			return PINB ;
    1ebc:	e6 e3       	ldi	r30, 0x36	; 54
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	20 81       	ld	r18, Z
    1ec2:	2a 83       	std	Y+2, r18	; 0x02
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTC :
			return PINC;
    1ec6:	e3 e3       	ldi	r30, 0x33	; 51
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	30 81       	ld	r19, Z
    1ecc:	3a 83       	std	Y+2, r19	; 0x02
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <DIO_U8GetPortValue+0x78>
		break;
		case DIO_PORTD :
			return PIND;
    1ed0:	e0 e3       	ldi	r30, 0x30	; 48
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <DIO_U8GetPortValue+0x78>
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_U8GetPortValue+0x7c>
			//do no thing
			break;

	}

}
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	9d 83       	std	Y+5, r25	; 0x05
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <DIO_VoidSetPortSpecificDirection>:
void DIO_VoidSetPortSpecificDirection(u8 Copy_U8PortName, u8 Copy_U8SpectificDirection)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <DIO_VoidSetPortSpecificDirection+0x6>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <DIO_VoidSetPortSpecificDirection+0x8>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8PortName)
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3c 83       	std	Y+4, r19	; 0x04
    1f0a:	2b 83       	std	Y+3, r18	; 0x03
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	d1 f0       	breq	.+52     	; 0x1f4a <DIO_VoidSetPortSpecificDirection+0x58>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <DIO_VoidSetPortSpecificDirection+0x38>
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	61 f0       	breq	.+24     	; 0x1f40 <DIO_VoidSetPortSpecificDirection+0x4e>
    1f28:	1e c0       	rjmp	.+60     	; 0x1f66 <DIO_VoidSetPortSpecificDirection+0x74>
    1f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	81 f0       	breq	.+32     	; 0x1f54 <DIO_VoidSetPortSpecificDirection+0x62>
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	81 f0       	breq	.+32     	; 0x1f5e <DIO_VoidSetPortSpecificDirection+0x6c>
    1f3e:	13 c0       	rjmp	.+38     	; 0x1f66 <DIO_VoidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA :
			ASSIGN_REG(DDRA,Copy_U8SpectificDirection);
    1f40:	ea e3       	ldi	r30, 0x3A	; 58
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	80 83       	st	Z, r24
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB :
			ASSIGN_REG(DDRB,Copy_U8SpectificDirection);
    1f4a:	e7 e3       	ldi	r30, 0x37	; 55
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	80 83       	st	Z, r24
    1f52:	09 c0       	rjmp	.+18     	; 0x1f66 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC :
			ASSIGN_REG(DDRC,Copy_U8SpectificDirection);
    1f54:	e4 e3       	ldi	r30, 0x34	; 52
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	80 83       	st	Z, r24
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <DIO_VoidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD :
			ASSIGN_REG(DDRD,Copy_U8SpectificDirection);
    1f5e:	e1 e3       	ldi	r30, 0x31	; 49
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	80 83       	st	Z, r24
			//do no thing
			break;

	}

}
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <DIO_VoidTogglePinValu>:
void DIO_VoidTogglePinValu(u8 Copy_U8PortName ,u8 Copy_u8PinNumber ) 
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <DIO_VoidTogglePinValu+0x6>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <DIO_VoidTogglePinValu+0x8>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8PortName)
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	3c 83       	std	Y+4, r19	; 0x04
    1f8c:	2b 83       	std	Y+3, r18	; 0x03
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	91 05       	cpc	r25, r1
    1f96:	49 f1       	breq	.+82     	; 0x1fea <DIO_VoidTogglePinValu+0x76>
    1f98:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9c:	22 30       	cpi	r18, 0x02	; 2
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <DIO_VoidTogglePinValu+0x38>
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	61 f0       	breq	.+24     	; 0x1fc2 <DIO_VoidTogglePinValu+0x4e>
    1faa:	5a c0       	rjmp	.+180    	; 0x2060 <DIO_VoidTogglePinValu+0xec>
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb0:	22 30       	cpi	r18, 0x02	; 2
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	71 f1       	breq	.+92     	; 0x2012 <DIO_VoidTogglePinValu+0x9e>
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	83 30       	cpi	r24, 0x03	; 3
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	e9 f1       	breq	.+122    	; 0x203a <DIO_VoidTogglePinValu+0xc6>
    1fc0:	4f c0       	rjmp	.+158    	; 0x2060 <DIO_VoidTogglePinValu+0xec>
	{
	case DIO_PORTA:
			TOGGLE_BIT(PORTA ,Copy_u8PinNumber);
    1fc2:	ab e3       	ldi	r26, 0x3B	; 59
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	eb e3       	ldi	r30, 0x3B	; 59
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	48 2f       	mov	r20, r24
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 2e       	mov	r0, r18
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <DIO_VoidTogglePinValu+0x6c>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <DIO_VoidTogglePinValu+0x68>
    1fe4:	84 27       	eor	r24, r20
    1fe6:	8c 93       	st	X, r24
    1fe8:	3b c0       	rjmp	.+118    	; 0x2060 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB ,Copy_u8PinNumber);
    1fea:	a8 e3       	ldi	r26, 0x38	; 56
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e8 e3       	ldi	r30, 0x38	; 56
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 2e       	mov	r0, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <DIO_VoidTogglePinValu+0x94>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <DIO_VoidTogglePinValu+0x90>
    200c:	84 27       	eor	r24, r20
    200e:	8c 93       	st	X, r24
    2010:	27 c0       	rjmp	.+78     	; 0x2060 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC ,Copy_u8PinNumber);
    2012:	a5 e3       	ldi	r26, 0x35	; 53
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e3       	ldi	r30, 0x35	; 53
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	48 2f       	mov	r20, r24
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 2e       	mov	r0, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <DIO_VoidTogglePinValu+0xbc>
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <DIO_VoidTogglePinValu+0xb8>
    2034:	84 27       	eor	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	13 c0       	rjmp	.+38     	; 0x2060 <DIO_VoidTogglePinValu+0xec>
		break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD ,Copy_u8PinNumber);
    203a:	a2 e3       	ldi	r26, 0x32	; 50
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e2 e3       	ldi	r30, 0x32	; 50
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_VoidTogglePinValu+0xe4>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_VoidTogglePinValu+0xe0>
    205c:	84 27       	eor	r24, r20
    205e:	8c 93       	st	X, r24
		break;
	
	default:
		break;
	}
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <ADC_VoidInit>:

static void (*ADC_pvoidNotificationFunction)(void) = NULL;
volatile   u16  ADC_Digital_Value ;

void ADC_VoidInit(void)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    // ADC ENABLE BIT 
    #if ADC_ENABLE == ENABLE
        SET_BIT(ADCSRA,ADEN);
    2076:	a6 e2       	ldi	r26, 0x26	; 38
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e6 e2       	ldi	r30, 0x26	; 38
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	80 68       	ori	r24, 0x80	; 128
    2082:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ENABLE Configuration Error"
    #endif
    //ADC ENABLE FLAG 
    #if ADC_INTERRUPT_STATUS  ==  ENABLE
        SET_BIT(ADCSRA,ADIE);
    2084:	a6 e2       	ldi	r26, 0x26	; 38
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e6 e2       	ldi	r30, 0x26	; 38
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	88 60       	ori	r24, 0x08	; 8
    2090:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_INTERRUPT_ENABLE Configuration Error"
    #endif
    //
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        SET_BIT(ADMUX,ADLAR);
    2092:	a7 e2       	ldi	r26, 0x27	; 39
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e7 e2       	ldi	r30, 0x27	; 39
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 62       	ori	r24, 0x20	; 32
    209e:	8c 93       	st	X, r24
    #else
        #error "Error, ADC_ADJUST Configuration Error"
    #endif


    ADMUX &= REFERENCE_SELECTION_MASK ;
    20a0:	a7 e2       	ldi	r26, 0x27	; 39
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e7 e2       	ldi	r30, 0x27	; 39
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8f 73       	andi	r24, 0x3F	; 63
    20ac:	8c 93       	st	X, r24
    ADMUX |= Reference_Selection ;
    20ae:	a7 e2       	ldi	r26, 0x27	; 39
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e7 e2       	ldi	r30, 0x27	; 39
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8c 93       	st	X, r24

    ADCSRA &= PRESCALER_SELECTION_MASK ;
    20ba:	a6 e2       	ldi	r26, 0x26	; 38
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e6 e2       	ldi	r30, 0x26	; 38
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	88 7f       	andi	r24, 0xF8	; 248
    20c6:	8c 93       	st	X, r24
    ADCSRA |=  PRESCALER_SELECTION ;
    20c8:	a6 e2       	ldi	r26, 0x26	; 38
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e6 e2       	ldi	r30, 0x26	; 38
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	82 60       	ori	r24, 0x02	; 2
    20d4:	8c 93       	st	X, r24

}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <ADC_VoidInterruptControl>:
 void ADC_VoidInterruptControl(u8 Copy_InterruptStatus)
 {
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <ADC_VoidInterruptControl+0x6>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_InterruptStatus)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	3b 83       	std	Y+3, r19	; 0x03
    20f2:	2a 83       	std	Y+2, r18	; 0x02
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	31 f0       	breq	.+12     	; 0x2108 <ADC_VoidInterruptControl+0x2c>
    20fc:	2a 81       	ldd	r18, Y+2	; 0x02
    20fe:	3b 81       	ldd	r19, Y+3	; 0x03
    2100:	21 30       	cpi	r18, 0x01	; 1
    2102:	31 05       	cpc	r19, r1
    2104:	49 f0       	breq	.+18     	; 0x2118 <ADC_VoidInterruptControl+0x3c>
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <ADC_VoidInterruptControl+0x4a>
    {
    case DISABLE :
            CLEAR_BIT(ADCSRA,ADIE);
    2108:	a6 e2       	ldi	r26, 0x26	; 38
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e6 e2       	ldi	r30, 0x26	; 38
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	87 7f       	andi	r24, 0xF7	; 247
    2114:	8c 93       	st	X, r24
    2116:	07 c0       	rjmp	.+14     	; 0x2126 <ADC_VoidInterruptControl+0x4a>
        break;
    case ENABLE :
        CLEAR_BIT(ADCSRA,ADIE);
    2118:	a6 e2       	ldi	r26, 0x26	; 38
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e6 e2       	ldi	r30, 0x26	; 38
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	87 7f       	andi	r24, 0xF7	; 247
    2124:	8c 93       	st	X, r24
        break ;
    default:
        break;
    }
 }
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <ADC_U8StartConversionSynchronous>:

 u8 ADC_U8StartConversionSynchronous(u8 Copy_U8ChannelNumber)
 {
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <ADC_U8StartConversionSynchronous+0x6>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	8a 83       	std	Y+2, r24	; 0x02
    // VARIABLE TO STORE THE DIGITAL DATA FROM ADC
    u8 Local_U8DigitalValue ;
    //SELECT THE CHANNEL FOR DOING CONVERSION 
    ADMUX &= CHANEL_SELECTION_MASK ;
    213e:	a7 e2       	ldi	r26, 0x27	; 39
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e7 e2       	ldi	r30, 0x27	; 39
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	80 7e       	andi	r24, 0xE0	; 224
    214a:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    214c:	a7 e2       	ldi	r26, 0x27	; 39
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e7 e2       	ldi	r30, 0x27	; 39
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	90 81       	ld	r25, Z
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	89 2b       	or	r24, r25
    215a:	8c 93       	st	X, r24
    //START THE CONVERSION
    SET_BIT(ADCSRA , ADSC);
    215c:	a6 e2       	ldi	r26, 0x26	; 38
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e6 e2       	ldi	r30, 0x26	; 38
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 64       	ori	r24, 0x40	; 64
    2168:	8c 93       	st	X, r24
    //POLLING UNTILL CONVERSION END , PROCESSOR STOP UNTILL CONVERSION END 
    while(GET_BIT(ADCSRA,ADIF) == FALSE);
    216a:	e6 e2       	ldi	r30, 0x26	; 38
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	82 95       	swap	r24
    2172:	8f 70       	andi	r24, 0x0F	; 15
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	81 70       	andi	r24, 0x01	; 1
    217a:	90 70       	andi	r25, 0x00	; 0
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	a9 f3       	breq	.-22     	; 0x216a <ADC_U8StartConversionSynchronous+0x38>
    //RESET THE ADC FLAG AFTER CONVERSION DONE
    SET_BIT(ADCSRA,ADIF);
    2180:	a6 e2       	ldi	r26, 0x26	; 38
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e6 e2       	ldi	r30, 0x26	; 38
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	80 61       	ori	r24, 0x10	; 16
    218c:	8c 93       	st	X, r24
    //TO READ VALUE FORM HIG REGISTER OR LOW
    #if ADC_AJUST_RESULT  ==    LEFT_ADJUST
        Local_U8DigitalValue = ADCH ;
    218e:	e5 e2       	ldi	r30, 0x25	; 37
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	89 83       	std	Y+1, r24	; 0x01
    #elif ADC_AJUST_RESULT  ==    RIGHT_ADJUST  
        Local_U8DigitalValue = ADCL;
    #endif
    //RETURN THE DIGITAL VALUE FROM ADC 
    return Local_U8DigitalValue ;
    2196:	89 81       	ldd	r24, Y+1	; 0x01

 }
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <ADC_U8StartConversionAsynchronous>:
 void ADC_U8StartConversionAsynchronous(u8 Copy_U8ChannelNumber  ,  void (* Notification ) (void))
 {
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <ADC_U8StartConversionAsynchronous+0x6>
    21a8:	0f 92       	push	r0
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	7b 83       	std	Y+3, r23	; 0x03
    21b2:	6a 83       	std	Y+2, r22	; 0x02
    //set channel 
    ADMUX &= CHANEL_SELECTION_MASK ;
    21b4:	a7 e2       	ldi	r26, 0x27	; 39
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e7 e2       	ldi	r30, 0x27	; 39
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	80 7e       	andi	r24, 0xE0	; 224
    21c0:	8c 93       	st	X, r24
    ADMUX |= Copy_U8ChannelNumber ;
    21c2:	a7 e2       	ldi	r26, 0x27	; 39
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e7 e2       	ldi	r30, 0x27	; 39
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	90 81       	ld	r25, Z
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	89 2b       	or	r24, r25
    21d0:	8c 93       	st	X, r24

    ADC_pvoidNotificationFunction = Notification;
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	90 93 8b 00 	sts	0x008B, r25
    21da:	80 93 8a 00 	sts	0x008A, r24

    SET_BIT(ADCSRA , ADSC);
    21de:	a6 e2       	ldi	r26, 0x26	; 38
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e6 e2       	ldi	r30, 0x26	; 38
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	80 64       	ori	r24, 0x40	; 64
    21ea:	8c 93       	st	X, r24

 }
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <__vector_16>:
 void __vector_16 (void)  __attribute__ ((signal));
 void __vector_16 (void)
{
    21f8:	1f 92       	push	r1
    21fa:	0f 92       	push	r0
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	0f 92       	push	r0
    2200:	11 24       	eor	r1, r1
    2202:	2f 93       	push	r18
    2204:	3f 93       	push	r19
    2206:	4f 93       	push	r20
    2208:	5f 93       	push	r21
    220a:	6f 93       	push	r22
    220c:	7f 93       	push	r23
    220e:	8f 93       	push	r24
    2210:	9f 93       	push	r25
    2212:	af 93       	push	r26
    2214:	bf 93       	push	r27
    2216:	ef 93       	push	r30
    2218:	ff 93       	push	r31
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
     ADC_VoidInterruptControl(DISABLE);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	0e 94 6e 10 	call	0x20dc	; 0x20dc <ADC_VoidInterruptControl>
    ADC_Digital_Value = ADCH;
    2228:	e5 e2       	ldi	r30, 0x25	; 37
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	90 93 8d 00 	sts	0x008D, r25
    2236:	80 93 8c 00 	sts	0x008C, r24
    if(ADC_pvoidNotificationFunction != NULL)
    223a:	80 91 8a 00 	lds	r24, 0x008A
    223e:	90 91 8b 00 	lds	r25, 0x008B
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	29 f0       	breq	.+10     	; 0x2250 <__vector_16+0x58>
    {
        ADC_pvoidNotificationFunction();
    2246:	e0 91 8a 00 	lds	r30, 0x008A
    224a:	f0 91 8b 00 	lds	r31, 0x008B
    224e:	09 95       	icall
    }
    else
    {
        /* Do Nothing*/
    }
    ADC_VoidInterruptControl(ENABLE);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 6e 10 	call	0x20dc	; 0x20dc <ADC_VoidInterruptControl>
                    
                    #endif

    #endif
    */
}
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	ff 91       	pop	r31
    225c:	ef 91       	pop	r30
    225e:	bf 91       	pop	r27
    2260:	af 91       	pop	r26
    2262:	9f 91       	pop	r25
    2264:	8f 91       	pop	r24
    2266:	7f 91       	pop	r23
    2268:	6f 91       	pop	r22
    226a:	5f 91       	pop	r21
    226c:	4f 91       	pop	r20
    226e:	3f 91       	pop	r19
    2270:	2f 91       	pop	r18
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <LED_VoidInit>:
#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"

void LED_VoidInit(led_t * ledobj)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <LED_VoidInit+0x6>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidSetPinDirection(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,OUTPUT);
    228a:	e9 81       	ldd	r30, Y+1	; 0x01
    228c:	fa 81       	ldd	r31, Y+2	; 0x02
    228e:	80 81       	ld	r24, Z
    2290:	e9 81       	ldd	r30, Y+1	; 0x01
    2292:	fa 81       	ldd	r31, Y+2	; 0x02
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	69 2f       	mov	r22, r25
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <LED_VoidTurnOn>:
void LED_VoidTurnOn(led_t * ledobj)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <LED_VoidTurnOn+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,HIGH);
    22b6:	e9 81       	ldd	r30, Y+1	; 0x01
    22b8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ba:	80 81       	ld	r24, Z
    22bc:	e9 81       	ldd	r30, Y+1	; 0x01
    22be:	fa 81       	ldd	r31, Y+2	; 0x02
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	69 2f       	mov	r22, r25
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <LED_VoidTurnOff>:
void LED_VoidTurnOff(led_t * ledobj)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	00 d0       	rcall	.+0      	; 0x22da <LED_VoidTurnOff+0x6>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidSetPinValue(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin,LOW);
    22e2:	e9 81       	ldd	r30, Y+1	; 0x01
    22e4:	fa 81       	ldd	r31, Y+2	; 0x02
    22e6:	80 81       	ld	r24, Z
    22e8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ea:	fa 81       	ldd	r31, Y+2	; 0x02
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	69 2f       	mov	r22, r25
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <LED_VoidToggleLed>:
void LED_VoidToggleLed(led_t * ledobj)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <LED_VoidToggleLed+0x6>
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
    DIO_VoidTogglePinValu(ledobj->Copy_U8led_Port,ledobj->Copy_U8Led_Pin);
    230e:	e9 81       	ldd	r30, Y+1	; 0x01
    2310:	fa 81       	ldd	r31, Y+2	; 0x02
    2312:	80 81       	ld	r24, Z
    2314:	e9 81       	ldd	r30, Y+1	; 0x01
    2316:	fa 81       	ldd	r31, Y+2	; 0x02
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	69 2f       	mov	r22, r25
    231c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <DIO_VoidTogglePinValu>
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <LCD_voidInit>:
#include "LCD_config.h"



void LCD_voidInit()
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	2e 97       	sbiw	r28, 0x0e	; 14
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    #if LCD_INIT_MODE==EIGHT_BIT_MODE
    /* Initialize  Data Port*/
     DIO_VoidSetPortSpecificDirection(LCD_DATA_PORT,OUTPUT);
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	61 e0       	ldi	r22, 0x01	; 1
    2342:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <DIO_VoidSetPortSpecificDirection>

     // set RS and R/W and ENABLE as output
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_RS_PIN,OUTPUT);
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_RW_PIN,OUTPUT);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
     DIO_voidSetPinDirection(LCD_CRTL_PORT,LCD_EN_PIN,OUTPUT);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	62 e0       	ldi	r22, 0x02	; 2
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a8 e4       	ldi	r26, 0x48	; 72
    236a:	b2 e4       	ldi	r27, 0x42	; 66
    236c:	8b 87       	std	Y+11, r24	; 0x0b
    236e:	9c 87       	std	Y+12, r25	; 0x0c
    2370:	ad 87       	std	Y+13, r26	; 0x0d
    2372:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	6b 85       	ldd	r22, Y+11	; 0x0b
    2376:	7c 85       	ldd	r23, Y+12	; 0x0c
    2378:	8d 85       	ldd	r24, Y+13	; 0x0d
    237a:	9e 85       	ldd	r25, Y+14	; 0x0e
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a ef       	ldi	r20, 0xFA	; 250
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8f 83       	std	Y+7, r24	; 0x07
    238e:	98 87       	std	Y+8, r25	; 0x08
    2390:	a9 87       	std	Y+9, r26	; 0x09
    2392:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <LCD_voidInit+0x8c>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <LCD_voidInit+0xec>
    23f8:	88 ec       	ldi	r24, 0xC8	; 200
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_voidInit+0xda>
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <LCD_voidInit+0xce>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_voidInit+0x116>
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01

     //wait for 30 ms
     _delay_ms(50);
     
     LCD_VoidSendCommand(FUNCTION_SET_CMD);
    2448:	88 e3       	ldi	r24, 0x38	; 56
    244a:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_VoidSendCommand>
     LCD_VoidSendCommand(DISPLAY_ON_OFF_CMD);
    244e:	8c e0       	ldi	r24, 0x0C	; 12
    2450:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_VoidSendCommand>
     LCD_VoidSendCommand(DISPLAY_CLEAR_CMD);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_VoidSendCommand>
    #else

        error("LCD CONFIGRATION ERROR ")

    #endif
}
    245a:	2e 96       	adiw	r28, 0x0e	; 14
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <LCD_VoidSendCommand>:

 static void LCD_VoidSendCommand(u8 Copy_Command)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	2f 97       	sbiw	r28, 0x0f	; 15
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	8f 87       	std	Y+15, r24	; 0x0f
    //clear the RS pin To sent Command 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,LOW);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    //clear the R/W pin to write 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    //set the command to data the data port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT,Copy_Command);
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	6f 85       	ldd	r22, Y+15	; 0x0f
    249a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DIO_VoidSetSpacificvalue>
    /* send enable pulse*/
    //low 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    //high
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,HIGH);
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a0 e0       	ldi	r26, 0x00	; 0
    24b8:	b0 e4       	ldi	r27, 0x40	; 64
    24ba:	8b 87       	std	Y+11, r24	; 0x0b
    24bc:	9c 87       	std	Y+12, r25	; 0x0c
    24be:	ad 87       	std	Y+13, r26	; 0x0d
    24c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	4a ef       	ldi	r20, 0xFA	; 250
    24d0:	54 e4       	ldi	r21, 0x44	; 68
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	8f 83       	std	Y+7, r24	; 0x07
    24dc:	98 87       	std	Y+8, r25	; 0x08
    24de:	a9 87       	std	Y+9, r26	; 0x09
    24e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e8       	ldi	r20, 0x80	; 128
    24f0:	5f e3       	ldi	r21, 0x3F	; 63
    24f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f6:	88 23       	and	r24, r24
    24f8:	2c f4       	brge	.+10     	; 0x2504 <LCD_VoidSendCommand+0x98>
		__ticks = 1;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	3f c0       	rjmp	.+126    	; 0x2582 <LCD_VoidSendCommand+0x116>
	else if (__tmp > 65535)
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	3f ef       	ldi	r19, 0xFF	; 255
    2510:	4f e7       	ldi	r20, 0x7F	; 127
    2512:	57 e4       	ldi	r21, 0x47	; 71
    2514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2518:	18 16       	cp	r1, r24
    251a:	4c f5       	brge	.+82     	; 0x256e <LCD_VoidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251c:	6b 85       	ldd	r22, Y+11	; 0x0b
    251e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e2       	ldi	r20, 0x20	; 32
    252a:	51 e4       	ldi	r21, 0x41	; 65
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	0f c0       	rjmp	.+30     	; 0x2564 <LCD_VoidSendCommand+0xf8>
    2546:	88 ec       	ldi	r24, 0xC8	; 200
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9c 83       	std	Y+4, r25	; 0x04
    254c:	8b 83       	std	Y+3, r24	; 0x03
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <LCD_VoidSendCommand+0xe6>
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	69 f7       	brne	.-38     	; 0x2546 <LCD_VoidSendCommand+0xda>
    256c:	14 c0       	rjmp	.+40     	; 0x2596 <LCD_VoidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256e:	6f 81       	ldd	r22, Y+7	; 0x07
    2570:	78 85       	ldd	r23, Y+8	; 0x08
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_VoidSendCommand+0x122>
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    //low
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	62 e0       	ldi	r22, 0x02	; 2
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>




}
    25a0:	2f 96       	adiw	r28, 0x0f	; 15
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Copy_Data)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	2f 97       	sbiw	r28, 0x0f	; 15
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	8f 87       	std	Y+15, r24	; 0x0f
    //clear the RS pin To sent data
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,HIGH);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    //clear the R/W pin to write 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    //set the command to data the data port
    DIO_VoidSetSpacificvalue(LCD_DATA_PORT,Copy_Data);
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	6f 85       	ldd	r22, Y+15	; 0x0f
    25e0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DIO_VoidSetSpacificvalue>
    /* send enable pulse*/
    //low 
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    //high
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,HIGH);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	62 e0       	ldi	r22, 0x02	; 2
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e0       	ldi	r26, 0x00	; 0
    25fe:	b0 e4       	ldi	r27, 0x40	; 64
    2600:	8b 87       	std	Y+11, r24	; 0x0b
    2602:	9c 87       	std	Y+12, r25	; 0x0c
    2604:	ad 87       	std	Y+13, r26	; 0x0d
    2606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6b 85       	ldd	r22, Y+11	; 0x0b
    260a:	7c 85       	ldd	r23, Y+12	; 0x0c
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8f 83       	std	Y+7, r24	; 0x07
    2622:	98 87       	std	Y+8, r25	; 0x08
    2624:	a9 87       	std	Y+9, r26	; 0x09
    2626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_VoidSendData+0x98>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_VoidSendData+0x116>
	else if (__tmp > 65535)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_VoidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_VoidSendData+0xf8>
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9c 83       	std	Y+4, r25	; 0x04
    2692:	8b 83       	std	Y+3, r24	; 0x03
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_VoidSendData+0xe6>
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_VoidSendData+0xda>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <LCD_VoidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6f 81       	ldd	r22, Y+7	; 0x07
    26b6:	78 85       	ldd	r23, Y+8	; 0x08
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_VoidSendData+0x122>
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    //low
    DIO_VoidSetPinValue(LCD_CRTL_PORT,LCD_EN_PIN,LOW);
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>


}
    26e6:	2f 96       	adiw	r28, 0x0f	; 15
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <LCD_voidClearLcd>:

void LCD_voidClearLcd(void)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    LCD_VoidSendCommand(DISPLAY_CLEAR_CMD);
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_VoidSendCommand>
}
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_VoidGoToXY>:

void LCD_VoidGoToXY(u8 Copy_U8Xpostion  , u8 Copy_U8Ypostion)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <LCD_VoidGoToXY+0x6>
    2712:	0f 92       	push	r0
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	8a 83       	std	Y+2, r24	; 0x02
    271a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_U8CharacterAdress = 0;
    271c:	19 82       	std	Y+1, r1	; 0x01
    //calculate the address 

    if(Copy_U8Xpostion==0)
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	88 23       	and	r24, r24
    2722:	19 f4       	brne	.+6      	; 0x272a <LCD_VoidGoToXY+0x1e>
    {
            //if x=0 so adrees = y 
            Local_U8CharacterAdress =Copy_U8Ypostion ;
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	06 c0       	rjmp	.+12     	; 0x2736 <LCD_VoidGoToXY+0x2a>

    }
    else if (Copy_U8Xpostion==1)
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	19 f4       	brne	.+6      	; 0x2736 <LCD_VoidGoToXY+0x2a>
    {
        //if x =1 so adress = y+40
        Local_U8CharacterAdress=Copy_U8Ypostion + 0x40 ;
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	80 5c       	subi	r24, 0xC0	; 192
    2734:	89 83       	std	Y+1, r24	; 0x01
    {
        //raise error 
    }
    // set bit8 to to 1 because address command has 1 in bit8

    SET_BIT(Local_U8CharacterAdress,7);
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	80 68       	ori	r24, 0x80	; 128
    273a:	89 83       	std	Y+1, r24	; 0x01
    LCD_VoidSendCommand(Local_U8CharacterAdress);
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_VoidSendCommand>

}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <LCD_VoidSendString>:
void LCD_VoidSendString ( u8 * Copy_pu8StringArray)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	00 d0       	rcall	.+0      	; 0x2754 <LCD_VoidSendString+0x6>
    2754:	0f 92       	push	r0
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	9b 83       	std	Y+3, r25	; 0x03
    275c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8LoopCounter =0 ;
    275e:	19 82       	std	Y+1, r1	; 0x01
    2760:	0e c0       	rjmp	.+28     	; 0x277e <LCD_VoidSendString+0x30>
    while (Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    {
        LCD_VoidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	fc 01       	movw	r30, r24
    276e:	e2 0f       	add	r30, r18
    2770:	f3 1f       	adc	r31, r19
    2772:	80 81       	ld	r24, Z
    2774:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_VoidSendData>
        Local_u8LoopCounter ++;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_VoidSendString ( u8 * Copy_pu8StringArray)
{
    u8 Local_u8LoopCounter =0 ;
    while (Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	9b 81       	ldd	r25, Y+3	; 0x03
    2788:	fc 01       	movw	r30, r24
    278a:	e2 0f       	add	r30, r18
    278c:	f3 1f       	adc	r31, r19
    278e:	80 81       	ld	r24, Z
    2790:	88 23       	and	r24, r24
    2792:	39 f7       	brne	.-50     	; 0x2762 <LCD_VoidSendString+0x14>
    {
        LCD_VoidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
        Local_u8LoopCounter ++;
    }

}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32  Copy_U8number)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	2d 97       	sbiw	r28, 0x0d	; 13
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	9d 87       	std	Y+13, r25	; 0x0d
    27b6:	8c 87       	std	Y+12, r24	; 0x0c
    u8 local_u8ArrayyNumber[10];
    u8 local_u8LoopCounter =0 ;
    27b8:	19 82       	std	Y+1, r1	; 0x01
    27ba:	1d c0       	rjmp	.+58     	; 0x27f6 <LCD_VoidSendNumber+0x56>
    while(Copy_U8number != 0)
    {
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	e8 2f       	mov	r30, r24
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    27c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    27c6:	2a e0       	ldi	r18, 0x0A	; 10
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	b9 01       	movw	r22, r18
    27cc:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodhi4>
    27d0:	28 2f       	mov	r18, r24
    27d2:	ce 01       	movw	r24, r28
    27d4:	02 96       	adiw	r24, 0x02	; 2
    27d6:	e8 0f       	add	r30, r24
    27d8:	f9 1f       	adc	r31, r25
    27da:	20 83       	st	Z, r18
        Copy_U8number /= 10 ;
    27dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    27de:	9d 85       	ldd	r25, Y+13	; 0x0d
    27e0:	2a e0       	ldi	r18, 0x0A	; 10
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	b9 01       	movw	r22, r18
    27e6:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodhi4>
    27ea:	cb 01       	movw	r24, r22
    27ec:	9d 87       	std	Y+13, r25	; 0x0d
    27ee:	8c 87       	std	Y+12, r24	; 0x0c
        local_u8LoopCounter ++ ;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_VoidSendNumber(u32  Copy_U8number)
{
    u8 local_u8ArrayyNumber[10];
    u8 local_u8LoopCounter =0 ;
    while(Copy_U8number != 0)
    27f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    27f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	f9 f6       	brne	.-66     	; 0x27bc <LCD_VoidSendNumber+0x1c>
    {
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
        Copy_U8number /= 10 ;
        local_u8LoopCounter ++ ;
    }
    local_u8LoopCounter -- ; // while increament and check condition
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	81 50       	subi	r24, 0x01	; 1
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <LCD_VoidSendNumber+0x84>
    while(local_u8LoopCounter != 255) // beacuse loopcounter is unsigned so when we delver to - value == 255
    {
        //we want to send Asci code so add '0' 48 plus the number  if number is 5 so ascii code of 5 = 5+48('0') =53 
        LCD_VoidSendData(local_u8ArrayyNumber[local_u8LoopCounter]+ '0');
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	ce 01       	movw	r24, r28
    280e:	02 96       	adiw	r24, 0x02	; 2
    2810:	fc 01       	movw	r30, r24
    2812:	e2 0f       	add	r30, r18
    2814:	f3 1f       	adc	r31, r19
    2816:	80 81       	ld	r24, Z
    2818:	80 5d       	subi	r24, 0xD0	; 208
    281a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_VoidSendData>
        local_u8LoopCounter -- ;
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	81 50       	subi	r24, 0x01	; 1
    2822:	89 83       	std	Y+1, r24	; 0x01
        local_u8ArrayyNumber[local_u8LoopCounter]=Copy_U8number % 10;
        Copy_U8number /= 10 ;
        local_u8LoopCounter ++ ;
    }
    local_u8LoopCounter -- ; // while increament and check condition
    while(local_u8LoopCounter != 255) // beacuse loopcounter is unsigned so when we delver to - value == 255
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	8f 3f       	cpi	r24, 0xFF	; 255
    2828:	71 f7       	brne	.-36     	; 0x2806 <LCD_VoidSendNumber+0x66>
    {
        //we want to send Asci code so add '0' 48 plus the number  if number is 5 so ascii code of 5 = 5+48('0') =53 
        LCD_VoidSendData(local_u8ArrayyNumber[local_u8LoopCounter]+ '0');
        local_u8LoopCounter -- ;
    }
}
    282a:	2d 96       	adiw	r28, 0x0d	; 13
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <LCD_VoidSendCustomCharacter>:
void LCD_VoidSendCustomCharacter( u8 * Copy_pU8CharacterArray ,u8 Copy_U8PatternNumber , u8 Copy_U8Xpostion ,  u8 Copy_U8Ypostion  )
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	27 97       	sbiw	r28, 0x07	; 7
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
    2854:	6d 83       	std	Y+5, r22	; 0x05
    2856:	4e 83       	std	Y+6, r20	; 0x06
    2858:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter ;
    u8 Local_u8CGRAMAdress = 0;
    285a:	19 82       	std	Y+1, r1	; 0x01
    //calcute the adress of CGRAM = pattern number *8  
    Local_u8CGRAMAdress = Copy_U8PatternNumber * 8 ;
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	89 83       	std	Y+1, r24	; 0x01
    //set bit 6 to 1 according to command in datasheet 
    SET_BIT(Local_u8CGRAMAdress , 6);
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	80 64       	ori	r24, 0x40	; 64
    2874:	89 83       	std	Y+1, r24	; 0x01
    //send the command that tell i call the CGRAM 
    LCD_VoidSendCommand(Local_u8CGRAMAdress);
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_VoidSendCommand>
    for(Local_u8LoopCounter =0 ; Local_u8LoopCounter < 8 ; Local_u8LoopCounter ++)
    287c:	1a 82       	std	Y+2, r1	; 0x02
    287e:	0e c0       	rjmp	.+28     	; 0x289c <LCD_VoidSendCustomCharacter+0x60>
    {
        LCD_VoidSendData(Copy_pU8CharacterArray[Local_u8LoopCounter]);
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	9c 81       	ldd	r25, Y+4	; 0x04
    288a:	fc 01       	movw	r30, r24
    288c:	e2 0f       	add	r30, r18
    288e:	f3 1f       	adc	r31, r19
    2890:	80 81       	ld	r24, Z
    2892:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_VoidSendData>
    Local_u8CGRAMAdress = Copy_U8PatternNumber * 8 ;
    //set bit 6 to 1 according to command in datasheet 
    SET_BIT(Local_u8CGRAMAdress , 6);
    //send the command that tell i call the CGRAM 
    LCD_VoidSendCommand(Local_u8CGRAMAdress);
    for(Local_u8LoopCounter =0 ; Local_u8LoopCounter < 8 ; Local_u8LoopCounter ++)
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	8a 83       	std	Y+2, r24	; 0x02
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	88 30       	cpi	r24, 0x08	; 8
    28a0:	78 f3       	brcs	.-34     	; 0x2880 <LCD_VoidSendCustomCharacter+0x44>
    {
        LCD_VoidSendData(Copy_pU8CharacterArray[Local_u8LoopCounter]);
    }
    // postion of start display and  sent data to DDRAM to display in lcd 
    LCD_VoidGoToXY(Copy_U8Xpostion , Copy_U8Ypostion);
    28a2:	8e 81       	ldd	r24, Y+6	; 0x06
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_VoidGoToXY>
    LCD_VoidSendData(Copy_U8PatternNumber);
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_VoidSendData>
    
}
    28b0:	27 96       	adiw	r28, 0x07	; 7
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <KPD_VoidIntit>:
#include "KPD_private.h"



void KPD_VoidIntit(void)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    //set Rows pins to input pulled up
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW0_PIN,INPUT);
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW1_PIN,INPUT);
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	61 e0       	ldi	r22, 0x01	; 1
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW2_PIN,INPUT);
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	62 e0       	ldi	r22, 0x02	; 2
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT,KPD_ROW3_PIN,INPUT);
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	63 e0       	ldi	r22, 0x03	; 3
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    // PuLLED UP 
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW0_PIN,PULLUP);
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW1_PIN,PULLUP);
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	61 e0       	ldi	r22, 0x01	; 1
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW2_PIN,PULLUP);
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	62 e0       	ldi	r22, 0x02	; 2
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_ROWS_PORT,KPD_ROW3_PIN,PULLUP);
    2910:	83 e0       	ldi	r24, 0x03	; 3
    2912:	63 e0       	ldi	r22, 0x03	; 3
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    //set cols pins to output high
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,OUTPUT);
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	64 e0       	ldi	r22, 0x04	; 4
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,OUTPUT);
    2924:	83 e0       	ldi	r24, 0x03	; 3
    2926:	65 e0       	ldi	r22, 0x05	; 5
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,OUTPUT);
    292e:	83 e0       	ldi	r24, 0x03	; 3
    2930:	66 e0       	ldi	r22, 0x06	; 6
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,OUTPUT);
    2938:	83 e0       	ldi	r24, 0x03	; 3
    293a:	67 e0       	ldi	r22, 0x07	; 7
    293c:	41 e0       	ldi	r20, 0x01	; 1
    293e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
    //SET COLUMNS HIGH
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN0_PIN,HIGH);
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	64 e0       	ldi	r22, 0x04	; 4
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN1_PIN,HIGH);
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	65 e0       	ldi	r22, 0x05	; 5
    2950:	41 e0       	ldi	r20, 0x01	; 1
    2952:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN2_PIN,HIGH);
    2956:	83 e0       	ldi	r24, 0x03	; 3
    2958:	66 e0       	ldi	r22, 0x06	; 6
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    DIO_VoidSetPinValue(KPD_COLUMNS_PORT,KPD_COLUMN3_PIN,HIGH);
    2960:	83 e0       	ldi	r24, 0x03	; 3
    2962:	67 e0       	ldi	r22, 0x07	; 7
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>


}
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <KPD_U8GetPressedKey>:
                                                 

u8 KPD_U8GetPressedKey(void)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	00 d0       	rcall	.+0      	; 0x2976 <KPD_U8GetPressedKey+0x6>
    2976:	00 d0       	rcall	.+0      	; 0x2978 <KPD_U8GetPressedKey+0x8>
    2978:	0f 92       	push	r0
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
   //array of colums pins
   static u8 Local_u8Array_of_columns[KPD_COLUMNS_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
   //array of rows pins
   static  u8 Local_U8Array_Of_Rows[KPD_ROWS_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    297e:	8f ef       	ldi	r24, 0xFF	; 255
    2980:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    2982:	1b 82       	std	Y+3, r1	; 0x03
    2984:	57 c0       	rjmp	.+174    	; 0x2a34 <KPD_U8GetPressedKey+0xc4>
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	fc 01       	movw	r30, r24
    298e:	e4 59       	subi	r30, 0x94	; 148
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	90 81       	ld	r25, Z
    2994:	83 e0       	ldi	r24, 0x03	; 3
    2996:	69 2f       	mov	r22, r25
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    299e:	1a 82       	std	Y+2, r1	; 0x02
    29a0:	37 c0       	rjmp	.+110    	; 0x2a10 <KPD_U8GetPressedKey+0xa0>
        {
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	fc 01       	movw	r30, r24
    29aa:	e8 59       	subi	r30, 0x98	; 152
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	90 81       	ld	r25, Z
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	69 2f       	mov	r22, r25
    29b4:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <DIO_VoidGetPinValue>
    29b8:	89 83       	std	Y+1, r24	; 0x01
           if(local_u8RowValue== LOW)
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	88 23       	and	r24, r24
    29be:	29 f5       	brne	.+74     	; 0x2a0a <KPD_U8GetPressedKey+0x9a>
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	48 2f       	mov	r20, r24
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	ca 01       	movw	r24, r20
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	fc 01       	movw	r30, r24
    29dc:	e0 59       	subi	r30, 0x90	; 144
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	8c 83       	std	Y+4, r24	; 0x04
    29e4:	0c c0       	rjmp	.+24     	; 0x29fe <KPD_U8GetPressedKey+0x8e>
                while(local_u8RowValue==LOW)
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	fc 01       	movw	r30, r24
    29ee:	e8 59       	subi	r30, 0x98	; 152
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	90 81       	ld	r25, Z
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	69 2f       	mov	r22, r25
    29f8:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <DIO_VoidGetPinValue>
    29fc:	89 83       	std	Y+1, r24	; 0x01
            //search for which key in this row pressed
           local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
           if(local_u8RowValue== LOW)
           {    
        	   local_u8Key_pressed = Local_u8KPDArray[Local_u8RowCounter][Local_u8ColumnCounter];
                while(local_u8RowValue==LOW)
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	88 23       	and	r24, r24
    2a02:	89 f3       	breq	.-30     	; 0x29e6 <KPD_U8GetPressedKey+0x76>
                {
                    local_u8RowValue = DIO_VoidGetPinValue(KPD_ROWS_PORT,Local_U8Array_Of_Rows[Local_u8RowCounter]);
                }

                return  local_u8Key_pressed ;
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	1b c0       	rjmp	.+54     	; 0x2a40 <KPD_U8GetPressedKey+0xd0>
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    {
        //avtivate column to zero
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],LOW);
        for(Local_u8RowCounter=0 ; Local_u8RowCounter < KPD_ROWS_NUMBER ; Local_u8RowCounter++)
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	8f 5f       	subi	r24, 0xFF	; 255
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	84 30       	cpi	r24, 0x04	; 4
    2a14:	30 f2       	brcs	.-116    	; 0x29a2 <KPD_U8GetPressedKey+0x32>

           }

        }
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	e4 59       	subi	r30, 0x94	; 148
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	90 81       	ld	r25, Z
    2a24:	83 e0       	ldi	r24, 0x03	; 3
    2a26:	69 2f       	mov	r22, r25
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
   //local variable to take the pressed key
    u8 local_u8Key_pressed= KPD_NOT_PRESSED ;
    u8 Local_u8ColumnCounter ;
    u8 Local_u8RowCounter ;
    u8 local_u8RowValue;
    for(Local_u8ColumnCounter=0 ; Local_u8ColumnCounter < KPD_COLUMNS_NUMBER ; Local_u8ColumnCounter++)
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	8b 83       	std	Y+3, r24	; 0x03
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	84 30       	cpi	r24, 0x04	; 4
    2a38:	08 f4       	brcc	.+2      	; 0x2a3c <KPD_U8GetPressedKey+0xcc>
    2a3a:	a5 cf       	rjmp	.-182    	; 0x2986 <KPD_U8GetPressedKey+0x16>
        //deactivate column to high
        DIO_VoidSetPinValue(KPD_COLUMNS_PORT,Local_u8Array_of_columns[Local_u8ColumnCounter],HIGH);

    }

    return local_u8Key_pressed ;
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <main>:
#include "../MCAL/DIO/DIO_interface.h"
#include "../MCAL/TIMER/TIMER_interface.h"


u32 main (void)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	e0 97       	sbiw	r28, 0x30	; 48
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61

	WDT_VoidEnable();
    2a66:	0e 94 4f 06 	call	0xc9e	; 0xc9e <WDT_VoidEnable>
	DIO_voidSetPinDirection(DIO_PORTA,PIN0,OUTPUT);
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_voidSetPinDirection>
	DIO_VoidSetPinValue(DIO_PORTA,PIN0,HIGH);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	60 e0       	ldi	r22, 0x00	; 0
    2a78:	41 e0       	ldi	r20, 0x01	; 1
    2a7a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	aa ef       	ldi	r26, 0xFA	; 250
    2a84:	b3 e4       	ldi	r27, 0x43	; 67
    2a86:	8d a7       	std	Y+45, r24	; 0x2d
    2a88:	9e a7       	std	Y+46, r25	; 0x2e
    2a8a:	af a7       	std	Y+47, r26	; 0x2f
    2a8c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a90:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a94:	98 a9       	ldd	r25, Y+48	; 0x30
    2a96:	2b ea       	ldi	r18, 0xAB	; 171
    2a98:	3a ea       	ldi	r19, 0xAA	; 170
    2a9a:	4a e2       	ldi	r20, 0x2A	; 42
    2a9c:	50 e4       	ldi	r21, 0x40	; 64
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	89 a7       	std	Y+41, r24	; 0x29
    2aa8:	9a a7       	std	Y+42, r25	; 0x2a
    2aaa:	ab a7       	std	Y+43, r26	; 0x2b
    2aac:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2aae:	69 a5       	ldd	r22, Y+41	; 0x29
    2ab0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ab2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ab4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	1c f4       	brge	.+6      	; 0x2acc <main+0x7a>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	88 a7       	std	Y+40, r24	; 0x28
    2aca:	91 c0       	rjmp	.+290    	; 0x2bee <main+0x19c>
	else if (__tmp > 255)
    2acc:	69 a5       	ldd	r22, Y+41	; 0x29
    2ace:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	53 e4       	ldi	r21, 0x43	; 67
    2adc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <main+0x94>
    2ae4:	7b c0       	rjmp	.+246    	; 0x2bdc <main+0x18a>
	{
		_delay_ms(__us / 1000.0);
    2ae6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ae8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aec:	98 a9       	ldd	r25, Y+48	; 0x30
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a e7       	ldi	r20, 0x7A	; 122
    2af4:	54 e4       	ldi	r21, 0x44	; 68
    2af6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8c a3       	std	Y+36, r24	; 0x24
    2b00:	9d a3       	std	Y+37, r25	; 0x25
    2b02:	ae a3       	std	Y+38, r26	; 0x26
    2b04:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	6c a1       	ldd	r22, Y+36	; 0x24
    2b08:	7d a1       	ldd	r23, Y+37	; 0x25
    2b0a:	8e a1       	ldd	r24, Y+38	; 0x26
    2b0c:	9f a1       	ldd	r25, Y+39	; 0x27
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a ef       	ldi	r20, 0xFA	; 250
    2b14:	54 e4       	ldi	r21, 0x44	; 68
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	88 a3       	std	Y+32, r24	; 0x20
    2b20:	99 a3       	std	Y+33, r25	; 0x21
    2b22:	aa a3       	std	Y+34, r26	; 0x22
    2b24:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b26:	68 a1       	ldd	r22, Y+32	; 0x20
    2b28:	79 a1       	ldd	r23, Y+33	; 0x21
    2b2a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b2c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <main+0xf6>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9f 8f       	std	Y+31, r25	; 0x1f
    2b44:	8e 8f       	std	Y+30, r24	; 0x1e
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <main+0x174>
	else if (__tmp > 65535)
    2b48:	68 a1       	ldd	r22, Y+32	; 0x20
    2b4a:	79 a1       	ldd	r23, Y+33	; 0x21
    2b4c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b4e:	9b a1       	ldd	r25, Y+35	; 0x23
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	4c f5       	brge	.+82     	; 0x2bb2 <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	6c a1       	ldd	r22, Y+36	; 0x24
    2b62:	7d a1       	ldd	r23, Y+37	; 0x25
    2b64:	8e a1       	ldd	r24, Y+38	; 0x26
    2b66:	9f a1       	ldd	r25, Y+39	; 0x27
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	9f 8f       	std	Y+31, r25	; 0x1f
    2b86:	8e 8f       	std	Y+30, r24	; 0x1e
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <main+0x156>
    2b8a:	88 ec       	ldi	r24, 0xC8	; 200
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9d 8f       	std	Y+29, r25	; 0x1d
    2b90:	8c 8f       	std	Y+28, r24	; 0x1c
    2b92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b94:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <main+0x144>
    2b9a:	9d 8f       	std	Y+29, r25	; 0x1d
    2b9c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ba0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ba6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2baa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	69 f7       	brne	.-38     	; 0x2b8a <main+0x138>
    2bb0:	24 c0       	rjmp	.+72     	; 0x2bfa <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	68 a1       	ldd	r22, Y+32	; 0x20
    2bb4:	79 a1       	ldd	r23, Y+33	; 0x21
    2bb6:	8a a1       	ldd	r24, Y+34	; 0x22
    2bb8:	9b a1       	ldd	r25, Y+35	; 0x23
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9f 8f       	std	Y+31, r25	; 0x1f
    2bc4:	8e 8f       	std	Y+30, r24	; 0x1e
    2bc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bca:	9b 8f       	std	Y+27, r25	; 0x1b
    2bcc:	8a 8f       	std	Y+26, r24	; 0x1a
    2bce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <main+0x180>
    2bd6:	9b 8f       	std	Y+27, r25	; 0x1b
    2bd8:	8a 8f       	std	Y+26, r24	; 0x1a
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <main+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bdc:	69 a5       	ldd	r22, Y+41	; 0x29
    2bde:	7a a5       	ldd	r23, Y+42	; 0x2a
    2be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	88 a7       	std	Y+40, r24	; 0x28
    2bee:	88 a5       	ldd	r24, Y+40	; 0x28
    2bf0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bf2:	89 8d       	ldd	r24, Y+25	; 0x19
    2bf4:	8a 95       	dec	r24
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <main+0x1a2>
    2bf8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(500);
	DIO_VoidSetPinValue(DIO_PORTA,PIN0,LOW);
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	60 e0       	ldi	r22, 0x00	; 0
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_VoidSetPinValue>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	aa ef       	ldi	r26, 0xFA	; 250
    2c0a:	b3 e4       	ldi	r27, 0x43	; 67
    2c0c:	8d 8b       	std	Y+21, r24	; 0x15
    2c0e:	9e 8b       	std	Y+22, r25	; 0x16
    2c10:	af 8b       	std	Y+23, r26	; 0x17
    2c12:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c14:	6d 89       	ldd	r22, Y+21	; 0x15
    2c16:	7e 89       	ldd	r23, Y+22	; 0x16
    2c18:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1c:	2b ea       	ldi	r18, 0xAB	; 171
    2c1e:	3a ea       	ldi	r19, 0xAA	; 170
    2c20:	4a e2       	ldi	r20, 0x2A	; 42
    2c22:	50 e4       	ldi	r21, 0x40	; 64
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	89 8b       	std	Y+17, r24	; 0x11
    2c2e:	9a 8b       	std	Y+18, r25	; 0x12
    2c30:	ab 8b       	std	Y+19, r26	; 0x13
    2c32:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c34:	69 89       	ldd	r22, Y+17	; 0x11
    2c36:	7a 89       	ldd	r23, Y+18	; 0x12
    2c38:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	1c f4       	brge	.+6      	; 0x2c52 <main+0x200>
		__ticks = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	88 8b       	std	Y+16, r24	; 0x10
    2c50:	91 c0       	rjmp	.+290    	; 0x2d74 <main+0x322>
	else if (__tmp > 255)
    2c52:	69 89       	ldd	r22, Y+17	; 0x11
    2c54:	7a 89       	ldd	r23, Y+18	; 0x12
    2c56:	8b 89       	ldd	r24, Y+19	; 0x13
    2c58:	9c 89       	ldd	r25, Y+20	; 0x14
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4f e7       	ldi	r20, 0x7F	; 127
    2c60:	53 e4       	ldi	r21, 0x43	; 67
    2c62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c66:	18 16       	cp	r1, r24
    2c68:	0c f0       	brlt	.+2      	; 0x2c6c <main+0x21a>
    2c6a:	7b c0       	rjmp	.+246    	; 0x2d62 <main+0x310>
	{
		_delay_ms(__us / 1000.0);
    2c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c70:	8f 89       	ldd	r24, Y+23	; 0x17
    2c72:	98 8d       	ldd	r25, Y+24	; 0x18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	4a e7       	ldi	r20, 0x7A	; 122
    2c7a:	54 e4       	ldi	r21, 0x44	; 68
    2c7c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	8c 87       	std	Y+12, r24	; 0x0c
    2c86:	9d 87       	std	Y+13, r25	; 0x0d
    2c88:	ae 87       	std	Y+14, r26	; 0x0e
    2c8a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c90:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c92:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	4a ef       	ldi	r20, 0xFA	; 250
    2c9a:	54 e4       	ldi	r21, 0x44	; 68
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	88 87       	std	Y+8, r24	; 0x08
    2ca6:	99 87       	std	Y+9, r25	; 0x09
    2ca8:	aa 87       	std	Y+10, r26	; 0x0a
    2caa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cac:	68 85       	ldd	r22, Y+8	; 0x08
    2cae:	79 85       	ldd	r23, Y+9	; 0x09
    2cb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <main+0x27c>
		__ticks = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9f 83       	std	Y+7, r25	; 0x07
    2cca:	8e 83       	std	Y+6, r24	; 0x06
    2ccc:	3f c0       	rjmp	.+126    	; 0x2d4c <main+0x2fa>
	else if (__tmp > 65535)
    2cce:	68 85       	ldd	r22, Y+8	; 0x08
    2cd0:	79 85       	ldd	r23, Y+9	; 0x09
    2cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	4c f5       	brge	.+82     	; 0x2d38 <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ce8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cea:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cec:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	51 e4       	ldi	r21, 0x41	; 65
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9f 83       	std	Y+7, r25	; 0x07
    2d0c:	8e 83       	std	Y+6, r24	; 0x06
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <main+0x2dc>
    2d10:	88 ec       	ldi	r24, 0xC8	; 200
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9d 83       	std	Y+5, r25	; 0x05
    2d16:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d18:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <main+0x2ca>
    2d20:	9d 83       	std	Y+5, r25	; 0x05
    2d22:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	8e 81       	ldd	r24, Y+6	; 0x06
    2d26:	9f 81       	ldd	r25, Y+7	; 0x07
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9f 83       	std	Y+7, r25	; 0x07
    2d2c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d30:	9f 81       	ldd	r25, Y+7	; 0x07
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	69 f7       	brne	.-38     	; 0x2d10 <main+0x2be>
    2d36:	24 c0       	rjmp	.+72     	; 0x2d80 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d38:	68 85       	ldd	r22, Y+8	; 0x08
    2d3a:	79 85       	ldd	r23, Y+9	; 0x09
    2d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9f 83       	std	Y+7, r25	; 0x07
    2d4a:	8e 83       	std	Y+6, r24	; 0x06
    2d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d50:	9b 83       	std	Y+3, r25	; 0x03
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	9b 81       	ldd	r25, Y+3	; 0x03
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <main+0x306>
    2d5c:	9b 83       	std	Y+3, r25	; 0x03
    2d5e:	8a 83       	std	Y+2, r24	; 0x02
    2d60:	0f c0       	rjmp	.+30     	; 0x2d80 <main+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d62:	69 89       	ldd	r22, Y+17	; 0x11
    2d64:	7a 89       	ldd	r23, Y+18	; 0x12
    2d66:	8b 89       	ldd	r24, Y+19	; 0x13
    2d68:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	88 8b       	std	Y+16, r24	; 0x10
    2d74:	88 89       	ldd	r24, Y+16	; 0x10
    2d76:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	8a 95       	dec	r24
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0x328>
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);
	WDT_VoidEnable();
    2d80:	0e 94 4f 06 	call	0xc9e	; 0xc9e <WDT_VoidEnable>
	WDT_VoidSleep(WDT_TIMER_PRESCELER_1024_1S);
    2d84:	86 e0       	ldi	r24, 0x06	; 6
    2d86:	0e 94 5d 06 	call	0xcba	; 0xcba <WDT_VoidSleep>
	WDT_VoidDisable();
    2d8a:	0e 94 76 06 	call	0xcec	; 0xcec <WDT_VoidDisable>
    2d8e:	ff cf       	rjmp	.-2      	; 0x2d8e <main+0x33c>

00002d90 <__mulsi3>:
    2d90:	62 9f       	mul	r22, r18
    2d92:	d0 01       	movw	r26, r0
    2d94:	73 9f       	mul	r23, r19
    2d96:	f0 01       	movw	r30, r0
    2d98:	82 9f       	mul	r24, r18
    2d9a:	e0 0d       	add	r30, r0
    2d9c:	f1 1d       	adc	r31, r1
    2d9e:	64 9f       	mul	r22, r20
    2da0:	e0 0d       	add	r30, r0
    2da2:	f1 1d       	adc	r31, r1
    2da4:	92 9f       	mul	r25, r18
    2da6:	f0 0d       	add	r31, r0
    2da8:	83 9f       	mul	r24, r19
    2daa:	f0 0d       	add	r31, r0
    2dac:	74 9f       	mul	r23, r20
    2dae:	f0 0d       	add	r31, r0
    2db0:	65 9f       	mul	r22, r21
    2db2:	f0 0d       	add	r31, r0
    2db4:	99 27       	eor	r25, r25
    2db6:	72 9f       	mul	r23, r18
    2db8:	b0 0d       	add	r27, r0
    2dba:	e1 1d       	adc	r30, r1
    2dbc:	f9 1f       	adc	r31, r25
    2dbe:	63 9f       	mul	r22, r19
    2dc0:	b0 0d       	add	r27, r0
    2dc2:	e1 1d       	adc	r30, r1
    2dc4:	f9 1f       	adc	r31, r25
    2dc6:	bd 01       	movw	r22, r26
    2dc8:	cf 01       	movw	r24, r30
    2dca:	11 24       	eor	r1, r1
    2dcc:	08 95       	ret

00002dce <__udivmodhi4>:
    2dce:	aa 1b       	sub	r26, r26
    2dd0:	bb 1b       	sub	r27, r27
    2dd2:	51 e1       	ldi	r21, 0x11	; 17
    2dd4:	07 c0       	rjmp	.+14     	; 0x2de4 <__udivmodhi4_ep>

00002dd6 <__udivmodhi4_loop>:
    2dd6:	aa 1f       	adc	r26, r26
    2dd8:	bb 1f       	adc	r27, r27
    2dda:	a6 17       	cp	r26, r22
    2ddc:	b7 07       	cpc	r27, r23
    2dde:	10 f0       	brcs	.+4      	; 0x2de4 <__udivmodhi4_ep>
    2de0:	a6 1b       	sub	r26, r22
    2de2:	b7 0b       	sbc	r27, r23

00002de4 <__udivmodhi4_ep>:
    2de4:	88 1f       	adc	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	5a 95       	dec	r21
    2dea:	a9 f7       	brne	.-22     	; 0x2dd6 <__udivmodhi4_loop>
    2dec:	80 95       	com	r24
    2dee:	90 95       	com	r25
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	08 95       	ret

00002df6 <__udivmodsi4>:
    2df6:	a1 e2       	ldi	r26, 0x21	; 33
    2df8:	1a 2e       	mov	r1, r26
    2dfa:	aa 1b       	sub	r26, r26
    2dfc:	bb 1b       	sub	r27, r27
    2dfe:	fd 01       	movw	r30, r26
    2e00:	0d c0       	rjmp	.+26     	; 0x2e1c <__udivmodsi4_ep>

00002e02 <__udivmodsi4_loop>:
    2e02:	aa 1f       	adc	r26, r26
    2e04:	bb 1f       	adc	r27, r27
    2e06:	ee 1f       	adc	r30, r30
    2e08:	ff 1f       	adc	r31, r31
    2e0a:	a2 17       	cp	r26, r18
    2e0c:	b3 07       	cpc	r27, r19
    2e0e:	e4 07       	cpc	r30, r20
    2e10:	f5 07       	cpc	r31, r21
    2e12:	20 f0       	brcs	.+8      	; 0x2e1c <__udivmodsi4_ep>
    2e14:	a2 1b       	sub	r26, r18
    2e16:	b3 0b       	sbc	r27, r19
    2e18:	e4 0b       	sbc	r30, r20
    2e1a:	f5 0b       	sbc	r31, r21

00002e1c <__udivmodsi4_ep>:
    2e1c:	66 1f       	adc	r22, r22
    2e1e:	77 1f       	adc	r23, r23
    2e20:	88 1f       	adc	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	1a 94       	dec	r1
    2e26:	69 f7       	brne	.-38     	; 0x2e02 <__udivmodsi4_loop>
    2e28:	60 95       	com	r22
    2e2a:	70 95       	com	r23
    2e2c:	80 95       	com	r24
    2e2e:	90 95       	com	r25
    2e30:	9b 01       	movw	r18, r22
    2e32:	ac 01       	movw	r20, r24
    2e34:	bd 01       	movw	r22, r26
    2e36:	cf 01       	movw	r24, r30
    2e38:	08 95       	ret

00002e3a <__prologue_saves__>:
    2e3a:	2f 92       	push	r2
    2e3c:	3f 92       	push	r3
    2e3e:	4f 92       	push	r4
    2e40:	5f 92       	push	r5
    2e42:	6f 92       	push	r6
    2e44:	7f 92       	push	r7
    2e46:	8f 92       	push	r8
    2e48:	9f 92       	push	r9
    2e4a:	af 92       	push	r10
    2e4c:	bf 92       	push	r11
    2e4e:	cf 92       	push	r12
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	ca 1b       	sub	r28, r26
    2e64:	db 0b       	sbc	r29, r27
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	09 94       	ijmp

00002e72 <__epilogue_restores__>:
    2e72:	2a 88       	ldd	r2, Y+18	; 0x12
    2e74:	39 88       	ldd	r3, Y+17	; 0x11
    2e76:	48 88       	ldd	r4, Y+16	; 0x10
    2e78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e84:	b9 84       	ldd	r11, Y+9	; 0x09
    2e86:	c8 84       	ldd	r12, Y+8	; 0x08
    2e88:	df 80       	ldd	r13, Y+7	; 0x07
    2e8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e90:	1b 81       	ldd	r17, Y+3	; 0x03
    2e92:	aa 81       	ldd	r26, Y+2	; 0x02
    2e94:	b9 81       	ldd	r27, Y+1	; 0x01
    2e96:	ce 0f       	add	r28, r30
    2e98:	d1 1d       	adc	r29, r1
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	ed 01       	movw	r28, r26
    2ea6:	08 95       	ret

00002ea8 <_exit>:
    2ea8:	f8 94       	cli

00002eaa <__stop_program>:
    2eaa:	ff cf       	rjmp	.-2      	; 0x2eaa <__stop_program>
